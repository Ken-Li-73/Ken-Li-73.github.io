<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>背包问题：分组背包</title>
    <url>/posts/44826182/</url>
    <content><![CDATA[<p>有 N 组物品和一个容量是 V 的背包。<strong>每组物品有若干个，同一组内的物品最多只能选一个</strong>。</p>
<span id="more"></span>

<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">有 N 组物品和一个容量是 V 的背包。</span><br><span class="line">每组物品有若干个，同一组内的物品最多只能选一个。</span><br><span class="line">每件物品的体积是 vij，价值是 wij，其中 i 是组号，j 是组内编号。</span><br><span class="line">求解将哪些物品装入背包，可使物品总体积不超过背包容量，且总价值最大。</span><br><span class="line">输出最大价值。</span><br><span class="line"></span><br><span class="line">输入格式</span><br><span class="line">第一行有两个整数 N，V，用空格隔开，分别表示物品组数和背包容量。</span><br><span class="line">接下来有 N 组数据：</span><br><span class="line">    每组数据第一行有一个整数 Si，表示第 i 个物品组的物品数量；</span><br><span class="line">    每组数据接下来有 Si 行，每行有两个整数 vij,wij，用空格隔开，分别表示第 i 个物品组的第 j 个物品的体积和价值；</span><br><span class="line">输出格式</span><br><span class="line">输出一个整数，表示最大价值。</span><br></pre></td></tr></table></figure>

<h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> scan.nextInt();	<span class="comment">//输入物品组</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> scan.nextInt();	<span class="comment">//输入背包容量</span></span><br><span class="line">        <span class="type">int</span>[] f = <span class="keyword">new</span> <span class="title class_">int</span>[m+<span class="number">1</span>]; <span class="comment">//容量为0...m的最大价值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++ )&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> scan.nextInt();	<span class="comment">//每组物品个数</span></span><br><span class="line">            Goods[] list = <span class="keyword">new</span> <span class="title class_">Goods</span>[size+<span class="number">1</span>];<span class="comment">//创建一个清单归类每组物品</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=size;j++)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> scan.nextInt();<span class="comment">//输入每个清单每个物品的体积</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> scan.nextInt();<span class="comment">//输入每个清单每个物品的价值</span></span><br><span class="line">                list[j] = <span class="keyword">new</span> <span class="title class_">Goods</span>(v,w);<span class="comment">//将每个物品加入到清单</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=m;j&gt;=<span class="number">0</span>;j--)&#123;	</span><br><span class="line">            	<span class="comment">//遍历每个物品所造成的价值，过程类似于MAX&#123;f[j],f[j-v1]+w1,f[j-v2]+w2,...,f[j-vk]+wk&#125;</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=size;k++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(j-list[k].v&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                        f[j] = Math.max(f[j],f[j-list[k].v]+list[k].w);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出体积不超过m的最大值</span></span><br><span class="line">        System.out.println(f[m]);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="物品类"><a href="#物品类" class="headerlink" title="物品类"></a>物品类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Goods</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> v;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> w;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Goods</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Goods</span><span class="params">(<span class="type">int</span> v,<span class="type">int</span> w)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.v = v;</span><br><span class="line">        <span class="built_in">this</span>.w = w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>算法</tag>
        <tag>背包问题</tag>
        <tag>分组背包</tag>
      </tags>
  </entry>
  <entry>
    <title>背包问题：混合背包</title>
    <url>/posts/42f5d95c/</url>
    <content><![CDATA[<p>有<code>N</code>种物品和一个容量为<code>V</code>的背包，物品分三类：<strong>第一类物品只有一件可用，第二类物品无限次可用，第三类物品最多s_i可用。</strong></p>
<span id="more"></span>

<h3 id="1-可以在动规之前，对其进行分类"><a href="#1-可以在动规之前，对其进行分类" class="headerlink" title="1.可以在动规之前，对其进行分类"></a>1.可以在动规之前，对其进行分类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *   class Goods&#123;</span></span><br><span class="line"><span class="comment"> *       public int v;</span></span><br><span class="line"><span class="comment"> *       public int w;</span></span><br><span class="line"><span class="comment"> *		public int kind;</span></span><br><span class="line"><span class="comment"> *       public Goods(int v, int w,int kind)&#123;</span></span><br><span class="line"><span class="comment"> *           this.v = v;</span></span><br><span class="line"><span class="comment"> *           this.w = w;</span></span><br><span class="line"><span class="comment"> *			this.kind = kind;</span></span><br><span class="line"><span class="comment"> *       &#125;</span></span><br><span class="line"><span class="comment"> *    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> scan.nextInt();</span><br><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> scan.nextInt();</span><br><span class="line">ArrayList&lt;Goods&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> scan.nextInt();</span><br><span class="line">    <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> scan.nextInt();</span><br><span class="line">    <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> scan.nextInt();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>;s-k&gt;=<span class="number">0</span>;k *= <span class="number">2</span>)&#123;</span><br><span class="line">        s -= k;</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Goods</span>(k*v,k*w,k));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(s&gt;<span class="number">0</span>) </span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Goods</span>(s*v,s*w,s));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-动规时，也对其进行分类"><a href="#2-动规时，也对其进行分类" class="headerlink" title="2.动规时，也对其进行分类"></a>2.动规时，也对其进行分类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] f = <span class="keyword">new</span> <span class="title class_">int</span> [m+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(Goods g:list)&#123;</span><br><span class="line">    <span class="keyword">if</span>(g.kind!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=m;j&gt;=g.v;j--)&#123;</span><br><span class="line">            f[j] = Math.max(f[j],f[j-g.v]+g.w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=g.v;j&lt;=m;j++)&#123;</span><br><span class="line">            f[j] = Math.max(f[j],f[j-g.v]+g.w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>背包问题：多重背包</title>
    <url>/posts/7aaec587/</url>
    <content><![CDATA[<p>有<code>N</code>种物品和一个容量为<code>V</code>的背包，<strong>每种物品最多选s_i件可用</strong>。</p>
<span id="more"></span>

<h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>在完全背包的基础上对每种物品的数量加以限制，可以转换为01背包问题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f[i] 表示背包总容量是i的情况下，最大价值是多少</span><br><span class="line">v[i] 表示第i个物品的容量是多少</span><br><span class="line">w[i] 表示第i个物品的价值是多少</span><br><span class="line">s[i] 表示第i个物品有多少个</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> j=m;j&gt;=v[i];j--)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=s[i]&amp;&amp;k*v[i]&lt;=j;k++)&#123;  <span class="comment">//每种选择k个</span></span><br><span class="line">			f[j] = Math.max(f[j],f[j-k*v[i]]+k*w[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-优化"><a href="#2-优化" class="headerlink" title="2.优化"></a>2.优化</h3><h4 id="2-1二进制优化"><a href="#2-1二进制优化" class="headerlink" title="2.1二进制优化"></a>2.1二进制优化</h4><p>前提条件：0…n之间的数，可以用这几个数组合出来：1，2，4，2^k，n-2^k</p>
<p>如0~10可以用 1，2，4，3组合出来</p>
<p>将每种物品的数量二进制化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *   class Goods&#123;</span></span><br><span class="line"><span class="comment"> *       public int v;</span></span><br><span class="line"><span class="comment"> *       public int w;</span></span><br><span class="line"><span class="comment"> *       public Goods(int v, int w)&#123;</span></span><br><span class="line"><span class="comment"> *           this.v = v;</span></span><br><span class="line"><span class="comment"> *           this.w = w;</span></span><br><span class="line"><span class="comment"> *       &#125;</span></span><br><span class="line"><span class="comment"> *    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> scan.nextInt();</span><br><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> scan.nextInt();</span><br><span class="line">ArrayList&lt;Goods&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> scan.nextInt();</span><br><span class="line">    <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> scan.nextInt();</span><br><span class="line">    <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> scan.nextInt();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>;s-k&gt;=<span class="number">0</span>;k *= <span class="number">2</span>)&#123;</span><br><span class="line">        s -= k;</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Goods</span>(k*v,k*w));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(s&gt;<span class="number">0</span>) </span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Goods</span>(s*v,s*w));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>转化为01背包问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(Goods g: list)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=m;j&gt;=g.v;j--)&#123;</span><br><span class="line">        f[j] = Math.max(f[j],f[j-g.v]+g.w);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>假设第i种物品有s个，则创建的物品有k+1个种类，分别是1个，2个，4个，…,2^k 个和s-2^k个物品的组合</p>
<h4 id="2-2二进制优化细节解释"><a href="#2-2二进制优化细节解释" class="headerlink" title="2.2二进制优化细节解释"></a>2.2二进制优化细节解释</h4><p>对于1个第i种物品组合，内循环至f[j]时，数组内的状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f[0] : 表示考虑第i-1个物品，容量为0时的价值。</span><br><span class="line">f[1] : 表示考虑第i-1个物品，容量为0时的价值。</span><br><span class="line">...</span><br><span class="line">f[j-v[i]] : 表示考虑第i-1个物品，容量为j-v[i]时的价值。</span><br><span class="line">...</span><br><span class="line">f[j] : 表示考虑第i-1个物品，容量为j时的价值。</span><br><span class="line">...</span><br><span class="line">f[m] : 表示考虑第i个物品，容量为m时的价值。</span><br><span class="line">此时f[j]考虑是否添加1个第i种物品</span><br><span class="line">此时包含：0，1</span><br></pre></td></tr></table></figure>

<p>对于2个第i种物品组合，内循环至f[j]时，数组内的状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f[0] : 表示考虑第i-1个物品，容量为0时的价值。</span><br><span class="line">f[1] : 表示考虑第i-1个物品，容量为0时的价值。</span><br><span class="line">...</span><br><span class="line">f[j-2*v[i]] : 表示考虑第i-1个物品，容量为j-2*v[i]时的价值。</span><br><span class="line">...</span><br><span class="line">f[j-v[i]] : 表示考虑第i个物品是否添加1个，容量为j-v[i]时的价值。</span><br><span class="line">...</span><br><span class="line">f[j] : 表示考虑第i个物品是否添加1个，容量为j时的价值。</span><br><span class="line">...</span><br><span class="line">f[m] : 表示考虑第i个物品是否添加2个，容量为m时的价值。</span><br><span class="line"></span><br><span class="line">此时f[j]考虑在是否添加1个第i种物品的基础上，添加添加2个第i种物品的基础</span><br><span class="line">此时包含：0+2，1+2</span><br></pre></td></tr></table></figure>

<p>对于2^k个第i种物品组合，内循环至f[j]时，数组内的状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f[0] : 表示考虑第i-1个物品，容量为0时的价值。</span><br><span class="line">f[1] : 表示考虑第i-1个物品，容量为0时的价值。</span><br><span class="line">...</span><br><span class="line">f[j-2^k*v[i]] : 表示考虑第i-1个物品，容量为j-2^k*v[i]时的价值。</span><br><span class="line">...</span><br><span class="line">f[j-2^(k-1)*v[i]] : 表示考虑第i-1个物品是否添加2^(k-1)个，容量为j-2^(k-1)*v[i]时的价值。//第k-1次循环到里结束</span><br><span class="line">...</span><br><span class="line">f[j-2*v[i]] : 表示考虑第i个物品是否添加2^(k-1)个，容量为j-2*v[i]时的价值。</span><br><span class="line">...</span><br><span class="line">f[j-v[i]] : 表示考虑第i个物品是否添加2^(k-1)个，容量为j-v[i]时的价值。</span><br><span class="line">...</span><br><span class="line">f[j] : 表示考虑第i个物品是否添加是否添加2^(k-1)个，容量为j时的价值。</span><br><span class="line">...</span><br><span class="line">f[m] : 表示考虑第i个物品是否添加是否添加2^k个，容量为m时的价值。</span><br><span class="line"></span><br><span class="line">此时f[j]考虑在是否添加1个第i种物品的基础上，添加添加2个第i种物品的基础</span><br><span class="line">此时包含：0+2^k,1+2^k,2+2^k,1+2+2^k,....，1+2+4+...+2^k</span><br></pre></td></tr></table></figure>

<p>因此可以全部包括数量的种类</p>
]]></content>
  </entry>
  <entry>
    <title>背包问题：完全背包</title>
    <url>/posts/8b258efe/</url>
    <content><![CDATA[<p>有<code>N</code>种物品和一个容量为<code>V</code>的背包，<strong>每种物品都有无限件可用</strong>。</p>
<span id="more"></span>

<h3 id="1-动态规划"><a href="#1-动态规划" class="headerlink" title="1.动态规划"></a>1.动态规划</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f[i] 表示背包总容量是i的情况下，最大价值是多少</span><br><span class="line">v[i] 表示第i个物品的容量是多少</span><br><span class="line">w[i] 表示第i个物品的价值是多少</span><br></pre></td></tr></table></figure>
<p>根据01背包的概念，完全背包其实就是在每种物品选择了0…V/vi个，转换为01背包问题，变成<strong>第i种的第k个物品选不选择</strong>的问题。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">max&#123;f[v1,v1,v1,...,v1,v2,v2,...,v2,v3,v3,...,v3,v4,...,...vm]&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//状态表达式：在01背包的基础上进行扩展</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;<span class="comment">//选择第i种物品</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=m;j&gt;v[i];j--)&#123;<span class="comment">//在不选择第i中物品时，容量考虑选择到i-1种物品的最大价值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;k*v[i]&lt;=j;k++)&#123;<span class="comment">//在选择第i件物品时，选择几件，01背包的的扩展</span></span><br><span class="line">            f[j] = Math.max(f[j],f[j-k*v[i]]+k*w[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>

<h3 id="2-优化：内层循环正序遍历"><a href="#2-优化：内层循环正序遍历" class="headerlink" title="2.优化：内层循环正序遍历"></a>2.优化：内层循环正序遍历</h3><p><strong>意义：</strong><br>    表示在容量为0……V时，选择了第i件物品，由于是从小到大，<strong>每个容量变化都包含着若干个体积为v[i]的物品</strong>。<br>    因此正序，恰好可以满足包含选择若干个第i种物品的要求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;<span class="comment">//选择第i种物品</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=v[i];j&lt;=m;j++)&#123;<span class="comment">//在选择第i中物品时，容量更新前是i-1种物品的最大价值，更新后是考虑了第i种物品。</span></span><br><span class="line">        f[j] = Math.max(f[j],f[j-v[i]]+w[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>
<p><strong>举例：</strong></p>
<p>​    在外循环第<code>i</code>层，内循环第<code>j</code>次时的更新<code>f[j]</code>，因此是正序，所以是从小到大遍历f数组。此时：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f[0]: 表示考虑第i个物品，容量为0时的价值。</span><br><span class="line">f[1]: 表示考虑第i个物品，容量为1时的价值。</span><br><span class="line">...</span><br><span class="line">f[j-k*v[i]]:表示考虑第i个物品,容量为j-k*v[i]时的价值。</span><br><span class="line">...</span><br><span class="line">f[j-(k-1)*v[i]]:表示考虑第i个物品,容量为j-(k-1)*v[i]时的价值。</span><br><span class="line">...</span><br><span class="line">f[j-*v[i]]:表示考虑第i个物品,容量为j-v[i]时的价值。</span><br><span class="line">...</span><br><span class="line">f[j-1]: 表示考虑第i个物品，容量为j-1时的价值。</span><br><span class="line">f[j]: 表示考虑第i-1个物品，容量为j时的价值。</span><br><span class="line">f[j+1]: 表示考虑第i-1个物品，容量为j+1时的价值。</span><br><span class="line">...</span><br><span class="line">f[m]: 表示考虑第i-1个物品，容量为m时的价值。</span><br></pre></td></tr></table></figure>
<p>迭代计算</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">计算f[j-(k-1)*v[i]] = Math.max(f[j-(k-1)*v[i]],f[j-k*v[i]]+w[i]),</span><br><span class="line">计算f[j-(k-2)*v[i]] = Math.max(f[j-(k-2)*v[i]],f[j-(k-1)*v[i]]+w[i]),</span><br><span class="line">...</span><br><span class="line">计算f[j] = Math.max(f[j],f[j-v[i]]+w[i]),</span><br></pre></td></tr></table></figure>

<p>发现：<br>    等式右侧用到的f[0…V]是考虑第i个物品后的最大价值<br>    计算f[j]之前已经计算了，f[j-k*v[i]],f[j-(k-1)*v[i]],…,f[j-v[i]],因此随着容量增大，前面的若干个第i种物品已经考虑到了</p>
<h3 id="3-恰好装满的情况"><a href="#3-恰好装满的情况" class="headerlink" title="3.恰好装满的情况"></a>3.恰好装满的情况</h3><p>完全背包是01背包的扩展，是可以变为01背包的，因此初始条件和[01背包问题](<a href="https://mykebaby.com/posts/d461a7e0/">背包问题：01背包 | 半日浮生 (mykebaby.com)</a>)是一样的</p>
]]></content>
  </entry>
  <entry>
    <title>背包问题：01背包</title>
    <url>/posts/d461a7e0/</url>
    <content><![CDATA[<p>有<code>N</code>种物品和一个容量为<code>V</code>的背包，<strong>每种物品只有一件可用</strong>。</p>
<span id="more"></span>

<h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">01背包问题：每个东西只能装入背包一次，换言之，对于某个东西只有装和不装两种可能</span><br><span class="line">动态方程：</span><br><span class="line">f[i][V]:表示在选择第i个物品时，剩余背包空间为V的最大价值。</span><br><span class="line">    1.如果不装入，f[i][V] = f[i-1][V]。</span><br><span class="line">    2.如果装入，f[i][V] = f[i-1][V-v[i]]+w[i]。</span><br><span class="line">起始条件：</span><br><span class="line">当背包空间为0时，价值为0，即f[i][0]=0;</span><br></pre></td></tr></table></figure>



<h3 id="2-不要求装满的情况下"><a href="#2-不要求装满的情况下" class="headerlink" title="2.不要求装满的情况下"></a>2.不要求装满的情况下</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//1.初始输入和定义</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> scan.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> scan.nextInt();</span><br><span class="line">        <span class="type">int</span>[] v = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span>[] w = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span>[][] f= <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>][m+<span class="number">1</span>];<span class="comment">//存放第n个物品，背包容量为m的最大价值</span></span><br><span class="line">        <span class="comment">//2.动规</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i&lt;=n;i++)&#123;<span class="comment">//存放第i个物品时，不同存储空间的最大价值</span></span><br><span class="line">            v[i] = scan.nextInt();</span><br><span class="line">            w[i] = scan.nextInt();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j&lt;=m;j++)&#123;</span><br><span class="line">                <span class="comment">//不选择当前物品时，空间为j的最大总和，选择当前物品时，在空间为（j-当前物品空间）的最大价值</span></span><br><span class="line">                f[i][j] = f[i-<span class="number">1</span>][j];</span><br><span class="line">                <span class="keyword">if</span>(j-v[i]&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                  f[i][j] = Math.max(f[i][j],f[i-<span class="number">1</span>][j-v[i]]+w[i]);  </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.找到最大容量</span></span><br><span class="line">        System.out.println(f[n][m]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-空间优化"><a href="#2-空间优化" class="headerlink" title="2.空间优化"></a>2.空间优化</h3><p>优化原因：第i个物品的状态只和第i-1个物品的状态有关,</p>
<p>优化方式：可以在保持循环层数不变的情况下，压缩为一维，动态改变数组的元素，来表示存放不同物品时的最大价值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//因为当前因此</span></span><br><span class="line"><span class="comment">//在一维数组中表示第i个物品的最大价值和第i-1一个物品的的最大价值;</span></span><br><span class="line"><span class="comment">//循环到第i行时：此时更新的元素，表示在放第i个物品时的价值，未更新的表示在放第i-1个物品的价值。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bag01</span><span class="params">(<span class="type">int</span>[] f,<span class="type">int</span>[] v,<span class="type">int</span>[] w)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> v.length-<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> f.length-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i&lt;=n;i++)&#123;<span class="comment">//存放第i个物品时，不同存储空间的最大价值</span></span><br><span class="line">        <span class="comment">//逆序</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> m;j&gt;=v[i];j--)&#123;</span><br><span class="line">            f[j] = Math.max(f[j],f[j-v[i]]+w[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-1内循环逆序原因"><a href="#2-1内循环逆序原因" class="headerlink" title="2.1内循环逆序原因"></a>2.1内循环逆序原因</h4><p>原式为：<code>f[i][j] = Math.max(f[i-1][j],f[i-1][j-v[i]]+w[i]);</code></p>
<p>优化后：<code>f[j] = Math.max(f[j],f[j-v[i]]+w[i]);</code>(右侧的f[j],f[j-v[i]]，指的是考虑上一种物品状态下的）</p>
<p><strong>如果内循环按照正序运行:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第i-1次循环更新方式为：f[j-v[i]]更新代替初始值，f[j]更新代替初始值</span><br><span class="line">第 i 次循环更新方式为：f[j-v[i]]更新代替初始值，f[j]更新代替初始值</span><br></pre></td></tr></table></figure>

<p>举例：如果在外循环第<code>i</code>层，内循环第<code>j</code>次时的更新<code>f[j]</code>，因此是正序，所以是从小到大遍历f数组。此时：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f[0]: 表示考虑第i个物品，容量为0时的价值。</span><br><span class="line">f[1]: 表示考虑第i个物品，容量为1时的价值。</span><br><span class="line">……</span><br><span class="line">f[j-v[i]]:表示考虑第i个物品,容量为j-v[i]时的价值。</span><br><span class="line">……</span><br><span class="line">f[j-1]: 表示考虑第i个物品，容量为j-1时的价值。</span><br><span class="line">f[j]: 表示考虑第i-1个物品，容量为j时的价值。</span><br><span class="line">f[j+1]: 表示考虑第i-1个物品，容量为j+1时的价值。</span><br><span class="line">……</span><br><span class="line">f[m]: 表示考虑第i-1个物品，容量为m时的价值。</span><br><span class="line"></span><br><span class="line">此时计算f[j] = Math.max(f[j],f[j-v[i]]+w[i]),</span><br><span class="line">等式右侧用到的f[j]是考虑第i-1个物品的价值，可以直接用</span><br><span class="line">等式右侧用到的f[j-v[i]]是考虑第i个物品的价值，不可以直接用</span><br></pre></td></tr></table></figure>

<p><strong>如果内循环按照逆序运行:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第i-1次循环更新方式为：f[j]更新代替第i-2层的值,f[j-v[i]]更新代替第i-2层的值</span><br><span class="line">第 i 次循环更新方式为：f[j]更新代替第i-1层的值</span><br></pre></td></tr></table></figure>

<p>举例：如果在外循环第<code>i</code>层，内循环第<code>j</code>次时的更新<code>f[j]</code>，因此是逆序，所以是从大到小遍历f数组。此时：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f[0]: 表示考虑第i-1个物品，容量为0时的价值。</span><br><span class="line">f[1]: 表示考虑第i-1个物品，容量为1时的价值。</span><br><span class="line">……</span><br><span class="line">f[j-v[i]]:表示考虑第i-1个物品,容量为j-v[i]时的价值。</span><br><span class="line">……</span><br><span class="line">f[j-1] 表示考虑第i-1个物品，容量为j-1时的价值。</span><br><span class="line">f[j]: 表示考虑第i-1个物品，容量为j时的价值。</span><br><span class="line">f[j+1]: 表示考虑第i个物品，容量为j+1时的价值。</span><br><span class="line">……</span><br><span class="line">f[m]: 表示考虑第i个物品，容量为m时的价值。</span><br><span class="line"></span><br><span class="line">此时计算f[j] = Math.max(f[j],f[j-v[i]]+w[i]),</span><br><span class="line">等式右侧用到的f[j]是考虑第i-1个物品的价值，可以直接用</span><br><span class="line">等式右侧用到的f[j-v[i]]是考虑第i-1个物品的价值，可以直接用</span><br></pre></td></tr></table></figure>

<h3 id="3-恰好在装满的情况下"><a href="#3-恰好在装满的情况下" class="headerlink" title="3.恰好在装满的情况下"></a>3.恰好在装满的情况下</h3><p>一维数组初始化代表的意义:表示在空间为0~V的情况下的最大价值价可以为0。<br>但如果表示恰好装满的情况下，这种情况是不允许的<br>只有容量为0的时候价值才能为<code>0</code>，即<code>f[0] = 0;</code><br>其他情况表示背包容量为未装满，设为<code>∞</code>，即<code>f[1...m] = INF;</code><br>最后的f[m]可能为<code>-∞</code>，即不存在恰好装满的情况，因此需要在最后进行判断。</p>
<h4 id="3-1最大价值"><a href="#3-1最大价值" class="headerlink" title="3.1最大价值"></a>3.1最大价值</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] v = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];<span class="comment">//第i个物品的价值</span></span><br><span class="line"><span class="type">int</span>[] w = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];<span class="comment">//第n个物品的价值</span></span><br><span class="line"><span class="type">int</span>[] f= <span class="keyword">new</span> <span class="title class_">int</span>[m+<span class="number">1</span>];<span class="comment">//背包容量为m的最大价值</span></span><br><span class="line"><span class="comment">//1.设置初始值</span></span><br><span class="line">Arrays.fill(f,Integer_MINVALUE);<span class="comment">//设为-∞</span></span><br><span class="line">f[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//2.动规</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i&lt;=n;i++)&#123;<span class="comment">//存放第i个物品时，不同存储空间的最大价值</span></span><br><span class="line">    <span class="comment">//逆序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> m;j&gt;=v[i];j--)&#123;</span><br><span class="line">        f[j] = Math.max(f[j],f[j-v[i]]+w[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.判断</span></span><br><span class="line"><span class="keyword">if</span>(f[m]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    System.out.println(f[m]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-2最小价值"><a href="#3-2最小价值" class="headerlink" title="3.2最小价值"></a>3.2最小价值</h4><p>和上面的恰好在装满的情况下，求最大价值类似</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">MAX</span> <span class="operator">=</span> <span class="number">100000000</span>;<span class="comment">//设为∞,一个尽可能大的数，但要保证在运算的时候不能溢出</span></span><br><span class="line">Arrays.fill(f,MAX);</span><br><span class="line">f[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i&lt;=n;i++)&#123;<span class="comment">//存放第i个物品时，不同存储空间的最大价值</span></span><br><span class="line">    <span class="comment">//逆序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> m;j&gt;=v[i];j--)&#123;</span><br><span class="line">        f[j] = Math.min(f[j],f[j-v[i]]+w[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(f[m]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    System.out.println(f[m]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-价值是体积"><a href="#4-价值是体积" class="headerlink" title="4.价值是体积"></a>4.价值是体积</h3><p>当遇到背包问题没有其他权重，只是问到背包在装物品时，最小剩余体积是多少时，此时的体积就是背包问题的价值，只是隐藏到一起</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">f[j] = Math.max(f[j],f[j-v[i]]+v[i]);</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> m-f[m];</span><br></pre></td></tr></table></figure>

<h3 id="5-求最佳方案数"><a href="#5-求最佳方案数" class="headerlink" title="5.求最佳方案数"></a>5.求最佳方案数</h3><p>问题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">有 N 件物品和一个容量是 V 的背包。每件物品只能使用一次。</span><br><span class="line">第 i 件物品的体积是 vi，价值是 wi。</span><br><span class="line">求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。</span><br><span class="line">输出 最优选法的方案数。注意答案可能很大，请输出答案模 10^9+7 的结果。</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">public class Main&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        final int MOD = 1000000007;</span><br><span class="line">        Scanner scan = new Scanner(System.in);</span><br><span class="line">        int n = scan.nextInt();</span><br><span class="line">        int m = scan.nextInt();</span><br><span class="line">        int[] f = new int[m+1];</span><br><span class="line">        int[] g = new int[m+1];//体积为0...m的方案数</span><br><span class="line">        </span><br><span class="line">        Arrays.fill(f,Integer.MIN_VALUE);</span><br><span class="line">        f[0] = 0;</span><br><span class="line">        g[0] = 1;//体积为0时，只有一种方案。</span><br><span class="line">        </span><br><span class="line">        for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">            int v = scan.nextInt();</span><br><span class="line">            int w = scan.nextInt();</span><br><span class="line">            for(int j=m;j&gt;=v;j--)&#123;</span><br><span class="line">                int a = Math.max(f[j],f[j-v]+w);//记录是否选择的最大值</span><br><span class="line">                int s = 0;</span><br><span class="line">                //如果相同则两种都选择</span><br><span class="line">                if(a==f[j]) s+=g[j];//不选择当前物品</span><br><span class="line">                if(a==f[j-v]+w) s+=g[j-v];//选择当前物品</span><br><span class="line">                if(s&gt;=MOD) s-=MOD;</span><br><span class="line">                f[j] = a;</span><br><span class="line">                g[j] = s;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //最优方案：容量不超过m的最大价值</span><br><span class="line">        int max = 0;</span><br><span class="line">        for(int i = 1; i&lt;=m;i++)&#123;</span><br><span class="line">            max = Math.max(max,f[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        //最大价值的方案数</span><br><span class="line">        int result = 0;</span><br><span class="line">        if(max&gt;0)&#123;</span><br><span class="line">            for(int i=1;i&lt;=m;i++)&#123;</span><br><span class="line">                </span><br><span class="line">                result += max==f[i]?g[i]:0;</span><br><span class="line">                result -= result&gt;=MOD? MOD:0;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            result = 1;//都不满足，那就只有都不选这一种方案</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-求最优具体方案"><a href="#6-求最优具体方案" class="headerlink" title="6.求最优具体方案"></a>6.求最优具体方案</h3><p>问题：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">有 N 件物品和一个容量是 V 的背包。每件物品只能使用一次。</span><br><span class="line">第 i 件物品的体积是 vi，价值是 wi。</span><br><span class="line">求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。</span><br><span class="line">输出 字典序最小的方案。这里的字典序是指：所选物品的编号所构成的序列。物品的编号范围是 1…N</span><br></pre></td></tr></table></figure>

<p>解答</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">public class Main&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Scanner scan = new Scanner(System.in);</span><br><span class="line">        int n = scan.nextInt();</span><br><span class="line">        int m = scan.nextInt();</span><br><span class="line">        int[][] f = new int[n+2][m+2];</span><br><span class="line">        int[] v = new int[n+2];</span><br><span class="line">        int[] w = new int[n+2];</span><br><span class="line">        for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">            v[i] = scan.nextInt();</span><br><span class="line">            w[i] = scan.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        //从最后一项物体反向遍历添加</span><br><span class="line">        for(int i=n;i&gt;=1;i--)&#123;</span><br><span class="line">            for(int j=0;j&lt;=m;j++)&#123;</span><br><span class="line">                f[i][j] = f[i+1][j];</span><br><span class="line">                if(j-v[i]&gt;=0)</span><br><span class="line">                    f[i][j] = Math.max(f[i][j],f[i+1][j-v[i]]+w[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        //从前向后，贪心算法，只要可以选择当前物品就选择</span><br><span class="line">        int vtemp = m;</span><br><span class="line">        for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">            if(vtemp-v[i]&gt;=0&amp;&amp;f[i][vtemp]==f[i+1][vtemp-v[i]]+w[i])&#123;</span><br><span class="line">                System.out.print(i+&quot; &quot;);</span><br><span class="line">                vtemp -= v[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>算法</tag>
        <tag>01背包</tag>
        <tag>背包装满最优方案</tag>
        <tag>最优方案个数</tag>
        <tag>最优方案具体方案</tag>
      </tags>
  </entry>
  <entry>
    <title>判断是不是平衡二叉树</title>
    <url>/posts/b2f918fd/</url>
    <content><![CDATA[<p>平衡二叉树的条件</p>
<ol>
<li>左右自子树均为平衡二叉树</li>
<li>左右子树的高度相差不超过1</li>
</ol>
<span id="more"></span>

<h3 id="1-搭建递归函数主体"><a href="#1-搭建递归函数主体" class="headerlink" title="1.搭建递归函数主体"></a>1.搭建递归函数主体</h3><p>​    从条件1可以看出，平衡二叉树左右子树也是平衡二叉树，这是明显的递归思想体现，以此搭建递归函数主体。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">    <span class="comment">//1.左右子树也是平衡二叉树</span></span><br><span class="line">    method(root.left);</span><br><span class="line">    method(root.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从条件2可以看出，左右子树的高度相差不超过1，因此这个函数的返回值应该为<strong>当前节点的高度</strong>，这样才能在函数体内比较高度，进一步细化，将返回类型设为<code>int</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">method</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">    <span class="comment">//1.左右子树也是平衡二叉树</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> method(root.left);</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> method(root.right);</span><br><span class="line">    <span class="comment">//2.条件2：左右子树高度小于1</span></span><br><span class="line">    <span class="keyword">if</span>(Math.abs(left-right)&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//不是平衡二叉树</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//是平衡二叉树</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-细化边界条件"><a href="#2-细化边界条件" class="headerlink" title="2.细化边界条件"></a>2.细化边界条件</h3><p>为递归创建边界条件，从函数整体可以看出，只要当前结点还存在，就可以向下寻找左右子树，因此终止条件为<code>root==null</code>。下面加入进去。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">method</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">    <span class="comment">//3.边界条件</span></span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//当前结点为null,说明没有结点，没有高度。</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//1.左右子树也是平衡二叉树</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> method(root.left);</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> method(root.right);</span><br><span class="line">    <span class="comment">//2.条件2：左右子树高度小于1</span></span><br><span class="line">    <span class="keyword">if</span>(Math.abs(left-right)&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//不是平衡二叉树</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//是平衡二叉树</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-细化return语句"><a href="#3-细化return语句" class="headerlink" title="3.细化return语句"></a>3.细化return语句</h3><p>由于返回的是树的高度，以当前结点为根节点的高度，应为左右子树高度最高的子树，并在此基础上加上一个结点高度。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">method</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">    <span class="comment">//3.边界条件</span></span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//当前结点为null,说明没有结点，没有高度。</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//1.左右子树也是平衡二叉树</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> method(root.left);</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> method(root.right);</span><br><span class="line">    <span class="comment">//2.条件2：左右子树高度小于1</span></span><br><span class="line">    <span class="keyword">if</span>(Math.abs(left-right)&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//不是平衡二叉树</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//是平衡二叉树</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.返回树的高度</span></span><br><span class="line">    <span class="keyword">return</span> Math.max(left,right)+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-细化第2步"><a href="#4-细化第2步" class="headerlink" title="4.细化第2步"></a>4.细化第2步</h3><p>由于返回值为树的高度，因此在判断出左右子树的高度差超过1时，无法在遍历过程中通过返回值直接记录。</p>
<p>因此有以下几个存储方法：</p>
<ol>
<li>提供一个全局变量来存储左右子树的高度差</li>
<li>在递归函数形参中跟随一个引用类型的变量。</li>
<li>将高度差隐藏在返回值中。</li>
</ol>
<p>在此选用第3种方法，由于树的高度是非负数，因此可以用负数来表示左右子树高度超过1,并补充细化return语句。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">method</span><span class="params">(TreeNode root,<span class="type">int</span>[] deepth)</span>&#123;</span><br><span class="line">    <span class="comment">//3.边界条件</span></span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//当前结点为null,说明没有结点，没有高度。</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//1.左右子树也是平衡二叉树</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> method(root.left);</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> method(root.right);</span><br><span class="line">    <span class="comment">//2.条件2：左右子树高度小于1</span></span><br><span class="line">    <span class="keyword">if</span>(Math.abs(left-right)&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;<span class="comment">//负数表示左右子树高度超过1.</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//5.deepth[0]存放根节点最大左右子树的高度差</span></span><br><span class="line">    deepth[<span class="number">0</span>] = Math.max(deepth[<span class="number">0</span>],Math.abs(left-right));</span><br><span class="line">    <span class="comment">//4.返回树的高度</span></span><br><span class="line">    <span class="keyword">return</span> (left==-<span class="number">1</span>||right==-<span class="number">1</span>)?-<span class="number">1</span>:Math.max(left,right)+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-判断条件"><a href="#5-判断条件" class="headerlink" title="5.判断条件"></a>5.判断条件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">IsBalanced</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//假设空树平衡</span></span><br><span class="line">    <span class="comment">//判断高度差是否大于1</span></span><br><span class="line">    <span class="keyword">if</span>(method(root,deepth)==-<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//不是平衡二叉树</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>平衡二叉树</tag>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>判断一个链表是否是回文链表</title>
    <url>/posts/4b83bc00/</url>
    <content><![CDATA[<p>回文链表指的是从中间开始，两边的结点值成镜像排列。</p>
<span id="more"></span>

<h3 id="1-思路"><a href="#1-思路" class="headerlink" title="1.思路"></a>1.思路</h3><p><strong>解决回文链表的思路：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">声明两个指针，一个从头结点顺序遍历，一个从尾结点逆序遍历。</span><br><span class="line"></span><br><span class="line">遍历结束条件：遍历到中间结点</span><br><span class="line"></span><br><span class="line">遍历过程：并比较结点值是否相同，不同则返回false,相同则继续遍历，直到满足条件跳出，返回true。</span><br></pre></td></tr></table></figure>

<p><strong>难点：</strong></p>
<ol>
<li>单链表无法从后向前遍历</li>
<li>不知道链表长度，一次遍历找不到中间结点</li>
</ol>
<p><strong>难点解析：</strong></p>
<p><strong>如何一次遍历找到中间结点？</strong></p>
<p>通过快慢指针，慢指针每次走一个结点，快指针每次走两个结点。当快指针走到最后一个结点时，慢指针的下一个结点即为中间结点之后的结点。</p>
<p><strong>如何从后向前遍历</strong>?</p>
<p>通过翻转链表将后半段链表翻转，此时尾结点变成头结点就可以实现逆序遍历了。</p>
<p><strong>特殊点：</strong></p>
<ol>
<li>翻转之后，slow指针所在的结点指向的下一个结点仍然是下一个结点，,因此要变成两段链表要令<code>slow.next = null</code>;</li>
<li>由于使用了快慢指针，则链表必须有一个结点。</li>
</ol>
<h3 id="2-实现程序"><a href="#2-实现程序" class="headerlink" title="2.实现程序"></a>2.实现程序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPail</span> <span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="comment">// 链表必须有值</span></span><br><span class="line">    <span class="keyword">if</span>(head==<span class="literal">null</span>||head.next==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//声明快慢指针</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head.next;</span><br><span class="line">    <span class="comment">//遍历遍历，找到中间结点位置</span></span><br><span class="line">    <span class="keyword">while</span>(fast.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        <span class="keyword">if</span>(fast.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//翻转后半段链表，并将头结点赋于快指针</span></span><br><span class="line">    fast = reverse(slow.next);</span><br><span class="line">    <span class="comment">//把链表变成两段</span></span><br><span class="line">    slow.next = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//将原链表头结点赋于慢指针</span></span><br><span class="line">    slow = head;</span><br><span class="line">    <span class="comment">//遍历两段链表，并逐个结点比较</span></span><br><span class="line">    <span class="keyword">while</span>(slow !=<span class="literal">null</span>&amp;&amp;fast!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(slow.val!=fast.val)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-翻转链表"><a href="#3-翻转链表" class="headerlink" title="3.翻转链表"></a>3.翻转链表</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">reverse</span><span class="params">(ListNode head)</span>&#123;</span><br><span class="line">    <span class="comment">//定义尾结点</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">tail</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span>(head!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">//将要丢掉的链表结点赋值给temp</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="comment">//链表结点后移</span></span><br><span class="line">        head = head.next;</span><br><span class="line">        <span class="comment">//将要丢掉的链表的下一结点赋值给尾结点</span></span><br><span class="line">        temp.next = tail;</span><br><span class="line">        <span class="comment">//尾结点前移</span></span><br><span class="line">        tail = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tail;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>反转链表</tag>
        <tag>双指针</tag>
        <tag>快慢指针</tag>
        <tag>链表遍历</tag>
      </tags>
  </entry>
  <entry>
    <title>算法：匈牙利算法</title>
    <url>/posts/ecc65d01/</url>
    <content><![CDATA[<p>匈牙利算法思想：<strong>先到先得，能让则让</strong>。</p>
<span id="more"></span>

<h3 id="1-例题"><a href="#1-例题" class="headerlink" title="1.例题"></a>1.例题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">    有一个正偶数 n ，表示待挑选的自然数的个数。后面给出 n 个具体的数字。</span><br><span class="line"></span><br><span class="line">已知条件：</span><br><span class="line">    1.“素数伴侣”:两个自然数相加之和为质数</span><br><span class="line">    2.每个待挑选的自然数只能选择一次进行组合</span><br><span class="line"></span><br><span class="line">输出:</span><br><span class="line">	输出一个整数 K ，表示你求得的“最佳方案”组成“素数伴侣”的对数。</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">    输入：</span><br><span class="line">        4</span><br><span class="line">        2 5 6 13</span><br><span class="line">        2</span><br><span class="line">        3 6</span><br><span class="line"></span><br><span class="line">    输出：</span><br><span class="line">        2</span><br><span class="line">        0</span><br></pre></td></tr></table></figure>
<h3 id="2-算法程序"><a href="#2-算法程序" class="headerlink" title="2.算法程序"></a>2.算法程序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; list1; <span class="comment">//存放奇数</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; list2; <span class="comment">//存放偶数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> [] visit; <span class="comment">//数字是否被访问</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> [] match;    <span class="comment">//存放当前元素所匹配的数字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> counter;    <span class="comment">//计数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Solution</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Solution</span><span class="params">(<span class="type">int</span>[] nums)</span>&#123;</span><br><span class="line">        classify(nums); <span class="comment">//分类奇数和偶数</span></span><br><span class="line">        traverse();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//******按照奇数偶数分类*********</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">classify</span> <span class="params">(<span class="type">int</span>[] nums)</span>&#123;</span><br><span class="line">        <span class="comment">//1.声明存放列表</span></span><br><span class="line">        list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//2.按照奇数偶数分类</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>((i&amp;<span class="number">1</span>)==<span class="number">1</span>) &#123;</span><br><span class="line">                list1.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                list2.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.建立list2所匹配的元素标识</span></span><br><span class="line">        visit = <span class="keyword">new</span> <span class="title class_">boolean</span> [list2.size()];<span class="comment">//是否被访问</span></span><br><span class="line">        match = <span class="keyword">new</span> <span class="title class_">int</span>[list2.size()];     <span class="comment">//是否有匹配</span></span><br><span class="line">        Arrays.fill(match,-<span class="number">1</span>);             <span class="comment">//初始无匹配</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//*********************************************************</span></span><br><span class="line">    <span class="comment">//遍历Array1</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">traverse</span><span class="params">()</span>&#123;</span><br><span class="line">        counter =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;list1.size();i++)&#123;</span><br><span class="line">            <span class="comment">//每换一次元素，Array2的元素访问初始化为未访问</span></span><br><span class="line">            visit = <span class="keyword">new</span> <span class="title class_">boolean</span>[list2.size()];</span><br><span class="line">            <span class="keyword">if</span>(find(i))&#123;</span><br><span class="line">                counter++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//匈牙利算法:先到先得，能让则让</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j&lt;list2.size();j++)&#123;</span><br><span class="line">            <span class="comment">//如果两者之和为素数，并且所匹配的元素没有被访问过（递归去重）</span></span><br><span class="line">            <span class="keyword">if</span>(isPrime(list1.get(i)+list2.get(j))&amp;&amp;!visit[j])&#123;</span><br><span class="line">                visit[j] = <span class="literal">true</span>;</span><br><span class="line">                <span class="comment">//如果这个匹配元素还没匹配的的对象，或者所匹配元素可以更改匹配对象</span></span><br><span class="line">                <span class="keyword">if</span>(match[j]==-<span class="number">1</span>||find(match[j]))&#123;</span><br><span class="line">                    match[j] = i;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;  </span><br><span class="line"><span class="comment">//*********************************************************</span></span><br><span class="line">    <span class="comment">//判断是否是质数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPrime</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i*i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n%i==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回最佳方案结果</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">result</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> counter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-调用程序"><a href="#3-调用程序" class="headerlink" title="3.调用程序"></a>3.调用程序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">//判断是否还有输入</span></span><br><span class="line">        <span class="keyword">while</span>(scan.hasNext())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> scan.nextInt();</span><br><span class="line">            <span class="type">int</span>[] nums = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                nums[i] = scan.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//每两行进行一次运算</span></span><br><span class="line">            <span class="type">Solution</span> <span class="variable">so</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Solution</span>(nums);</span><br><span class="line">            System.out.println(so.result());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>算法</tag>
        <tag>匈牙利算法</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL:分支结构</title>
    <url>/posts/6577bcb2/</url>
    <content><![CDATA[<p>学习笔记：介绍MySQL中分支结构的基本使用。</p>
<span id="more"></span>

<h3 id="流程控制结构"><a href="#流程控制结构" class="headerlink" title="流程控制结构"></a>流程控制结构</h3><p>顺序结构:程序从上往下依次执行<br>分支结构:程序从两条或多条路径中选择一条去执行<br>循环结构:程序在满足一定条件的基础上，重复执行一段代码</p>
<h3 id="1-分支结构"><a href="#1-分支结构" class="headerlink" title="1.分支结构"></a>1.分支结构</h3><h4 id="1-1-if-函数"><a href="#1-1-if-函数" class="headerlink" title="1.1 if 函数"></a>1.1 if 函数</h4><p>功能:实现简单的双分支语法:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">if(表达式<span class="number">1</span>,表达式<span class="number">2</span>,表达式<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>执行顺序:<br>如果表达式1成立，则if函数返回表达式2的值，否则返回表达式3的值<br>应用:任何地方</p>
<h4 id="1-2-case-结构"><a href="#1-2-case-结构" class="headerlink" title="1.2.case 结构"></a>1.2.case 结构</h4><p>情况1:类似于java中的switch语句，一般用于实现的等值判断</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> 变量<span class="operator">|</span>表达式<span class="operator">|</span>字段</span><br><span class="line"><span class="keyword">when</span> 要判断的值 <span class="keyword">then</span> 返回的值<span class="number">1</span>或语句<span class="number">1</span>;</span><br><span class="line"><span class="keyword">when</span> 要判断的值 <span class="keyword">then</span> 返回的值<span class="number">2</span>或语句<span class="number">2</span>;</span><br><span class="line">······</span><br><span class="line"><span class="keyword">else</span> 要判断的值n或语句<span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">case</span>;</span><br></pre></td></tr></table></figure>

<p>情况2:类似与java中的多重if语句,一般用于实现区间判断</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> </span><br><span class="line"><span class="keyword">when</span> 要判断的条件 <span class="keyword">then</span> 返回的值<span class="number">1</span>或语句<span class="number">1</span>;</span><br><span class="line"><span class="keyword">when</span> 要判断的条件 <span class="keyword">then</span> 返回的值<span class="number">2</span>或语句<span class="number">2</span>;</span><br><span class="line">······</span><br><span class="line"><span class="keyword">else</span> 要判断的值n;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">case</span>;</span><br></pre></td></tr></table></figure>

<p>特点:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>可以作为表达式，嵌套在其他语句中使用，可以放在任何地方， <span class="keyword">BEGIN</span> <span class="keyword">END</span>中或 <span class="keyword">BEGIN</span> <span class="keyword">END</span>的外面可以作为独立的语句去使用，只能放在 <span class="keyword">BEGIN</span> <span class="keyword">END</span>中.</span><br><span class="line"><span class="number">2.</span>如果 <span class="keyword">WHEN</span> 中的值满足或条件成立，则执行对应的 <span class="keyword">THEN</span> 后面的语句，并且结束 <span class="keyword">CASE</span> 如果都不满足，则执行 <span class="keyword">ELSE</span> 中的语句或值</span><br><span class="line"><span class="number">3.</span><span class="keyword">ELSE</span> 可以省略，如果 <span class="keyword">ELSE</span> 省略了，并且所有 <span class="keyword">WHEN</span> 条件都不满足，则返回 <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure>

<h4 id="1-3-if-结构"><a href="#1-3-if-结构" class="headerlink" title="1.3 if 结构"></a>1.3 if 结构</h4><p>功能：实现多重分支</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">if 条件<span class="number">1</span> <span class="keyword">then</span> 语句<span class="number">1</span>;</span><br><span class="line">elseif 条件<span class="number">1</span> <span class="keyword">then</span> 语句<span class="number">1</span>;</span><br><span class="line">elseif 条件<span class="number">1</span> <span class="keyword">then</span> 语句<span class="number">1</span>;</span><br><span class="line">······</span><br><span class="line"><span class="keyword">else</span> 语句n;</span><br><span class="line"><span class="keyword">end</span> if;</span><br></pre></td></tr></table></figure>

<p>应用在begin end中</p>
<h3 id="2-循环控制"><a href="#2-循环控制" class="headerlink" title="2.循环控制"></a>2.循环控制</h3><p>循环有三个：while ,loop, repeat</p>
<p>iterate类似于continue，继续，结束本次循环，继续下一次</p>
<p>leave类似于break，跳出,结束当前所在的循环</p>
<h4 id="2-1-while-语法"><a href="#2-1-while-语法" class="headerlink" title="2.1 while 语法"></a>2.1 while 语法</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[标签:] while 循环条件 do</span><br><span class="line">	循环体;</span><br><span class="line"><span class="keyword">end</span> while [标签];</span><br></pre></td></tr></table></figure>

<h4 id="2-2-loop-语法"><a href="#2-2-loop-语法" class="headerlink" title="2.2 loop 语法"></a>2.2 loop 语法</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[标签:] loop </span><br><span class="line">	循环体;</span><br><span class="line"><span class="keyword">end</span> loop [标签];</span><br><span class="line"><span class="comment">-- 可以用来模拟简单的死循环</span></span><br></pre></td></tr></table></figure>

<h4 id="2-3-repeat-语法"><a href="#2-3-repeat-语法" class="headerlink" title="2.3 repeat 语法"></a>2.3 repeat 语法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[标签:] repeat</span><br><span class="line">	循环体;</span><br><span class="line">until 结束循环条件</span><br><span class="line">end repeat [标签];</span><br></pre></td></tr></table></figure>

<h3 id="3-举例"><a href="#3-举例" class="headerlink" title="3. 举例"></a>3. 举例</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> ddd2 ( <span class="keyword">IN</span> number <span class="type">INT</span> ) <span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">DECLARE</span></span><br><span class="line">		i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">DECLARE</span></span><br><span class="line">		max_insert_num <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">5</span>;</span><br><span class="line">	a :</span><br><span class="line">	WHILE</span><br><span class="line">			number <span class="operator">&gt;=</span> i DO</span><br><span class="line">			<span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">		<span class="comment">-- 判断是否是偶数</span></span><br><span class="line">		IF</span><br><span class="line">			i <span class="operator">%</span> <span class="number">2</span> <span class="operator">=</span> <span class="number">1</span> <span class="keyword">THEN</span></span><br><span class="line">				ITERATE a;</span><br><span class="line">		<span class="keyword">END</span> IF;</span><br><span class="line">		<span class="comment">-- 插入数据</span></span><br><span class="line">		<span class="keyword">INSERT</span> <span class="keyword">INTO</span> admin ( username, `password` )</span><br><span class="line">		<span class="keyword">VALUES</span></span><br><span class="line">			( concat( <span class="string">&#x27;LI&#x27;</span>, i ), <span class="string">&#x27;22222&#x27;</span> );</span><br><span class="line">		</span><br><span class="line">	<span class="keyword">END</span> WHILE a;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">END</span> $ <span class="keyword">CALL</span> ddd2 (</span><br><span class="line"><span class="number">10</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>MySQL</tag>
        <tag>分支结构</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL:存储过程和函数</title>
    <url>/posts/60511917/</url>
    <content><![CDATA[<p>学习笔记：介绍MySQL中存储过程和函数的基本使用。</p>
<span id="more"></span>

<p>存储过程和函数:类似于java中的方法好处:<br>1、提高代码的重用性<br>2、简化操作</p>
<h2 id="1-存储过程"><a href="#1-存储过程" class="headerlink" title="1.存储过程"></a>1.存储过程</h2><p>含义:一组预先编译好的sql语句的集合，理解成批处理语句<br>1、提高代码的重用性<br>2、简化操作<br>3、减少了编译次数并且减少了和数据库服务器的连接次数，提高了效率</p>
<h3 id="1-1-创建和调用语法"><a href="#1-1-创建和调用语法" class="headerlink" title="1.1 创建和调用语法"></a>1.1 创建和调用语法</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建语法</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> 存储过程名(参数列表)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	存储过程体（一组合法的<span class="keyword">SQL</span>语句）</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 调用语法</span></span><br><span class="line"><span class="keyword">call</span> 存储过程名(实参列表)</span><br></pre></td></tr></table></figure>

<h4 id="1-1-1-注意"><a href="#1-1-1-注意" class="headerlink" title="1.1.1 注意"></a>1.1.1 注意</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>参数列表包含三部分：参数模式、参数名、参数类型</span><br><span class="line">    例子：<span class="keyword">IN</span> stuname <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">    参数模式有：</span><br><span class="line">    <span class="keyword">IN</span>:该参数可以作O为输入，也就是该参数需要调用方传入值</span><br><span class="line">    <span class="keyword">OUT</span>:该参数可以作为输出，也就是该参数可以作为返回值</span><br><span class="line">	<span class="keyword">INOUT</span>:该参数既可以作为输入又可以作为输出，也就是该参数既需要传入值，又可以返回值</span><br><span class="line"><span class="number">2.</span>如果存储过程体仅仅只有一句话，<span class="keyword">BEGIN</span> <span class="keyword">END</span>可以省略</span><br><span class="line"><span class="number">3.</span>存储过程体中的每条<span class="keyword">SQL</span>语句的结尾要求必须加分号。</span><br><span class="line"><span class="number">4.</span>存储过程的结尾可以使用DELIMITER 重新设置</span><br><span class="line"><span class="comment">-- 语法:</span></span><br><span class="line">DELIMITER 结束标记</span><br><span class="line"><span class="comment">-- 例子：</span></span><br><span class="line">DELIMITER $</span><br></pre></td></tr></table></figure>


<h3 id="1-2举例"><a href="#1-2举例" class="headerlink" title="1.2举例"></a>1.2举例</h3><h4 id="1-2-1-空参列表"><a href="#1-2-1-空参列表" class="headerlink" title="1.2.1 空参列表"></a>1.2.1 空参列表</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建</span></span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> myp1 () <span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">INSERT</span> <span class="keyword">INTO</span> admin ( `username`, `password` )</span><br><span class="line">	<span class="keyword">VALUES</span></span><br><span class="line">		( <span class="string">&#x27;tom&#x27;</span>, <span class="string">&#x27;1&#x27;</span> ),</span><br><span class="line">		( <span class="string">&#x27;rose&#x27;</span>, <span class="string">&#x27;1&#x27;</span> ),</span><br><span class="line">		( <span class="string">&#x27;jack&#x27;</span>, <span class="string">&#x27;1&#x27;</span> ),</span><br><span class="line">		( <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;1&#x27;</span> ),</span><br><span class="line">		( <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;1&#x27;</span> );</span><br><span class="line"><span class="keyword">END</span> $</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 调用</span></span><br><span class="line"><span class="keyword">CALL</span> myp1 () ;</span><br></pre></td></tr></table></figure>

<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># 调用   <span class="built_in">cmd</span>使用需要结束符</span><br><span class="line"><span class="keyword">CALL</span> myp1 () $</span><br></pre></td></tr></table></figure>

<h4 id="1-2-2-带IN模式列表"><a href="#1-2-2-带IN模式列表" class="headerlink" title="1.2.2 带IN模式列表"></a>1.2.2 带IN模式列表</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> myp2 ( <span class="keyword">IN</span> girlname <span class="type">VARCHAR</span> ( <span class="number">50</span> ), <span class="keyword">OUT</span> boyname <span class="type">VARCHAR</span> ( <span class="number">20</span> ), <span class="keyword">OUT</span> userCP <span class="type">INT</span> )</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">SELECT</span></span><br><span class="line">		boys.boyName,</span><br><span class="line">		boys.userCP <span class="keyword">INTO</span> boyname,</span><br><span class="line">		userCP </span><br><span class="line">	<span class="keyword">FROM</span></span><br><span class="line">		boys</span><br><span class="line">		<span class="keyword">JOIN</span> beauty <span class="keyword">ON</span> beauty.boyfriend_id <span class="operator">=</span> boys.id </span><br><span class="line">	<span class="keyword">WHERE</span></span><br><span class="line">		beauty.NAME <span class="operator">=</span> girlname;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">END</span> $ </span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@boyname</span> <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@userCP</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">CALL</span> myp2 ( <span class="string">&#x27;小昭&#x27;</span>, <span class="variable">@boyname</span>, <span class="variable">@userCP</span> );</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	<span class="variable">@boyname</span>,</span><br><span class="line">	<span class="variable">@userCP</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="1-2-3-带OUT模式列表"><a href="#1-2-3-带OUT模式列表" class="headerlink" title="1.2.3 带OUT模式列表"></a>1.2.3 带OUT模式列表</h4><h4 id="1-2-4-带INOUT模式列表"><a href="#1-2-4-带INOUT模式列表" class="headerlink" title="1.2.4 带INOUT模式列表"></a>1.2.4 带INOUT模式列表</h4><h2 id="2-函数"><a href="#2-函数" class="headerlink" title="2 函数"></a>2 函数</h2><h3 id="2-1-含义"><a href="#2-1-含义" class="headerlink" title="2.1 含义"></a>2.1 含义</h3><p>一组预先编译好的sQz语句的集合，理解成批处理语句</p>
<ul>
<li>1、提高代码的重用性</li>
<li>2、简化操作</li>
<li>3、减少了编译次数并且减少了和数据库服务器的连接次数，提高了效率<br>区别:<br>存储过程:可以有0个返回，也可以有多个返回，适合做批量插入、批量更新<br>函数:有且仅有1个返回，适合做处理数据后返回一个结果</li>
</ul>
<h3 id="2-2-创建函数"><a href="#2-2-创建函数" class="headerlink" title="2.2 创建函数"></a>2.2 创建函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 如果报错1418，在最前面添加 </span></span><br><span class="line"><span class="comment">-- 	select @@global.log_bin_trust_function_creators = 1 ;</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> 函数名(参数列表) <span class="keyword">returns</span> 返回类型</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	函数体</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="comment">-- 注意</span></span><br><span class="line"><span class="comment">-- 参数列表包含：参数名 参数类型</span></span><br><span class="line"><span class="comment">-- 函数体：肯定会有return 语句，如果没有会报错，但如果return不放在最后，也不会报错</span></span><br><span class="line"><span class="comment">-- 只有一句话可以省略begin end</span></span><br><span class="line"><span class="comment">-- 使用delimiter 语句设置结束标记</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-3调用函数"><a href="#2-3调用函数" class="headerlink" title="2.3调用函数"></a>2.3调用函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 函数名(参数列表)</span><br></pre></td></tr></table></figure>

<h3 id="2-4查看函数"><a href="#2-4查看函数" class="headerlink" title="2.4查看函数"></a>2.4查看函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show create function 函数名;</span><br></pre></td></tr></table></figure>

<h3 id="2-5删除函数"><a href="#2-5删除函数" class="headerlink" title="2.5删除函数"></a>2.5删除函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop function 函数名;</span><br></pre></td></tr></table></figure>

<h3 id="2-6-举例"><a href="#2-6-举例" class="headerlink" title="2.6 举例"></a>2.6 举例</h3><h4 id="2-6-1-无参有返回值"><a href="#2-6-1-无参有返回值" class="headerlink" title="2.6.1 无参有返回值"></a>2.6.1 无参有返回值</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> fv1 () <span class="keyword">RETURNS</span> <span class="type">INT</span> <span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">DECLARE</span></span><br><span class="line">		a <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">SELECT</span></span><br><span class="line">		<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">into</span> a </span><br><span class="line">	<span class="keyword">FROM</span></span><br><span class="line">		employees;</span><br><span class="line">	<span class="keyword">RETURN</span> a;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> fv1()$</span><br></pre></td></tr></table></figure>

<h4 id="2-6-2-有参有返回值"><a href="#2-6-2-有参有返回值" class="headerlink" title="2.6.2 有参有返回值"></a>2.6.2 有参有返回值</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> fv3 (</span><br><span class="line">	deptName <span class="type">VARCHAR</span> ( <span class="number">20</span> )) <span class="keyword">RETURNS</span> <span class="keyword">DOUBLE</span> </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">DECLARE</span></span><br><span class="line">		agv <span class="keyword">DOUBLE</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">SELECT</span></span><br><span class="line">		<span class="built_in">AVG</span>( salary ) <span class="keyword">INTO</span> agv </span><br><span class="line">	<span class="keyword">FROM</span></span><br><span class="line">		employees e</span><br><span class="line">		<span class="keyword">JOIN</span> departments d <span class="keyword">ON</span> d.department_id <span class="operator">=</span> e.department_id </span><br><span class="line">	<span class="keyword">WHERE</span></span><br><span class="line">		d.department_name <span class="operator">=</span> deptName </span><br><span class="line">	<span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">		e.department_id;</span><br><span class="line">	<span class="keyword">RETURN</span> agv;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	fv3 ( <span class="string">&#x27;Adm&#x27;</span> )$</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>MySQL:变量定义</title>
    <url>/posts/a82b342a/</url>
    <content><![CDATA[<p>学习笔记：介绍MySQL中变量的定义和使用。</p>
<span id="more"></span>

<pre><code>系统变量:
    全局变量
        作用域:服务器每次启动将为所有的全局变量赋初始值，针对于所有的会话（连接）有效，但不能跨重启；如果要保证重启不变，则需要修改配置文件；
    会话变量
        作用域：仅仅针对当前连接有效
自定义变量:
    用户变量
    局部变量
</code></pre>
<h3 id="1-系统变量"><a href="#1-系统变量" class="headerlink" title="1.系统变量"></a>1.系统变量</h3><h4 id="1-1-系统变量定义"><a href="#1-1-系统变量定义" class="headerlink" title="1.1 系统变量定义"></a>1.1 系统变量定义</h4><pre><code>说明:变量由系统提供，不是用户定义，属于服务器层面使用的语法；
查看全局变量需要关键字 global ，查看会话变量需要关键字 session 或者不写。
</code></pre>
<h4 id="1-2-查看"><a href="#1-2-查看" class="headerlink" title="1.2 查看"></a>1.2 查看</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1.查看所有系统变量</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> VARIABLES;  <span class="comment">-- 查看所有全局变量</span></span><br><span class="line"><span class="keyword">SHOW</span> [SESSION] VARIABLES; <span class="comment">-- 查看所有会话变量</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 2.查看满足条件的部分系统变量</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span><span class="operator">|</span>SESSION VARIABLES <span class="keyword">like</span> <span class="string">&#x27;%char%&#x27;</span>; <span class="comment">--查看字符相关的变量</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 3.查看指定的某个系统变量的值</span></span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@global</span>.系统变量名; <span class="comment">-- 查看全局变量的</span></span><br><span class="line"><span class="keyword">select</span> @@系统变量名; <span class="comment">-- 查看会话变量</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 4.为某个系统变量赋值</span><br><span class="line">set global 系统变量名 = 值;  -- 方式一</span><br><span class="line">set [session] 系统变量名 = 值;  -- 方式一</span><br><span class="line">set @@global.系统变量名 = 值;  -- 方式二</span><br><span class="line">set @@session.系统变量名 = 值;  -- 方式二</span><br></pre></td></tr></table></figure>
<h3 id="2-自定义变量"><a href="#2-自定义变量" class="headerlink" title="2.自定义变量"></a>2.自定义变量</h3><p>说明:变量是用户自定义的，不是由系统定义的<br>使用步骤:声明、赋值、使用(查看、比较、运算等)</p>
<h4 id="2-1-用户变量"><a href="#2-1-用户变量" class="headerlink" title="2.1 用户变量"></a>2.1 用户变量</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 作用域:针对于当前会话(连接)有效，同于会话变量的作用域</span><br><span class="line">-- 1.声明并初始化</span><br><span class="line">set @用户变量名 = 值；      -- 方式一</span><br><span class="line">set @用户变量名 := 值；     -- 方式二</span><br><span class="line">select @用户变量名 := 值；  -- 方式三</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 2.赋值</span><br><span class="line">-- 通过set和select</span><br><span class="line">set @用户变量名 = 值；      -- 方式一</span><br><span class="line">set @用户变量名 := 值；     -- 方式二</span><br><span class="line">select @用户变量名 := 值；  -- 方式三</span><br><span class="line">-- 通过select into</span><br><span class="line">select 字段名 into 变量名 from 表；</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 3.使用</span></span><br><span class="line"><span class="keyword">select</span> @变量名   <span class="comment">-- 查看</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 例子</span></span><br><span class="line"><span class="keyword">set</span> <span class="variable">@count</span> <span class="operator">=</span> <span class="number">1</span>;  <span class="comment">-- 声明并初始化</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">into</span> <span class="variable">@count</span> <span class="keyword">from</span> employees;  <span class="comment">-- 赋值</span></span><br><span class="line"><span class="keyword">select</span> <span class="variable">@count</span>;  <span class="comment">-- 查看</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-局部变量"><a href="#2-2-局部变量" class="headerlink" title="2.2 局部变量"></a>2.2 局部变量</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 作用域：仅仅在定义它的begin end中有效，应用在begin end中的第一句话！！！</span></span><br><span class="line"><span class="comment">-- 1.声明</span></span><br><span class="line"><span class="keyword">DECLARE</span> 变量名 类型;</span><br><span class="line"><span class="keyword">DECLARE</span> 变量名 类型 <span class="keyword">DEFAULT</span> 值;</span><br><span class="line"><span class="comment">-- 2.赋值</span></span><br><span class="line"><span class="comment">-- 方式一:通过SET或SELECT</span></span><br><span class="line"><span class="keyword">SET</span> 局部变量名 <span class="operator">=</span> 值;</span><br><span class="line"><span class="keyword">SET</span> 局部变量名 :<span class="operator">=</span> 值;</span><br><span class="line"><span class="keyword">SELECT</span>@局部变量名:<span class="operator">=</span>值;</span><br><span class="line"><span class="comment">-- 方式二:通过SELECT INTO</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段 <span class="keyword">INTO</span> 局部变量名 <span class="keyword">FROM</span> 表;</span><br><span class="line"><span class="comment">-- 3.使用</span></span><br><span class="line"><span class="keyword">SELECT</span> 局部变量名;</span><br></pre></td></tr></table></figure>
<h4 id="2-3对比用户变量和局部变量"><a href="#2-3对比用户变量和局部变量" class="headerlink" title="2.3对比用户变量和局部变量:"></a>2.3对比用户变量和局部变量:</h4><table>
<thead>
<tr>
<th align="center"></th>
<th align="center">用户变量</th>
<th align="center">局部变量</th>
</tr>
</thead>
<tbody><tr>
<td align="center">作用域</td>
<td align="center">当前会话</td>
<td align="center">BEGIN END中</td>
</tr>
<tr>
<td align="center">定义和使用的位置</td>
<td align="center">会话中的任何地方</td>
<td align="center">只能在BEGIN END中，且为第一句话</td>
</tr>
<tr>
<td align="center">语法</td>
<td align="center">必须加@符号，不用限定类型</td>
<td align="center">一般不用加@符号，需要限定类型</td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title>MySQL:view(视图)</title>
    <url>/posts/e03471c6/</url>
    <content><![CDATA[<p>学习笔记：介绍MySQL中视图的基本使用。</p>
<span id="more"></span>

<h3 id="1-含义"><a href="#1-含义" class="headerlink" title="1.含义"></a>1.含义</h3><ul>
<li>mysql 15.1版本出现</li>
<li>虚拟表，和普通表一样使用，是通过表动态生成的数据。</li>
<li>只有sql的逻辑，没有具体数据。</li>
</ul>
<h3 id="2-应用场景"><a href="#2-应用场景" class="headerlink" title="2.应用场景"></a>2.应用场景</h3><ul>
<li>多个地方用到的查询结果</li>
<li>该查询结果使用的sql语句较复杂</li>
</ul>
<h3 id="3-优点"><a href="#3-优点" class="headerlink" title="3.优点"></a>3.优点</h3><ul>
<li>重用sql语句</li>
<li>简化复杂的sql操作，不必知道它的查询细节</li>
<li>保护数据，提高安全性</li>
</ul>
<h3 id="4-视图结构的修改语法"><a href="#4-视图结构的修改语法" class="headerlink" title="4.视图结构的修改语法"></a>4.视图结构的修改语法</h3><h4 id="4-1视图的创建"><a href="#4-1视图的创建" class="headerlink" title="4.1视图的创建"></a>4.1视图的创建</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> 视图名</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">查询语句;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> q1</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> e.last_name ,d.department_name,j.job_title</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> jobs j</span><br><span class="line"><span class="keyword">ON</span> j.job_id <span class="operator">=</span> e.job_id;</span><br></pre></td></tr></table></figure>
<h4 id="4-2视图的修改"><a href="#4-2视图的修改" class="headerlink" title="4.2视图的修改"></a>4.2视图的修改</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法一：</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> 视图名</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">查询语句;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 语法二：</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">VIEW</span> 视图名</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">查询语句;</span><br></pre></td></tr></table></figure>
<h4 id="4-3视图的删除"><a href="#4-3视图的删除" class="headerlink" title="4.3视图的删除"></a>4.3视图的删除</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> 视图名,视图名,……;</span><br></pre></td></tr></table></figure>

<h4 id="4-4视图的查看"><a href="#4-4视图的查看" class="headerlink" title="4.4视图的查看"></a>4.4视图的查看</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DESC</span> q1; <span class="comment">-- 查看结构</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> q1;<span class="comment">--查看具体细节</span></span><br></pre></td></tr></table></figure>
<h3 id="5-视图数据的更新语法"><a href="#5-视图数据的更新语法" class="headerlink" title="5.视图数据的更新语法"></a>5.视图数据的更新语法</h3><h4 id="5-1插入"><a href="#5-1插入" class="headerlink" title="5.1插入"></a>5.1插入</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into 视图名 values (属性1，属性2，属性3，……);</span><br></pre></td></tr></table></figure>
<h4 id="5-2修改"><a href="#5-2修改" class="headerlink" title="5.2修改"></a>5.2修改</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into 视图名 values (属性1，属性2，属性3，……);</span><br></pre></td></tr></table></figure>

<p>视图的可更新性和视图中查询的定义有关系，以下类型的视图是不能更新的。</p>
<ul>
<li>包含以下关键字的sql语句:分组函数、distinct、group by、 having、union或者union all</li>
<li>常量视图</li>
<li>Select中包含子查询join</li>
<li>from一个不能更新的视图</li>
<li>where子句的子查询引用了from子句中的表</li>
</ul>
<h3 id="6-视图和表的异同"><a href="#6-视图和表的异同" class="headerlink" title="6.视图和表的异同"></a>6.视图和表的异同</h3><p>视图可以当做表进行查询，但不能修改原表数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法：可以当成表一样使用</span></span><br><span class="line"><span class="keyword">SELECT</span> 查询列表</span><br><span class="line"><span class="keyword">FROM</span> 视图名</span><br><span class="line"><span class="keyword">WHERE</span> 筛选条件</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 分组列表</span><br><span class="line"><span class="keyword">HAVING</span> 筛选条件</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 排序</span><br><span class="line">LIMIT 起始索引 条目数;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">创建语法的关键字</th>
<th align="center">是否实际占用物理空间</th>
<th align="center">使用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">视图</td>
<td align="center">create view</td>
<td align="center">只是保存了sql逻辑</td>
<td align="center">可以但一般不能增删改查</td>
</tr>
<tr>
<td align="center">表</td>
<td align="center">create table</td>
<td align="center">保存了数据</td>
<td align="center">增删改查</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>MySQL</tag>
        <tag>视图</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL:TCL（事务控制语言）</title>
    <url>/posts/3112a4fe/</url>
    <content><![CDATA[<p>学习笔记：介绍MySQL中事务的基本使用。</p>
<span id="more"></span>

<h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>​    事务：<br>​        事务由单独单元的一个或多个sQL语句组成，在这个单元中﹐每个MySQL语句是相互侬赖的。而整个单独单元作为一个不可分割的整体﹐如果单元中某条SQL语句一旦执行失败或产生错误，整个单元将会回滚。所有受到影响的数据将返回到事物开始以前的状态;如果单元中的所有sQL语句均执行成功﹐则事物被顺利执行。<br>​    存储引擎：<br>​        1、概念:在mysql中的数据用各种不同的技术存储在文件（或内存）中。<br>​        2、通过show engines;来查看mysql支持的存储引擎。<br>​        3、在mysql中用的最多的存储引擎有: innodb,myisam,memory等。<br>​            其中innodb支持事务，而myisam、memory等不支持事务       </p>
<h3 id="2-ACID属性"><a href="#2-ACID属性" class="headerlink" title="2.ACID属性"></a>2.ACID属性</h3><p>​    1.原子性（Atomicity)<br>​        原子性是指事务是一个个可刀P一lr十都发生，要么都不发生。<br>​    2.一致性（Consistency)<br>​        事务必须使数据库从一个一致性状态变换到另外一个一致性状态<br>​    3.隔离性(Isolation)<br>​        事务的隔离性是指一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相千扰。<br>​    4.持久性（Durability)<br>​        持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响</p>
<h3 id="3-事务的创建"><a href="#3-事务的创建" class="headerlink" title="3.事务的创建"></a>3.事务的创建</h3><p>​    隐式事务:事务没有明显的开启和结束的标记比如insert、 update、 delete语句<br>​    显式事务:事务具有明显的开启和结束的标记前提:必须先设置自动提交功能为禁用<br>​    </p>
<pre><code>设置自动提交功能关闭 set autocommit = 0;
步骤:
    1.开始事务
    set autocommit = 0;
    start transaction;（可选的）
    2.编写事务中sql语句(select insert update delete)
    执行语句一;
    执行语句二;
    ……;
    3.结束事务(此时事务处理完成，储存在内存中)
    commit;提交事务（更新到磁盘）
    rollback;回滚事务（撤销事务的指令）
</code></pre>
<h3 id="4-事务的使用步骤"><a href="#4-事务的使用步骤" class="headerlink" title="4.事务的使用步骤"></a>4.事务的使用步骤</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    id  username   balance  </span></span><br><span class="line"><span class="comment">------  ---------  ---------</span></span><br><span class="line"><span class="comment">     1  张无忌              1000</span></span><br><span class="line"><span class="comment">     2  赵敏              1000</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">-- 1.开始事务</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="comment">-- 2.编写事务</span></span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">SET</span> balance <span class="operator">=</span> <span class="number">500</span> <span class="keyword">WHERE</span> username <span class="operator">=</span> <span class="string">&#x27;张无忌&#x27;</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">SET</span> balance <span class="operator">=</span> <span class="number">1500</span> <span class="keyword">WHERE</span> username <span class="operator">=</span> <span class="string">&#x27;赵敏&#x27;</span>;</span><br><span class="line"><span class="comment">-- 3.结束事务</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure>

<h5 id="delete和truncate在事务使用时的区别"><a href="#delete和truncate在事务使用时的区别" class="headerlink" title="delete和truncate在事务使用时的区别"></a>delete和truncate在事务使用时的区别</h5><p>delete支持回滚，truncate不支持回滚</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 使用delete 删除表格</span></span><br><span class="line"><span class="keyword">set</span> autocommit <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表<span class="number">1</span>;</span><br><span class="line"><span class="keyword">rollback</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表<span class="number">1</span>; <span class="comment">-- 此时还能查询到表1</span></span><br><span class="line"><span class="comment">-- 使用delete 删除表格</span></span><br><span class="line"><span class="keyword">set</span> autocommit <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> 表<span class="number">1</span>;</span><br><span class="line"><span class="keyword">rollback</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表<span class="number">1</span>; <span class="comment">-- 此时不能查询到表1</span></span><br></pre></td></tr></table></figure>



<h3 id="5-数据的隔离级别"><a href="#5-数据的隔离级别" class="headerlink" title="5.数据的隔离级别"></a>5.数据的隔离级别</h3><h4 id="5-1-并发问题"><a href="#5-1-并发问题" class="headerlink" title="5.1.并发问题"></a>5.1.并发问题</h4><pre><code>对于同时运行的多个事务,当这些事务访问数据库中相同的数据时,如果没有采取必要的隔离机制,就会导致各种并发问题:
脏读:
    对于两个事务T1,T2,
    T1读取了已经被T2更新但还没有被提交的字段之后,
    若T2回滚,T1读取的内容就是临时且无效的。
不可重复读:
    对于两个事务T1,T2,
    T1读取了一个字段,然后T2更新了该字段之后,
    T1再次读取同一个字段,值就不同了。
幻读:
    对于两个事务T1,T2,
    T1从一个表中读取了一个字段,然后T2在该表中插入了一些新的行之后,
    如果T1再次读取同一个表,就会多出几行.
</code></pre>
<h4 id="5-22-隔离级别"><a href="#5-22-隔离级别" class="headerlink" title="5.22.隔离级别"></a>5.22.隔离级别</h4><pre><code>数据库事务的隔离性:
    数据库系统必须具有隔离并发运行各个事务的能力，使它们不会相互影响,避免各种并发问题。
一个事务与其他事务隔离的程度称为隔离级别.数据库规定了多种事务隔离级别,不同隔离级别对应不同的干扰程度,隔离级别越高,数据一致性就越好,但并发性越弱.
</code></pre>
<table>
<thead>
<tr>
<th align="center">隔离级别</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">READ UNCOMMITTED   (读未提交数据)</td>
<td align="center">允许事务读取未被其他事物提交的变更.脏读,不可重复读和幻读的问题都会出现</td>
</tr>
<tr>
<td align="center">READ COMMITED  (读已提交数据)</td>
<td align="center">只允许事务读取已经被其它事务提交的变更.可以避免脏读,但不可重复读和幻读问题仍然可能出现</td>
</tr>
<tr>
<td align="center">REPEATABLE READ    (可重复读)</td>
<td align="center">确保事务可以多次从一个字段中读取相同的值.在这个事务持续期问,禁止其他事物对这个字段进行更新.可以避免脏读和不可重复读.但幻读的问题仍然存在.</td>
</tr>
<tr>
<td align="center">SERIALIZABLE   (串行化)</td>
<td align="center">确保事务可以从一个表中读取相同的行.在这个事务持续期间,禁止其他事务对该表执行插入.更新和删除操作.所有并发问题都可以避免,但性能十分低下</td>
</tr>
</tbody></table>
<pre><code>Oracle支持的2种事务隔离级别:READ COMMITED,SERIALIZABLE。Oracle 默认的事务隔离级洲为:READ COMMITED
Mysql支持4种事务隔离级别.Mysql默认的事务隔离级别为: REPEATABLE READ

通过命令查看当前隔离级别
select @@tx_isolation  （Mysql5）
select @@transaction_isolation  （Mysql8）
设置最低的隔离级别
set session transaction isolation level read uncommitted
</code></pre>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">#数据</span><br><span class="line">select * from account;</span><br><span class="line">+----+-----------+---------+</span><br><span class="line">| id | username  | balance |</span><br><span class="line">+----+-----------+---------+</span><br><span class="line">|  <span class="number">1</span> | 张无忌    |     <span class="number">500</span> |</span><br><span class="line">|  <span class="number">2</span> | 赵敏      |    <span class="number">1500</span> |</span><br><span class="line">+----+-----------+---------+</span><br></pre></td></tr></table></figure>

<p>######2.1隔离级别为READ UNCOMMITTED</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">#窗口一：修改隔离级别，并查看隔离级别</span><br><span class="line">mysql&gt; <span class="built_in">set</span> session transaction isolation level read uncommitted;</span><br><span class="line">mysql&gt; select @@transaction_isolation;</span><br><span class="line">+-------------------------+</span><br><span class="line">| @@transaction_isolation |</span><br><span class="line">+-------------------------+</span><br><span class="line">| READ-UNCOMMITTED        |</span><br><span class="line">+-------------------------+</span><br></pre></td></tr></table></figure>

<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">#窗口二：修改隔离级别，并查看隔离级别和表数据</span><br><span class="line">mysql&gt; <span class="built_in">set</span> session transaction isolation level read uncommitted;</span><br><span class="line">mysql&gt; select @@transaction_isolation;</span><br><span class="line">+-------------------------+</span><br><span class="line">| @@transaction_isolation |</span><br><span class="line">+-------------------------+</span><br><span class="line">| READ-UNCOMMITTED        |</span><br><span class="line">+-------------------------+</span><br><span class="line">mysql&gt; select * from account;</span><br><span class="line">+----+----------+---------+</span><br><span class="line">| id | username | balance |</span><br><span class="line">+----+----------+---------+</span><br><span class="line">|  <span class="number">1</span> | 张无忌   |     <span class="number">500</span> |</span><br><span class="line">|  <span class="number">2</span> | 赵敏     |    <span class="number">1500</span> |</span><br><span class="line">+----+----------+---------+</span><br></pre></td></tr></table></figure>

<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">#窗口一：开启事务，修改数据，但不结束事务</span><br><span class="line">mysql&gt; <span class="built_in">set</span> autocommit = <span class="number">0</span>;</span><br><span class="line">mysql&gt; update account <span class="built_in">set</span> username =  &#x27;张飞&#x27; where id = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">#窗口二：读数数据，</span><br><span class="line">mysql&gt; <span class="built_in">set</span> autocommit = <span class="number">0</span>;</span><br><span class="line">mysql&gt; update account <span class="built_in">set</span> username =  &#x27;张飞&#x27; where id = <span class="number">1</span>;</span><br><span class="line">+----+----------+---------+</span><br><span class="line">| id | username | balance |</span><br><span class="line">+----+----------+---------+</span><br><span class="line">|  <span class="number">1</span> | 张飞     |     <span class="number">500</span> |</span><br><span class="line">|  <span class="number">2</span> | 赵敏     |    <span class="number">1500</span> |</span><br><span class="line">+----+----------+---------+</span><br><span class="line">#数据发生改变，读取了窗口一未提交的数据，产生脏读</span><br></pre></td></tr></table></figure>

<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">#窗口一：结束事务，回滚撤销</span><br><span class="line">mysql&gt; rollback;</span><br></pre></td></tr></table></figure>

<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">#窗口二：重新读取数据，数据变回原来样子</span><br><span class="line">mysql&gt; select * from account;</span><br><span class="line">+----+----------+---------+</span><br><span class="line">| id | username | balance |</span><br><span class="line">+----+----------+---------+</span><br><span class="line">|  <span class="number">1</span> | 张无忌   |     <span class="number">500</span> |</span><br><span class="line">|  <span class="number">2</span> | 赵敏     |    <span class="number">1500</span> |</span><br><span class="line">+----+----------+---------+</span><br><span class="line">#同一事务，查询前后不一致，产生不可重复读</span><br><span class="line">mysql&gt; commit;</span><br></pre></td></tr></table></figure>

<p>######2.2隔离级别为READ COMMITTED</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">#窗口一：修改隔离级别，并查看隔离级别</span><br><span class="line">mysql&gt; <span class="built_in">set</span> session transaction isolation level read committed;</span><br><span class="line">mysql&gt; select @@transaction_isolation;</span><br><span class="line">+-------------------------+</span><br><span class="line">| @@transaction_isolation |</span><br><span class="line">+-------------------------+</span><br><span class="line">| READ-COMMITTED          |</span><br><span class="line">+-------------------------+</span><br></pre></td></tr></table></figure>

<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">#窗口二：修改隔离级别，并查看隔离级别和表数据</span><br><span class="line">mysql&gt; <span class="built_in">set</span> session transaction isolation level read committed;</span><br><span class="line">mysql&gt; select @@transaction_isolation;</span><br><span class="line">+-------------------------+</span><br><span class="line">| @@transaction_isolation |</span><br><span class="line">+-------------------------+</span><br><span class="line">| READ-COMMITTED          |</span><br><span class="line">+-------------------------+</span><br><span class="line">mysql&gt; select * from account;</span><br><span class="line">+----+----------+---------+</span><br><span class="line">| id | username | balance |</span><br><span class="line">+----+----------+---------+</span><br><span class="line">|  <span class="number">1</span> | 张无忌   |     <span class="number">500</span> |</span><br><span class="line">|  <span class="number">2</span> | 赵敏     |    <span class="number">1500</span> |</span><br><span class="line">+----+----------+---------+</span><br></pre></td></tr></table></figure>

<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">#窗口一：开启事务，修改数据，但不结束事务</span><br><span class="line">mysql&gt; <span class="built_in">set</span> autocommit = <span class="number">0</span>;</span><br><span class="line">mysql&gt; update account <span class="built_in">set</span> username =  &#x27;张飞&#x27; where id = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">#窗口二：开启事务，读取数据，数据没有发生改变，没有产生脏读现象</span><br><span class="line">mysql&gt; <span class="built_in">set</span> autocommit = <span class="number">0</span>;</span><br><span class="line">mysql&gt; select * from account;</span><br><span class="line">+----+-----------+---------+</span><br><span class="line">| id | username  | balance |</span><br><span class="line">+----+-----------+---------+</span><br><span class="line">|  <span class="number">1</span> | 张无忌    |     <span class="number">500</span> |</span><br><span class="line">|  <span class="number">2</span> | 赵敏      |    <span class="number">1500</span> |</span><br><span class="line">+----+-----------+---------+</span><br></pre></td></tr></table></figure>

<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">#窗口一：结束事务，提交</span><br><span class="line">mysql&gt; commit;</span><br></pre></td></tr></table></figure>

<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">#窗口二：读取数据，数据发生改变，说明读取了窗口一提交后的数据</span><br><span class="line">mysql&gt; select * from account;</span><br><span class="line">+----+----------+---------+</span><br><span class="line">| id | username | balance |</span><br><span class="line">+----+----------+---------+</span><br><span class="line">|  <span class="number">1</span> | 张飞     |     <span class="number">500</span> |</span><br><span class="line">|  <span class="number">2</span> | 赵敏     |    <span class="number">1500</span> |</span><br><span class="line">+----+----------+---------+</span><br><span class="line">#但同一数据，前后查询现象不一样，产生不可重复读</span><br><span class="line">mysql&gt; commit;</span><br></pre></td></tr></table></figure>

<p>######2.3隔离级别为REPEATABLE READ</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">#窗口一：修改隔离级别，并查看隔离级别</span><br><span class="line">mysql&gt; <span class="built_in">set</span> session transaction isolation level repeatable read;</span><br><span class="line">mysql&gt; select @@transaction_isolation;</span><br><span class="line">+-------------------------+</span><br><span class="line">| @@transaction_isolation |</span><br><span class="line">+-------------------------+</span><br><span class="line">| REPEATABLE-READ         |</span><br><span class="line">+-------------------------+</span><br></pre></td></tr></table></figure>

<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">#窗口二：修改隔离级别，并查看隔离级别和表数据</span><br><span class="line">mysql&gt; <span class="built_in">set</span> session transaction isolation level repeatable read;</span><br><span class="line">mysql&gt; select @@transaction_isolation;</span><br><span class="line">+-------------------------+</span><br><span class="line">| @@transaction_isolation |</span><br><span class="line">+-------------------------+</span><br><span class="line">| REPEATABLE-READ         |</span><br><span class="line">+-------------------------+</span><br><span class="line">mysql&gt; select * from account;</span><br><span class="line">+----+----------+---------+</span><br><span class="line">| id | username | balance |</span><br><span class="line">+----+----------+---------+</span><br><span class="line">|  <span class="number">1</span> | 张飞     |     <span class="number">500</span> |</span><br><span class="line">|  <span class="number">2</span> | 赵敏     |    <span class="number">1500</span> |</span><br><span class="line">+----+----------+---------+</span><br></pre></td></tr></table></figure>

<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">#窗口一：开启事务，修改数据，但不结束事务</span><br><span class="line">mysql&gt; <span class="built_in">set</span> autocommit = <span class="number">0</span>;</span><br><span class="line">mysql&gt; update account <span class="built_in">set</span> username =  &#x27;张飞&#x27; where id = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">#窗口二：开启事务，读取数据，数据没有发生改变，没有产生脏读现象</span><br><span class="line">mysql&gt; <span class="built_in">set</span> autocommit = <span class="number">0</span>;</span><br><span class="line">mysql&gt; select * from account;</span><br><span class="line">+----+-----------+---------+</span><br><span class="line">| id | username  | balance |</span><br><span class="line">+----+-----------+---------+</span><br><span class="line">|  <span class="number">1</span> | 张无忌    |     <span class="number">500</span> |</span><br><span class="line">|  <span class="number">2</span> | 赵敏      |    <span class="number">1500</span> |</span><br><span class="line">+----+-----------+---------+</span><br></pre></td></tr></table></figure>

<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">#窗口一：结束事务，提交</span><br><span class="line">mysql&gt; commit;</span><br></pre></td></tr></table></figure>

<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">#窗口二：读取数据，数据仍然没发生改变</span><br><span class="line">mysql&gt; select * from account;</span><br><span class="line">+----+----------+---------+</span><br><span class="line">| id | username | balance |</span><br><span class="line">+----+----------+---------+</span><br><span class="line">|  <span class="number">1</span> | 张飞     |     <span class="number">500</span> |</span><br><span class="line">|  <span class="number">2</span> | 赵敏     |    <span class="number">1500</span> |</span><br><span class="line">+----+----------+---------+</span><br><span class="line">#同一事务，没有脏读，可重复读</span><br><span class="line"></span><br><span class="line">#新开一个事务，更新数据</span><br><span class="line">mysql&gt; commit;</span><br><span class="line">mysql&gt; select * from account;</span><br><span class="line">+----+-----------+---------+</span><br><span class="line">| id | username  | balance |</span><br><span class="line">+----+-----------+---------+</span><br><span class="line">|  <span class="number">1</span> | 张无忌    |     <span class="number">500</span> |</span><br><span class="line">|  <span class="number">2</span> | 赵敏      |    <span class="number">1500</span> |</span><br><span class="line">+----+-----------+---------+</span><br><span class="line">mysql&gt; commit;</span><br></pre></td></tr></table></figure>

<p>######2.4产生幻读</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">#窗口一：修改隔离级别，并查看隔离级别</span><br><span class="line">mysql&gt; <span class="built_in">set</span> session transaction isolation level repeatable read;</span><br><span class="line">mysql&gt; select @@transaction_isolation;</span><br><span class="line">+-------------------------+</span><br><span class="line">| @@transaction_isolation |</span><br><span class="line">+-------------------------+</span><br><span class="line">| REPEATABLE-READ         |</span><br><span class="line">+-------------------------+</span><br><span class="line">mysql&gt; <span class="built_in">set</span> autocommit = <span class="number">0</span>;</span><br><span class="line">mysql&gt; select * from account;</span><br><span class="line">+----+----------+---------+</span><br><span class="line">| id | username | balance |</span><br><span class="line">+----+----------+---------+</span><br><span class="line">|  <span class="number">1</span> | 张无忌   |     <span class="number">500</span> |</span><br><span class="line">|  <span class="number">2</span> | 赵敏     |    <span class="number">1500</span> |</span><br><span class="line">+----+----------+---------+</span><br></pre></td></tr></table></figure>

<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">#窗口二：修改隔离级别，并查看隔离级别和表数据</span><br><span class="line">mysql&gt; <span class="built_in">set</span> session transaction isolation level repeatable read;</span><br><span class="line">mysql&gt; select @@transaction_isolation;</span><br><span class="line">+-------------------------+</span><br><span class="line">| @@transaction_isolation |</span><br><span class="line">+-------------------------+</span><br><span class="line">| REPEATABLE-READ         |</span><br><span class="line">+-------------------------+</span><br><span class="line">mysql&gt; select * from account;</span><br><span class="line">+----+----------+---------+</span><br><span class="line">| id | username | balance |</span><br><span class="line">+----+----------+---------+</span><br><span class="line">|  <span class="number">1</span> | 张无忌   |     <span class="number">500</span> |</span><br><span class="line">|  <span class="number">2</span> | 赵敏     |    <span class="number">1500</span> |</span><br><span class="line">+----+----------+---------+</span><br></pre></td></tr></table></figure>

<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">#窗口一：开启事务</span><br><span class="line">mysql&gt; <span class="built_in">set</span> autocommit = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">#窗口二：开启事务，增加数据，</span><br><span class="line">mysql&gt; <span class="built_in">set</span> autocommit = <span class="number">0</span>;</span><br><span class="line">mysql&gt; insert into account values(<span class="number">3</span>,&#x27;小昭&#x27;,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">#窗口一：修改数据，但不结束事务</span><br><span class="line">mysql&gt; update account <span class="built_in">set</span> balance =  <span class="number">1000</span>;</span><br><span class="line">#理论上修改两行数据</span><br><span class="line">mysql&gt; select * from account;</span><br><span class="line">+----+-----------+---------+</span><br><span class="line">| id | username  | balance |</span><br><span class="line">+----+-----------+---------+</span><br><span class="line">|  <span class="number">1</span> | 张无忌    |    <span class="number">1000</span> |</span><br><span class="line">|  <span class="number">2</span> | 赵敏      |    <span class="number">1000</span> |</span><br><span class="line">+----+-----------+---------+</span><br></pre></td></tr></table></figure>

<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">#窗口二：结束事务</span><br><span class="line">mysql&gt; commit;</span><br></pre></td></tr></table></figure>

<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">#窗口一：修改了三行数据</span><br><span class="line">mysql&gt; select * from account;</span><br><span class="line">+----+-----------+---------+</span><br><span class="line">| id | username  | balance |</span><br><span class="line">+----+-----------+---------+</span><br><span class="line">|  <span class="number">1</span> | 张无忌    |    <span class="number">1000</span> |</span><br><span class="line">|  <span class="number">2</span> | 赵敏      |    <span class="number">1000</span> |</span><br><span class="line">|  <span class="number">3</span> | 小昭      |    <span class="number">1000</span> |</span><br><span class="line">+----+-----------+---------+</span><br><span class="line">#产生幻读</span><br><span class="line">mysql&gt; commit;</span><br></pre></td></tr></table></figure>

<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">#窗口二：读取数据，数据仍然没发生改变</span><br><span class="line">mysql&gt; select * from account;</span><br><span class="line">+----+----------+---------+</span><br><span class="line">| id | username | balance |</span><br><span class="line">+----+----------+---------+</span><br><span class="line">|  <span class="number">1</span> | 张飞     |     <span class="number">500</span> |</span><br><span class="line">|  <span class="number">2</span> | 赵敏     |    <span class="number">1500</span> |</span><br><span class="line">+----+----------+---------+</span><br><span class="line">#同一事务，没有脏读，可重复读</span><br><span class="line"></span><br><span class="line">#新开一个事务，更新数据</span><br><span class="line">mysql&gt; commit;</span><br><span class="line">mysql&gt; select * from account;</span><br><span class="line">+----+-----------+---------+</span><br><span class="line">| id | username  | balance |</span><br><span class="line">+----+-----------+---------+</span><br><span class="line">|  <span class="number">1</span> | 张无忌    |     <span class="number">500</span> |</span><br><span class="line">|  <span class="number">2</span> | 赵敏      |    <span class="number">1500</span> |</span><br><span class="line">+----+-----------+---------+</span><br><span class="line">mysql&gt; commit;</span><br></pre></td></tr></table></figure>


<p>######2.5隔离级别为SERIALIZABLE<br>    将其他事务处于阻塞状态，且有限时间等待，效率较低</p>
<pre><code>每启动一个mysql程序,就会获得一个单独的数据库连接.
每个数据库连接都有一个全局变量@@tx_isolation (@@transaction_isolation), 表示当前的事务隔离级别.
查看当前的隔离级别: SELECT @@tx_isolation(@@transaction_isolation); 设置当前mysQL连接的隔离级别:
set transaction isolation level read committed;
设置薮据库系统的全局的隔离级别:
set global transaction isolation level read committed;
</code></pre>
<p>#####3.保存点（savepoint)<br>    格式：<br>        savepoint 节点名;</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> account <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">SAVEPOINT</span> a; #设置保存点</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> account <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> a;#回滚到保存点</span><br></pre></td></tr></table></figure>


<p>####3.视图<br>    MySQL从5.0.1版本开始提供视图功能。一种虚拟存在的表，行和列的数据来自定义视图的查询中使用的表，并且是在使用视图时动态生成的，只保存了sql逻辑，不保存查询结果<br>    应用场景:<br>        多个地方用到同样的查询结果<br>        该查询结果使用的sql语句较复杂<br>#####3.1视图的创建</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> 视图名</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">查询语句;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> q1</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> e.last_name ,d.department_name,j.job_title</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> jobs j</span><br><span class="line"><span class="keyword">ON</span> j.job_id <span class="operator">=</span> e.job_id;</span><br></pre></td></tr></table></figure>

<p>#####3.2视图的使用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法：可以当成表一样使用</span></span><br><span class="line"><span class="keyword">SELECT</span> 查询列表</span><br><span class="line"><span class="keyword">FROM</span> 视图名</span><br><span class="line"><span class="keyword">WHERE</span> 筛选条件</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 分组列表</span><br><span class="line"><span class="keyword">HAVING</span> 筛选条件</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 排序</span><br><span class="line">LIMIT 起始索引 条目数;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> q1</span><br><span class="line"><span class="keyword">WHERE</span> e.email <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>#####3.3视图的好处<br>    重用sql语句<br>    简化复杂的sql操作，不必知道它的查询细节<br>    保护数据，提高安全性<br>#####3.4视图的修改</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法一：</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> 视图名</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">查询语句;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 语法二：</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">VIEW</span> 视图名</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">查询语句;</span><br></pre></td></tr></table></figure>

<p>#####3.5视图的删除</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> 视图名,视图名,……;</span><br></pre></td></tr></table></figure>

<p>#####3.6视图的查看</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DESC</span> q1; <span class="comment">-- 查看结构</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> q1;<span class="comment">--查看具体细节</span></span><br></pre></td></tr></table></figure>

<p>#####3.7视图的更新<br>    视图的可更新性和视图中查询的定义有关系，以下类型的视图是不能更新的。<br>    包含以下关键字的sql语句:<br>        分组函数、distinct、group by、 having、union或者union all<br>        常量视图<br>        select中包含子查询<br>        join<br>        from一个不能更新的视图<br>        where子句的子查询引用了from子句中的表<br>#####3.8视图和表的比较</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">创建语法的关键字</th>
<th align="center">是否实际占用物理空间</th>
<th align="center">使用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">视图</td>
<td align="center">create view</td>
<td align="center">只是保存了sql逻辑</td>
<td align="center">可以但一般不能增删改查</td>
</tr>
<tr>
<td align="center">表</td>
<td align="center">create table</td>
<td align="center">保存了数据</td>
<td align="center">增删改查</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>MySQL</tag>
        <tag>事务</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL:DDL（数据定义语言）</title>
    <url>/posts/9938db0d/</url>
    <content><![CDATA[<p>学习笔记：介绍对MySQL中库和表的属性的操作。</p>
<span id="more"></span>

<h3 id="1-库和表的管理"><a href="#1-库和表的管理" class="headerlink" title="1.库和表的管理"></a>1.库和表的管理</h3><p>​    一、库的管理<br>​        创建、修改、删除<br>​    二、表的管理<br>​        创建、修改、删除<br>​        创建:create<br>​        修改:alter<br>​        删除:drop</p>
<h4 id="1-1-库管理"><a href="#1-1-库管理" class="headerlink" title="1.1.库管理"></a>1.1.库管理</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建一个库books</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE books;</span><br><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br><span class="line"><span class="comment">-- 增加容错性</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> books ;</span><br><span class="line"><span class="comment">-- 暂时不能修改库名，容易丢失数据，不够安全</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 更改字符集</span></span><br><span class="line"><span class="keyword">ALTER</span> DATABASE books <span class="type">CHARACTER</span> <span class="keyword">SET</span> gbk;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除库</span></span><br><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> books;</span><br></pre></td></tr></table></figure>

<h4 id="1-2-表的管理"><a href="#1-2-表的管理" class="headerlink" title="1.2.表的管理"></a>1.2.表的管理</h4><h5 id="1-2-1-表结构的创建"><a href="#1-2-1-表结构的创建" class="headerlink" title="1.2.1 表结构的创建"></a>1.2.1 表结构的创建</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span>表名(</span><br><span class="line">    列名 列的类型【(长度) 约束】</span><br><span class="line">    列名 列的类型【(长度) 约束】</span><br><span class="line">    列名 列的类型【(长度) 约束】</span><br><span class="line">    列名 列的类型【(长度) 约束】</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 在books库中创建book表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> book(</span><br><span class="line">    id <span class="type">INT</span>,</span><br><span class="line">    bName <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    price <span class="keyword">DOUBLE</span>,</span><br><span class="line">    authorId <span class="type">INT</span>,</span><br><span class="line">    publishDate DATETIME</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line"><span class="keyword">DESC</span> book;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="1-2-2-表结构的修改"><a href="#1-2-2-表结构的修改" class="headerlink" title="1.2.2.表结构的修改"></a>1.2.2.表结构的修改</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 change<span class="operator">|</span><span class="keyword">add</span><span class="operator">|</span><span class="keyword">drop</span><span class="operator">|</span>modify <span class="keyword">column</span> 列名 【类型 约束】;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改列名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> book CHANGE <span class="keyword">COLUMN</span> publishDate pubDate DATETIME;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改类型</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> book MODIFY <span class="keyword">COLUMN</span> pubDate <span class="type">TIMESTAMP</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 添加新列</span></span><br><span class="line"><span class="comment">-- ALTER TABLE book ADD COLUMN 列名 类型 【first|after 字段名】</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> book <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> annual <span class="keyword">DOUBLE</span> <span class="keyword">first</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除列</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> book <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> annual;</span><br></pre></td></tr></table></figure>

<h5 id="1-2-3-表结构的删除"><a href="#1-2-3-表结构的删除" class="headerlink" title="1.2.3.表结构的删除"></a>1.2.3.表结构的删除</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改表名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> author RENAME <span class="keyword">TO</span> book_author;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> book_author;</span><br><span class="line"><span class="keyword">SHOW</span> TABLES <span class="keyword">FROM</span> books;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 通用写法</span></span><br><span class="line"><span class="comment">-- 新建库</span></span><br><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> 库名;</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE 库名;</span><br><span class="line"><span class="comment">-- 新建表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> 表名;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名 ();</span><br></pre></td></tr></table></figure>

<h5 id="1-2-4-表的复制"><a href="#1-2-4-表的复制" class="headerlink" title="1.2.4.表的复制"></a>1.2.4.表的复制</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 表的复制</span></span><br><span class="line"><span class="comment">-- 仅仅复制表的结构</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">LIKE</span> 旧表</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 复制表的结构和数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名 </span><br><span class="line">    <span class="keyword">SELECT</span> 查询列表 <span class="keyword">FROM</span> 表名</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 仅仅复制表的结构</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> newcopy <span class="keyword">LIKE</span> author;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 复制表的全部</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> newcopy2 </span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> author;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 复制表的部分数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> newcopy3 </span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> author</span><br><span class="line">    <span class="keyword">WHERE</span> nation <span class="operator">=</span> <span class="string">&#x27;中国&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 复制表的列</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> newcopy4 </span><br><span class="line">    <span class="keyword">SELECT</span> `name` <span class="keyword">FROM</span> author;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 复制表的部分字段（丢弃所有数据）</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> newcopy5</span><br><span class="line">    <span class="keyword">SELECT</span> `name` ,id <span class="keyword">FROM</span> author</span><br><span class="line">    <span class="keyword">WHERE</span> <span class="literal">FALSE</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-数据类型介绍"><a href="#2-数据类型介绍" class="headerlink" title="2.数据类型介绍"></a>2.数据类型介绍</h3><h4 id="2-1-整型"><a href="#2-1-整型" class="headerlink" title="2.1.整型"></a>2.1.整型</h4><pre><code><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 整型类型</span></span><br><span class="line">    Tinyint(M,D)</span><br><span class="line">    <span class="type">Smallint</span>(M,D)</span><br><span class="line">    Mediumint(M,D)</span><br><span class="line">    <span class="type">Int</span>(M,D) <span class="operator">/</span> <span class="type">integer</span>(M,D)</span><br><span class="line">    <span class="type">Bigint</span>(M,D)</span><br><span class="line"><span class="number">1.</span>都可以设置无符号和有符号，默认有符号，通过unsigned设置无符号</span><br><span class="line"><span class="number">2.</span>如果超过了范围，会报 <span class="keyword">out</span> <span class="keyword">or</span> <span class="keyword">range</span> 异常，插入临界值</span><br><span class="line"><span class="number">3.</span>长度可以不指定，默认会有一个长度</span><br><span class="line">  长度代表显示的最大宽度，如果不够左边可以用 <span class="number">0</span> 代替，但需要搭配 zerofull ,并且变为无符号整型</span><br></pre></td></tr></table></figure>
</code></pre>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 设置无符号和有符号位</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test (</span><br><span class="line">type1 <span class="type">INT</span>,  <span class="comment">-- 有符号</span></span><br><span class="line">type2 <span class="type">INT</span> UNSIGNED  <span class="comment">-- 无符号</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 超出范围则设置临界值</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-小数"><a href="#2-2-小数" class="headerlink" title="2.2.小数"></a>2.2.小数</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">小数 </span><br><span class="line">   浮点型 <span class="type">float</span>(M,D)、 <span class="keyword">double</span>(M,D)</span><br><span class="line">   定点型 <span class="type">dec</span>(M,D) <span class="operator">/</span> <span class="type">decimal</span>(M,D)</span><br><span class="line">   M指的是数据总长度，D指的是小数点后保留的位数</span><br><span class="line"><span class="number">1.</span>M,D都可以省略，</span><br><span class="line">  如果是 <span class="type">float</span>和 <span class="keyword">double</span>，则会根据插入的数值的精度来决定</span><br><span class="line">  如果是 <span class="type">decimal</span>,则M默认为 <span class="number">10</span>，D默认为 <span class="number">0</span></span><br><span class="line">  定点数比 <span class="keyword">double</span>精度要高，如货币运算等则考虑使用   </span><br><span class="line">原则：<span class="keyword">sql</span></span><br><span class="line">  所选择的类型越简单越好，能保存数值的类型越小越好</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 例子</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test (</span><br><span class="line">type1 <span class="type">FLOAT</span>(<span class="number">5</span>,<span class="number">2</span>) ,</span><br><span class="line">type2 <span class="keyword">DOUBLE</span>(<span class="number">5</span>,<span class="number">2</span>),</span><br><span class="line">type3 <span class="type">DEC</span>(<span class="number">5</span>,<span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">2.22233</span>,<span class="number">2.22233</span>,<span class="number">2.22233</span>),</span><br><span class="line">(<span class="number">2.23</span>,<span class="number">2.23</span>,<span class="number">2.23</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h4 id="2-3-字符型"><a href="#2-3-字符型" class="headerlink" title="2.3.字符型"></a>2.3.字符型</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">较短的文本</span><br><span class="line">    <span class="type">char</span>(M)    固定长度的字符（只要填写就是固定字符长度。比较耗费空间）</span><br><span class="line">    <span class="type">varchar</span>(M) 不定长度的字符（字符长度随填写变化，效率较低）</span><br><span class="line">    M指的是字符长度，<span class="type">char</span>可以省略，默认为<span class="number">1</span>；<span class="type">varchar</span>不能省略</span><br><span class="line">    其他类型： <span class="type">binary</span>、 <span class="type">varbinary</span>(二进制文本)</span><br><span class="line">             enum (枚举，只能插入枚举里边的数据，不区分大小写)</span><br><span class="line">                 例： <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test(type1 ENUM(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>));</span><br><span class="line">                     <span class="keyword">INSERT</span> <span class="keyword">INTO</span> test <span class="keyword">VALUES</span>(<span class="string">&#x27;a&#x27;</span>),(<span class="string">&#x27;B&#x27;</span>),(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">                     <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test;</span><br><span class="line">             <span class="keyword">set</span>(集合，和 Enum类型类似，里面可以保存<span class="number">0</span>·<span class="number">64</span>个成员。区别是<span class="keyword">set</span>类型一次可以选取多个成员，而enum只能选一个，储存字节数和集合长度有关)</span><br><span class="line">                 例： <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test2(type1 <span class="keyword">SET</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>));</span><br><span class="line">                      <span class="keyword">INSERT</span> <span class="keyword">INTO</span> test2 <span class="keyword">VALUES</span>(<span class="string">&#x27;a&#x27;</span>),(<span class="string">&#x27;B,c&#x27;</span>),(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">                      <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test2;</span><br><span class="line">较长的文本</span><br><span class="line">    text</span><br><span class="line">    <span class="type">blob</span>（较大的二进制）</span><br></pre></td></tr></table></figure>

<h4 id="2-4-日期型"><a href="#2-4-日期型" class="headerlink" title="2.4.日期型"></a>2.4.日期型</h4><table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">字节</th>
<th align="center">最小值</th>
<th align="center">最大值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">date</td>
<td align="center">4</td>
<td align="center">1000-01-01</td>
<td align="center">9999-12-31</td>
</tr>
<tr>
<td align="center">datetime</td>
<td align="center">8</td>
<td align="center">1000-01-01</td>
<td align="center">9999-12-31</td>
</tr>
<tr>
<td align="center">timestamp</td>
<td align="center">4</td>
<td align="center">197000101080001</td>
<td align="center">2038年的某个时刻</td>
</tr>
<tr>
<td align="center">time</td>
<td align="center">3</td>
<td align="center">-838：59：59</td>
<td align="center">838：59：59</td>
</tr>
<tr>
<td align="center">year</td>
<td align="center">1</td>
<td align="center">1901</td>
<td align="center">2155</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、 <span class="type">timestamp</span>时间范围较小</span><br><span class="line"><span class="number">2</span>、 <span class="type">timestamp</span>和实际时区有关,更能反映实际的日期，而 datetime则只能反映出插入时的当地时区</span><br><span class="line"><span class="number">3</span>、 <span class="type">timestamp</span>的属性变Mysql版本和SQLMode的影响很大</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 举例</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test(</span><br><span class="line">    type1 DATETIME,</span><br><span class="line">    type2 <span class="type">TIMESTAMP</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test <span class="keyword">VALUES</span> (NOW(),NOW()); </span><br><span class="line"><span class="comment">-- 显示时区</span></span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;time_zone&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改时区(东九区）</span></span><br><span class="line"><span class="keyword">SET</span> time_zone <span class="operator">=</span> <span class="string">&#x27;+9:00&#x27;</span>;</span><br><span class="line"><span class="comment">-- 说明timestamp受时区影响</span></span><br></pre></td></tr></table></figure>

<h3 id="3-常见约束"><a href="#3-常见约束" class="headerlink" title="3.常见约束"></a>3.常见约束</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">含义：用来限制表中的数据，为了保证表中的数据的准确和可靠性</span><br><span class="line">分类：六大约束 </span><br><span class="line">    <span class="keyword">NOT</span> <span class="keyword">NULL</span>：非空，用于保证该字段的值不能为空</span><br><span class="line">    <span class="keyword">DEFAULT</span>:默认，用于保证该字段有默认值</span><br><span class="line">    <span class="keyword">PRIMARY</span> KRY:主键，用于保证该字段的值具有唯一性，并且非空</span><br><span class="line">    <span class="keyword">UNIQUE</span>：用于保证该字段的值具有唯一性，可以为空</span><br><span class="line">    <span class="keyword">CHECK</span>:检查约束【mysql中不支持】</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY:外键，用于限制两个表的关系，用于保证该字段的值必须来自与主表的关联列的值</span><br><span class="line">时机：</span><br><span class="line">    <span class="number">1.</span>创建表时</span><br><span class="line">    <span class="number">2.</span>修改表时</span><br><span class="line">分类：</span><br><span class="line">    列级约束</span><br><span class="line">        六大约束语法都支持，但外键约束没有效果</span><br><span class="line">    表级约束</span><br><span class="line">        除了非空、默认，其他都支持</span><br></pre></td></tr></table></figure>

<h4 id="3-1-创建表时添加约束"><a href="#3-1-创建表时添加约束" class="headerlink" title="3.1 .创建表时添加约束"></a>3.1 .创建表时添加约束</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test(</span><br><span class="line">    列名 类型 列级约束,</span><br><span class="line">    列名 类型 列级约束,</span><br><span class="line">    表级约束</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">列级约束</span></span><br><span class="line"><span class="comment">    直接在字段名和类型后面追加约束类型即可</span></span><br><span class="line"><span class="comment">    只支持：默认、非空、主键、唯一</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">-- 主表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> major(</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    majorName <span class="type">VARCHAR</span>(<span class="number">20</span>) </span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 从表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stuinfo(</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    stuName <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    gender <span class="type">CHAR</span>(<span class="number">1</span>) <span class="keyword">CHECK</span>(gender <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span><span class="keyword">OR</span> gender<span class="operator">=</span><span class="string">&#x27;女&#x27;</span>),</span><br><span class="line">    seat <span class="type">INT</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">    age <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">18</span>,</span><br><span class="line">    majorId <span class="type">INT</span> ,</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> foreignkey <span class="keyword">FOREIGN</span> KEY(majorId) <span class="keyword">REFERENCES</span> major(id)</span><br><span class="line">    );</span><br><span class="line"><span class="comment">-- 查询表结构</span></span><br><span class="line"><span class="keyword">DESC</span> stuinfo;</span><br><span class="line"><span class="comment">-- 查询表索引</span></span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> stuinfo;</span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> major;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">表级约束</span></span><br><span class="line"><span class="comment">    在各字段的最下面</span></span><br><span class="line"><span class="comment">    【constraint 约束名】 约束类型（字段名）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stuinfo(</span><br><span class="line">    id <span class="type">INT</span> ,</span><br><span class="line">    stuName <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    gender <span class="type">CHAR</span>(<span class="number">1</span>) ,</span><br><span class="line">    seat <span class="type">INT</span> ,</span><br><span class="line">    age <span class="type">INT</span> ,</span><br><span class="line">    majorId <span class="type">INT</span>,</span><br><span class="line"><span class="comment">/*** constraint 约束名 约束类型 （字段名）</span></span><br><span class="line"><span class="comment">    CONSTRAINT pk PRIMARY KEY (id),</span></span><br><span class="line"><span class="comment">    CONSTRAINT ch CHECK (gender = &#x27;男&#x27;OR gender=&#x27;女&#x27;),</span></span><br><span class="line"><span class="comment">    CONSTRAINT se UNIQUE (seat),</span></span><br><span class="line"><span class="comment">    CONSTRAINT foreignkey FOREIGN KEY(majorId) REFERENCES major(id)</span></span><br><span class="line"><span class="comment">);</span></span><br></pre></td></tr></table></figure>

<pre><code>主键和唯一的对比
主键：保证唯一性，不允许为空，一个表中只能有一个（可以是多个列组合）
唯一：保证唯一性，允许为空，一个表中可以有多个（可以是多个列组合）
外键：
    1.要求在从表设置外键关系
    2.从表的外键列的类型和主表的关联列的类型要求一致或兼容，名称无所谓
    3.主表的关联列必须是一个key(一般是主键或唯一)
</code></pre>
<h4 id="3-2-修改表时添加约束"><a href="#3-2-修改表时添加约束" class="headerlink" title="3.2.修改表时添加约束"></a>3.2.修改表时添加约束</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 列级约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 MODIFY <span class="keyword">COLUMN</span> 列名 类型 约束;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo MODIFY <span class="keyword">COLUMN</span> id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY;</span><br><span class="line"><span class="comment">-- 表级约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> 约束 (列名);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo <span class="keyword">ADD</span> <span class="keyword">FOREIGN</span> KEY (majorId) <span class="keyword">REFERENCES</span> major(id);</span><br></pre></td></tr></table></figure>

<h4 id="3-3-修改表时删除约束"><a href="#3-3-修改表时删除约束" class="headerlink" title="3.3.修改表时删除约束"></a>3.3.修改表时删除约束</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 列级约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 MODIFY <span class="keyword">COLUMN</span> 列名 类型;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo MODIFY <span class="keyword">COLUMN</span> id <span class="type">INT</span>;</span><br><span class="line"><span class="comment">-- 表级约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> INDEX 约束名;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo <span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY; <span class="comment">-- 主键就一个，所以不用写名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY foreignkey;</span><br></pre></td></tr></table></figure>

<h4 id="3-4-标识列-auto-increment"><a href="#3-4-标识列-auto-increment" class="headerlink" title="3.4.标识列(auto_increment)"></a>3.4.标识列(auto_increment)</h4><pre><code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">标识列又为自增长列.</span><br><span class="line">​    含义：</span><br><span class="line">​        可以不用手动的插入值，系统提供默认的序列值</span><br><span class="line">​    特点：</span><br><span class="line">​        1、标识列必须和主键搭配吗?</span><br><span class="line">​            不一定，但要求是一个key</span><br><span class="line">​        2、一个表可以有几个标识列?</span><br><span class="line">​            至多一个!</span><br><span class="line">​        3、标识列的类型只能是数值型</span><br><span class="line">​        4、标识列可以通过auto_increment_increment设置步长，</span><br><span class="line">​          初始值可以在插入值的时候定义</span><br></pre></td></tr></table></figure>
</code></pre>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">    NAME <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;john&#x27;</span>);</span><br><span class="line"><span class="comment">-- 查看自增长项</span></span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> &quot;%auto_increment%&quot;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Variable_name             Value   </span></span><br><span class="line"><span class="comment">    ------------------------  --------</span></span><br><span class="line"><span class="comment">    auto_increment_increment  1       步长</span></span><br><span class="line"><span class="comment">    auto_increment_offset     1       初始值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">-- 修改步长</span></span><br><span class="line"><span class="keyword">SET</span> auto_increment_increment <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Variable_name             Value   </span></span><br><span class="line"><span class="comment">    ------------------------  --------</span></span><br><span class="line"><span class="comment">    auto_increment_increment  3       </span></span><br><span class="line"><span class="comment">    auto_increment_offset     1 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库操作</tag>
        <tag>表格操作</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL:DML（数据操作语言）</title>
    <url>/posts/9e77971c/</url>
    <content><![CDATA[<p>学习笔记：介绍MySQL中对数据的增删改操作。</p>
<span id="more"></span>DML语言

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数据操作语言:</span><br><span class="line">    插入: insert</span><br><span class="line">    修改: update</span><br><span class="line">    删除: delete</span><br></pre></td></tr></table></figure>
<h3 id="1-插入语句"><a href="#1-插入语句" class="headerlink" title="1. 插入语句"></a>1. 插入语句</h3><h4 id="1-1-语法"><a href="#1-1-语法" class="headerlink" title="1. 1 语法"></a>1. 1 语法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 语法一:</span><br><span class="line">insert into 表名(列名，... ) values (值1,...);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 语法二:</span><br><span class="line">insert into 表名 set 列名 = 值,列名 = 值,....;</span><br></pre></td></tr></table></figure>
<h4 id="1-2-用例"><a href="#1-2-用例" class="headerlink" title="1. 2 用例"></a>1. 2 用例</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1.插入的值的类型要与列的类型一致或兼容</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> boys(id,boyName,userCP)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">20</span>,<span class="string">&#x27;小懒虫&#x27;</span>,<span class="number">99</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 2.不可以为null的列必须插入值。可以为null的列如何插入值?</span></span><br><span class="line">      要么列名和值都省略，要么列名写着，值为<span class="keyword">null</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> boys(id,boyName)</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">VALUES</span>(<span class="number">21</span>,<span class="string">&#x27;大懒虫&#x27;</span>);</span><br><span class="line"><span class="comment">-- 3.列的顺序可以调换</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> beauty(NAME,sex,id, phone)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;蒋欣&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">16</span>,<span class="string">&#x27;10&#x27;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 4.列数和值的个数必须一致</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> beauty(NAME,sex, id, phone, boyfriend_id)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;关晓彤&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">17</span>,<span class="string">&#x27;110&#x27;</span> );</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 5.可以省略列名,默认所有列,而且列的顺序和表中列的顺序一致</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> boys</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">22</span>,<span class="string">&#x27;小懒虫&#x27;</span>,<span class="number">99</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> boys</span><br><span class="line"><span class="keyword">set</span> id<span class="operator">=</span><span class="number">24</span>,boyName<span class="operator">=</span><span class="string">&#x27;小懒虫&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="1-3-方式比较"><a href="#1-3-方式比较" class="headerlink" title="1.3. 方式比较"></a>1.3. 方式比较</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1.方式一支持插入多行,方式二不支持</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> beauty</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">23</span>,<span class="string">&#x27;唐艺昕&#x27;</span>,<span class="string">&#x27;女&#x27;</span>，<span class="string">&#x27;1990-4-23&#x27;</span>,<span class="string">&#x27;1898888&#x27;</span> ,<span class="keyword">NULL</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="number">24</span>,<span class="string">&#x27;唐艺昕2&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;1990-4-21&#x27;</span>,<span class="string">&#x27;1898888888&#x27;</span>, <span class="keyword">NULL</span>, <span class="number">2</span>),</span><br><span class="line">(<span class="number">25</span>,<span class="string">&#x27;唐艺昕3&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;1990-4-20&#x27;</span> ,<span class="string">&#x27;1898888888&#x27;</span>,<span class="keyword">NULL</span>,<span class="number">2</span>) ;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 2、方式—支持子查询,方式二不支持</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> beauty (id,NANE, phone)</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="number">26</span>,<span class="string">&#x27;宋茜&#x27;</span>,<span class="string">&#x27;1889866&#x27;</span>;</span><br></pre></td></tr></table></figure>


<h3 id="2-修改语句"><a href="#2-修改语句" class="headerlink" title="2.修改语句"></a>2.修改语句</h3><h4 id="2-1-语法"><a href="#2-1-语法" class="headerlink" title="2. 1 语法"></a>2. 1 语法</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>修改单表的记录★</span><br><span class="line"></span><br><span class="line">    语法:</span><br><span class="line">    <span class="keyword">update</span> 表名</span><br><span class="line">    <span class="keyword">set</span> 列<span class="operator">=</span>新值,列<span class="operator">=</span>新值,...</span><br><span class="line">    <span class="keyword">where</span> 筛选条件;</span><br><span class="line"><span class="number">2.</span>修改多表的记录【补充】</span><br><span class="line"></span><br><span class="line">    语法:</span><br><span class="line">    sql92语法:</span><br><span class="line">        <span class="keyword">update</span> 表<span class="number">1</span> 别名,表<span class="number">2</span> 别名</span><br><span class="line">        <span class="keyword">set</span> 列<span class="operator">=</span>值,...</span><br><span class="line">        <span class="keyword">where</span> 连接条件</span><br><span class="line">        <span class="keyword">and</span> 筛选条件;</span><br><span class="line">    sql99语法:</span><br><span class="line">        <span class="keyword">update</span> 表<span class="number">1</span> 别名</span><br><span class="line">        <span class="keyword">inner</span><span class="operator">|</span><span class="keyword">left</span><span class="operator">|</span><span class="keyword">right</span> <span class="keyword">join</span> 表<span class="number">2</span> 别名 </span><br><span class="line">        <span class="keyword">on</span> 连接条件</span><br><span class="line">        <span class="keyword">set</span> 列<span class="operator">=</span>值,...</span><br><span class="line">        <span class="keyword">where</span> 筛选条件;</span><br></pre></td></tr></table></figure>
<h4 id="2-2-用例"><a href="#2-2-用例" class="headerlink" title="2. 2 用例"></a>2. 2 用例</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改没有男朋友的女神的男朋友编号都为2号</span></span><br><span class="line"><span class="keyword">UPDATE</span> beauty</span><br><span class="line"><span class="keyword">SET</span> boyfriend_id<span class="operator">=</span><span class="number">2</span></span><br><span class="line"><span class="keyword">WHERE</span> boyfriend_id <span class="keyword">NOT</span> <span class="keyword">IN</span>(</span><br><span class="line">    <span class="keyword">SELECT</span> id</span><br><span class="line">    <span class="keyword">FROM</span> boys)</span><br><span class="line"><span class="keyword">AND</span> boyfriend_id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> beauty be</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> boys bo</span><br><span class="line"><span class="keyword">ON</span> be.boyfriend_id <span class="operator">=</span> bo.id</span><br><span class="line"><span class="keyword">SET</span> boyfriend_id <span class="operator">=</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">WHERE</span> bo.id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>

<h3 id="3-删除语句"><a href="#3-删除语句" class="headerlink" title="3. 删除语句"></a>3. 删除语句</h3><h4 id="3-1-语法"><a href="#3-1-语法" class="headerlink" title="3. 1 语法"></a>3. 1 语法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">方式一: delete</span><br><span class="line">​    语法:</span><br><span class="line">​    1、单表的删除【★】</span><br><span class="line">​        delete from 表名 where 筛选条件 【limit 条目数】</span><br><span class="line">​    2、多表的删除</span><br><span class="line">​        sql92语法:</span><br><span class="line">​            delete 表1的别名,表2的别名</span><br><span class="line">​            from 表1 别名,表2 别名</span><br><span class="line">​            where 连接条件</span><br><span class="line">​            and 筛选条件;</span><br><span class="line">​        sql99语法:</span><br><span class="line">​            delete 表1的别名,表2的别名</span><br><span class="line">​            from 表1 别名</span><br><span class="line">​            inner | left | right join 表2 别名 </span><br><span class="line">​            on 连接条件</span><br><span class="line">​            where 筛选条件</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">方式二: truncate</span><br><span class="line">语法:</span><br><span class="line">    truncate table 表名;</span><br><span class="line">    -- truncate语句,不允许删除添加条件，表示清空删除</span><br></pre></td></tr></table></figure>
<h4 id="3-2-用例"><a href="#3-2-用例" class="headerlink" title="3. 2 用例"></a>3. 2 用例</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除手机号以9结尾的女神信息</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> beauty </span><br><span class="line"><span class="keyword">WHERE</span> phone <span class="keyword">LIKE</span> <span class="string">&#x27;%9&#x27;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除张无忌的女朋友的信息</span></span><br><span class="line"><span class="keyword">DELETE</span> be</span><br><span class="line"><span class="keyword">FROM</span> beauty be</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> boys bo</span><br><span class="line"><span class="keyword">ON</span> be.boyfriend_id <span class="operator">=</span> bo.id</span><br><span class="line"><span class="keyword">WHERE</span> bo.boyName <span class="operator">=</span> <span class="string">&#x27;张无忌&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h4 id="3-3-delete和truncate比较"><a href="#3-3-delete和truncate比较" class="headerlink" title="3.3 delete和truncate比较"></a>3.3 delete和truncate比较</h4><pre><code>1.delete可以加where条件，truncate不能加。
2.truncate删除，效率高一丢丢。
3.假如要删除的表中有自增长列，如果用delete删除后，再插入数据，自增长列的值从断点开始,而truncate删除后，再插入数据，自增长列的值从1开始。   
4.truncate删除没有返回值，delete删除有返回值。
5.truncate删除不能回滚，delete删除可以回滚。
</code></pre>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL:联合查询</title>
    <url>/posts/2080b578/</url>
    <content><![CDATA[<p>学习笔记：介绍MySQL中联合查询的基本使用。</p>
<span id="more"></span>

<h3 id="1-语法"><a href="#1-语法" class="headerlink" title="1. 语法"></a>1. 语法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union 联合合并：将多条查询语句的结果合并成一个结果</span><br><span class="line">    语法：</span><br><span class="line">        查询语句一</span><br><span class="line">        union</span><br><span class="line">        查询语句二</span><br><span class="line">        union</span><br><span class="line">        查询语句三</span><br><span class="line">        ……</span><br><span class="line">    应用场景:</span><br><span class="line">        要查询的结果来自于多个表，且多个表没有直接的连接关系，但查询的信息一致时</span><br><span class="line">    特点:</span><br><span class="line">        1、要求多条查询语句的查询列数是一致的!</span><br><span class="line">        2、要求多条查询语句的查询的每一列的类型和顺序最好一致</span><br><span class="line">        3、union关键字默认去重，如果使用union all 可以包含重复项</span><br></pre></td></tr></table></figure>

<h3 id="2-用例"><a href="#2-用例" class="headerlink" title="2. 用例"></a>2. 用例</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> email <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span></span><br><span class="line"><span class="keyword">OR</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span>;</span><br><span class="line"><span class="comment">/****等价于***/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> email <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询girl中的所有人名</span></span><br><span class="line"><span class="keyword">SELECT</span>  `name`</span><br><span class="line"><span class="keyword">FROM</span> beauty</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> boyName</span><br><span class="line"><span class="keyword">FROM</span> boys;</span><br></pre></td></tr></table></figure>

<h3 id="3-查询总结"><a href="#3-查询总结" class="headerlink" title="3. 查询总结"></a>3. 查询总结</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 查询列表</span><br><span class="line"><span class="keyword">FROM</span> 表名 别名</span><br><span class="line">连接类型（<span class="keyword">left</span><span class="operator">|</span><span class="keyword">right</span><span class="operator">|</span><span class="keyword">inner</span>）<span class="keyword">JOIN</span> 表名 别名</span><br><span class="line"><span class="keyword">ON</span> 连接条件</span><br><span class="line"><span class="keyword">WHERE</span> 筛选条件</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 分组列表</span><br><span class="line"><span class="keyword">HAVING</span> 筛选条件</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 排序列表 <span class="keyword">DESC</span><span class="operator">|</span><span class="keyword">ASC</span></span><br><span class="line">LIMIT 起始条目索引，条目数</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>MySQL</tag>
        <tag>查询</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL:分页查询</title>
    <url>/posts/80debfa3/</url>
    <content><![CDATA[<p>学习笔记：介绍MySQL中分页查询的基本使用。</p>
<span id="more"></span>
<p>应用场景:当要显示的数据，一页显示不全，需要分页提交sql请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法:</span><br><span class="line">     select 查询列表</span><br><span class="line">     from 表</span><br><span class="line">     【[JOIN TYPE] join 表2</span><br><span class="line">     on 连接条件</span><br><span class="line">     WHERE 筛选条件 </span><br><span class="line">     group by 分组字段 </span><br><span class="line">     having 分组后的筛选</span><br><span class="line">     order by 排序的字段】</span><br><span class="line">     limit offset, size;</span><br><span class="line">    /***offset 要显示条目的起始索引(起始索引从0开始)***/</span><br><span class="line">特点:</span><br><span class="line">     limit 语句放在查询语句的最后</span><br><span class="line">公式:</span><br><span class="line">     select 查询列表</span><br><span class="line">     from 表</span><br><span class="line">     limit (page-1)*size,size;</span><br><span class="line">     /***要显示的页数page，每页的条目数size***/</span><br></pre></td></tr></table></figure>


<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询前五条员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line">LIMIT <span class="number">0</span>,<span class="number">5</span>  ;<span class="comment">/***从第0个开始，一共显示5条***/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询第11条到第25条员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line">LIMIT <span class="number">10</span>,<span class="number">15</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 有奖金的员工信息，并且工资较高的前10名显示出来</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1.查询工资最低的员工信息:1ast_name,salary</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">=</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary)</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 2-查询平均工资最低的部门信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> `departments`</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="operator">=</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> department_id</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">AVG</span>(salary) <span class="keyword">ASC</span></span><br><span class="line">    LIMIT <span class="number">1</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 3．查询平均工资最低的部门信息和该部门的平均工资</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span>,avg_data.avg_salary</span><br><span class="line"><span class="keyword">FROM</span> `departments` d</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> department_id,<span class="built_in">AVG</span>(salary) avg_salary</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">AVG</span>(salary) <span class="keyword">ASC</span></span><br><span class="line">    LIMIT <span class="number">1</span>) avg_data</span><br><span class="line"><span class="keyword">ON</span> d.department_id <span class="operator">=</span> avg_data.department_id;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 4.查询平均工资最高的jobs信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> jobs</span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="operator">=</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> job_id </span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id </span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">AVG</span>(salary) <span class="keyword">DESC</span></span><br><span class="line">    LIMIT <span class="number">1</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 5．查询平均工资高于公司平均工资的部门有哪些?</span></span><br><span class="line"><span class="keyword">SELECT</span> department_name</span><br><span class="line"><span class="keyword">FROM</span> departments d</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) avg_salary,department_id</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line">    <span class="keyword">HAVING</span> avg_salary<span class="operator">&gt;</span>(</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary)</span><br><span class="line">        <span class="keyword">FROM</span> employees)</span><br><span class="line">    ) em_sa</span><br><span class="line"><span class="keyword">ON</span> em_sa.department_id  <span class="operator">=</span> d.department_id;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 6。查询出公司中所有manager的详细信息-</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> manager_id</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="keyword">WHERE</span> manager_id <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 7．各个部门中最高工资中最低的那个部门的最低工资是多少</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="operator">=</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> department_id</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id </span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">MAX</span>(salary)</span><br><span class="line">    LIMIT <span class="number">1</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 8，查询平均工资最高的部门的manager的详细信息: last_name，department_id, email, salary</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,e.department_id, email, salary</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.employee_id <span class="operator">=</span> d.manager_id</span><br><span class="line"><span class="keyword">WHERE</span> d.department_id <span class="operator">=</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> department_id</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">AVG</span>(salary) <span class="keyword">DESC</span></span><br><span class="line">    LIMIT <span class="number">1</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>MySQL</tag>
        <tag>查询</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL:子查询</title>
    <url>/posts/e46b90c0/</url>
    <content><![CDATA[<p>学习笔记：介绍MySQL中子查询的基本使用。</p>
<span id="more"></span>

<pre><code>含义: 
    出现在其他语句中的select语句，称为子查询或内查询 
    外部的查询语句，称为主查询或外查询   
分类: 
    按子查询出现的位置:  
        select后面:   
            仅仅支持标量子查询   
        from后面: 
            支持表子查询  
        where或having后面:★    
            标量子查询(单行）   
            列子查询(多行）√   
            行子查询    
        exists后面(相关子查询) 
            表子查询    
    按结果集的行列数不同: 
        标量子查询(结果集只有一行一列)    
        列子查询(结果集只有一列多行） 
        行子查询(结果集有一行多列或多行多列)  
        表子查询(结果集一般为多行多列)    
</code></pre>
<h3 id="1-放在WHERE或者HAVING后面"><a href="#1-放在WHERE或者HAVING后面" class="headerlink" title="1. 放在WHERE或者HAVING后面"></a>1. 放在WHERE或者HAVING后面</h3><h4 id="1-1-标量子查询-一行一列）"><a href="#1-1-标量子查询-一行一列）" class="headerlink" title="1.1. 标量子查询(一行一列）"></a>1.1. 标量子查询(一行一列）</h4><p>操作符有：&gt; &lt; = &lt;&gt;</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 谁的工资比Abel高</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">    salary<span class="operator">&gt;</span>(</span><br><span class="line">    <span class="keyword">SELECT</span> salary</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 返回job_id与141号员工相同，salary比143号员工多的员工姓名，job_id 和工资</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,job_id,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="operator">=</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> job_id</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="keyword">WHERE</span>  employee_id <span class="operator">=</span> <span class="number">141</span>)</span><br><span class="line"><span class="keyword">AND</span> salary <span class="operator">&gt;</span>(</span><br><span class="line">    <span class="keyword">SELECT</span> salary</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">143</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询最低工资大于50号部门最低工资的部门id和其最低工资</span></span><br><span class="line"><span class="keyword">SELECT</span> department_id ,<span class="built_in">MIN</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id </span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">MIN</span>(salary)<span class="operator">&gt;</span>(</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary)</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">50</span></span><br><span class="line">    );</span><br></pre></td></tr></table></figure>

<h4 id="1-2-列子查询"><a href="#1-2-列子查询" class="headerlink" title="1.2. 列子查询"></a>1.2. 列子查询</h4><p>操作符有：   </p>
<blockquote>
<p>IN/NOT IN  等于列表中的任意一个<br>例： a IN (10,20,30)      相当于 a = 10 OR a = 20 OR a = 30<br>ANY|SOME  和子查询返回的的某一个值比较<br>例： a &gt; ANY (10,20,30)   相当于 a&gt; MIN(10,20,30)<br>例： a &lt; ANY (10,20,30)    相当于 a&lt; MAX(10,20,30)<br>ALL 和子查询返回的所有值比较<br>例： a &gt; ALL (10,20,30)    相当于 a&gt; MAX(10,20,30)<br>例： a &lt; ALL (10,20,30)    相当于 a&lt; MIN(10,20,30)   </p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> d.department_id <span class="operator">=</span> e.department_id</span><br><span class="line"><span class="keyword">WHERE</span> location_id <span class="keyword">IN</span> (<span class="number">1400</span>,<span class="number">1700</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name</span><br><span class="line"><span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="keyword">IN</span>(</span><br><span class="line">    <span class="keyword">SELECT</span> department_id</span><br><span class="line">    <span class="keyword">FROM</span> departments</span><br><span class="line">    <span class="keyword">WHERE</span> location_id <span class="keyword">IN</span> (<span class="number">1400</span>,<span class="number">1700</span>)</span><br><span class="line">    );</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 返回其它部门中比job_id为&#x27;IT_PROG&#x27;部门任一工资低的员工的员工号、姓名、job_id 以及salary</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,job_id ,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&lt;</span> <span class="keyword">ANY</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> salary</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="keyword">WHERE</span> job_id <span class="operator">=</span> <span class="string">&#x27;IT_PROG&#x27;</span></span><br><span class="line">)<span class="keyword">AND</span> job_id <span class="operator">&lt;&gt;</span><span class="string">&#x27;IT_PROG&#x27;</span>;;</span><br></pre></td></tr></table></figure>

<h4 id="1-3-行子查询"><a href="#1-3-行子查询" class="headerlink" title="1.3. 行子查询"></a>1.3. 行子查询</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询员工编号最小并且工资最高的员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> (empioyee_id, salarly) <span class="operator">=</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">MIN</span> (employee_id),<span class="built_in">MAX</span>(salary)</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="2-放在SELECT后面"><a href="#2-放在SELECT后面" class="headerlink" title="2. 放在SELECT后面"></a>2. 放在SELECT后面</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询每个部门的员工个数</span></span><br><span class="line"> <span class="comment">/***计算每个部门的人数，没有则返回0***/</span></span><br><span class="line"><span class="keyword">SELECT</span> d.<span class="operator">*</span> ,</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line">    <span class="keyword">FROM</span> employees e</span><br><span class="line">    <span class="keyword">WHERE</span> d.department_id <span class="operator">=</span> e.department_id <span class="comment">-- 内层调用外层</span></span><br><span class="line"><span class="keyword">FROM</span> departments d;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***通过外连，记录每个部门的人数***/</span></span><br><span class="line"><span class="keyword">SELECT</span> d.<span class="operator">*</span> ,<span class="built_in">COUNT</span>(last_name)</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> d.`department_id` <span class="operator">=</span> e.`department_id`</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> d.department_id;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询员工号=102的部门名</span></span><br><span class="line"><span class="keyword">SELECT</span> `employee_id` 员工号,(</span><br><span class="line">    <span class="keyword">SELECT</span> `department_name`</span><br><span class="line">    <span class="keyword">FROM</span> `departments` d</span><br><span class="line">    <span class="keyword">WHERE</span> d.`department_id`<span class="operator">=</span> e.`department_id`</span><br><span class="line">) 部门名</span><br><span class="line"><span class="keyword">FROM</span> `employees` e</span><br><span class="line"><span class="keyword">WHERE</span> e.`employee_id` <span class="operator">=</span> <span class="number">102</span>;</span><br></pre></td></tr></table></figure>

<h3 id="3-放在FORM后面"><a href="#3-放在FORM后面" class="headerlink" title="3. 放在FORM后面"></a>3. 放在FORM后面</h3><p><font color = 'red'>将子查询结果作为一张表，要求必须起别名</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询每个都门的平均工资的工资等级</span></span><br><span class="line">ELECT department_id,grade_level</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> department_id,<span class="built_in">AVG</span>(salary) avg_salary</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line">) d</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> job_grades j</span><br><span class="line"><span class="keyword">ON</span> avg_salary <span class="keyword">BETWEEN</span> lowest_sal <span class="keyword">AND</span> highest_sal;</span><br></pre></td></tr></table></figure>

<h3 id="4-放在exists后面-相关子查询"><a href="#4-放在exists后面-相关子查询" class="headerlink" title="4. 放在exists后面(相关子查询)"></a>4. 放在exists后面(相关子查询)</h3><pre><code>语法：
exists(完整的查询语句)
结果：1或0
</code></pre>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 没有女神的男神名</span></span><br><span class="line"><span class="keyword">SELECT</span> boyName</span><br><span class="line"><span class="keyword">FROM</span> boys bo</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>(</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">    <span class="keyword">FROM</span> beauty be</span><br><span class="line">    <span class="keyword">WHERE</span> be.boyfriend_id <span class="operator">=</span> bo.id</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line"><span class="keyword">SELECT</span> boyName</span><br><span class="line"><span class="keyword">FROM</span> boys </span><br><span class="line"><span class="keyword">WHERE</span> id <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> boyfriend_id</span><br><span class="line">    <span class="keyword">FROM</span> beauty </span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1.查询Zlotkey的部门</span></span><br><span class="line"><span class="keyword">SELECT</span>  department_name</span><br><span class="line"><span class="keyword">FROM</span>  departments</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="operator">=</span> (<span class="keyword">SELECT</span> department_id</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;Zlotkey&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 2.查询工资比公司平均工资高的员工的员工号，姓名和工资。</span></span><br><span class="line"><span class="keyword">SELECT</span> `employee_id`,`last_name`,`salary`</span><br><span class="line"><span class="keyword">FROM</span> `employees`</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    salary<span class="operator">&gt;</span>(</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary)</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 3.查询各部门中工资比本部门平均工资高的员工的员工号，姓名和工资</span></span><br><span class="line"><span class="keyword">SELECT</span> `employee_id`,`last_name`,`salary`</span><br><span class="line"><span class="keyword">FROM</span> `employees` e</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) avg_salary,department_id</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line">    ) s</span><br><span class="line"><span class="keyword">ON</span> e.`department_id` <span class="operator">=</span> s.department_id</span><br><span class="line"><span class="keyword">WHERE</span> e.`salary` <span class="operator">&gt;</span> s.avg_salary;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 4.查询和姓名中包含字母u的员工在相同部门的员工的员工号和姓名</span></span><br><span class="line"><span class="keyword">SELECT</span> `employee_id`,`last_name`</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> `department_id`</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;%u%&#x27;</span>)</span><br><span class="line"><span class="keyword">AND</span> last_name <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">&#x27;%u%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 5.查询在部门的location_id为1700的部门工作的员工的员工号</span></span><br><span class="line"><span class="keyword">SELECT</span> `employee_id`,`last_name`</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> `department_id`</span><br><span class="line">    <span class="keyword">FROM</span> `departments`</span><br><span class="line">    <span class="keyword">WHERE</span> location_id <span class="operator">=</span> <span class="number">1700</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 6.查询管理者是K_ing的员工姓名和工资</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,salary,manager_id</span><br><span class="line"><span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">WHERE</span> manager_id <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> employee_id</span><br><span class="line">    <span class="keyword">FROM</span> employees </span><br><span class="line">    <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;K_ing&#x27;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 7.查询工资最高的员工的姓名，要求first_name和last_name显示为一列，列名为姓.名</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(first_name,<span class="string">&#x27;.&#x27;</span>,last_name) <span class="string">&#x27;姓.名&#x27;</span> ,salary</span><br><span class="line"><span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">=</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">MAX</span>(<span class="keyword">DISTINCT</span> salary)</span><br><span class="line">    <span class="keyword">FROM</span> employees </span><br><span class="line">);</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>MySQL</tag>
        <tag>查询</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL:连接查询</title>
    <url>/posts/b368022b/</url>
    <content><![CDATA[<p>学习笔记：介绍MySQL中连接查询的基本使用。</p>
<span id="more"></span>

<p>连接查询又称多表查询，当查询的字段来自于多个表时，就会用到连接查询。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">笛卡尔乘积现象:表<span class="number">1</span>有m行，表<span class="number">2</span>有n行，结果<span class="operator">=</span>m<span class="operator">*</span>n行</span><br><span class="line">发生原因:没有有效的连接条件</span><br><span class="line">如何避免:添加有效的连按条件</span><br><span class="line"></span><br><span class="line">MySQL分类:</span><br><span class="line">    按年代分类:</span><br><span class="line">        sq192标准：仅仅支持内连接</span><br><span class="line">        sql99标准 【推荐】 支持内连接<span class="operator">+</span>外连接（左外连接和右外连接）<span class="operator">+</span>交叉连接</span><br><span class="line">    按功能分类:</span><br><span class="line">        内连接:</span><br><span class="line">            等值连接</span><br><span class="line">            非等值连接</span><br><span class="line">            自连接</span><br><span class="line">        外连接:</span><br><span class="line">            左外连接</span><br><span class="line">            右外连接</span><br><span class="line">            全外连接</span><br><span class="line">        交叉连接</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 笛卡尔乘积现象</span><br><span class="line">SELECT COUNT(*) FROM beauty;</span><br><span class="line">-- 假设输出12行</span><br><span class="line">SELECT COUNT(*)FROM boys;</span><br><span class="line">-- 假设输出4行</span><br><span class="line">SELECT `name`,boyName </span><br><span class="line">FROM beauty,boys;</span><br><span class="line">-- 最终结果12*4=48行</span><br><span class="line">-- 发生原因：没有有效的连接条件</span><br><span class="line"></span><br><span class="line">-- 如何避免： 添加有效的连接条件</span><br><span class="line">SELECT `name`,boyName </span><br><span class="line">FROM beauty,boys</span><br><span class="line">WHERE beauty.boyfriend_id = boys.id ;</span><br></pre></td></tr></table></figure>

<h3 id="1-sql92标准"><a href="#1-sql92标准" class="headerlink" title="1.sql92标准"></a>1.sql92标准</h3><h4 id="1-1-等值连接"><a href="#1-1-等值连接" class="headerlink" title="1.1.等值连接"></a>1.1.等值连接</h4><p>①多表等值连接的结果为多表的交集部分<br>②n表连接，至少需要n-1个连接条件<br>③多表的顺序没有要求<br>④一般需要为表起别名<br>⑤可以搭配前面介绍的所有子句使用，比如排序、分组、筛选 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询员工名和对应的部门名</span><br><span class="line">SELECT `last_name`,`department_name`</span><br><span class="line">FROM `employees`,`departments`</span><br><span class="line">WHERE `employees`.`department_id` =`departments`.`department_id` ;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 为表起别名</span><br><span class="line">SELECT `last_name`,e.`job_id`,`job_title`</span><br><span class="line">FROM `employees` e,`jobs` j</span><br><span class="line">WHERE e.`job_id` =j.`job_id` ;</span><br><span class="line">-- 注意:如果为表起了别名，则查询的字段就不能使用原来的表名去限定</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询有奖金的每个部门的部门名和部门的领导编号和该部门的最低工资</span><br><span class="line">SELECT `department_name`,d.`manager_id`,MIN(`salary`)</span><br><span class="line">FROM `departments` d,`employees` e</span><br><span class="line">WHERE e.`commission_pct` IS NOT NULL</span><br><span class="line">AND d.`department_id` = e.`department_id`</span><br><span class="line">GROUP BY e.`department_id`,`department_name`;-- 若一一对应可以不加</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询每个工种的工种名和员工的个数，并且按员工个数降序</span><br><span class="line">SELECT job_title,COUNT(*) 个数</span><br><span class="line">FROM jobs j,employees e</span><br><span class="line">WHERE j.job_id = e.job_id</span><br><span class="line">GROUP BY job_title</span><br><span class="line">ORDER BY 个数 DESC;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 实现三表连接</span><br><span class="line">-- 查询员工名、部门名和所在的城市</span><br><span class="line">SELECT last_name,department_name,city</span><br><span class="line">FROM departments d,employees e,locations l</span><br><span class="line">WHERE d.`department_id` = e.`department_id`</span><br><span class="line">AND l.`location_id` = d.`location_id`;</span><br></pre></td></tr></table></figure>

<h4 id="6-1-2-非等值连接"><a href="#6-1-2-非等值连接" class="headerlink" title="6.1.2.非等值连接"></a>6.1.2.非等值连接</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询工资和级别</span><br><span class="line">SELECT salary,`grade_level`</span><br><span class="line">FROM `job_grades`,`employees`</span><br><span class="line">WHERE salary BETWEEN  `lowest_sal`AND `highest_sal`;</span><br></pre></td></tr></table></figure>

<h4 id="6-1-3-子连接"><a href="#6-1-3-子连接" class="headerlink" title="6.1.3.子连接"></a>6.1.3.子连接</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询员工名和上级的名称</span><br><span class="line">SELECT e.last_name 员工名,m.last_name 上级名</span><br><span class="line">FROM employees e,employees m</span><br><span class="line">WHERE e.manager_id = m.employee_id</span><br><span class="line">AND e.manager_id IS NOT NULL;</span><br></pre></td></tr></table></figure>


<h3 id="2-sql99标准"><a href="#2-sql99标准" class="headerlink" title="2.sql99标准"></a>2.sql99标准</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--  语法:    </span></span><br><span class="line">    <span class="keyword">SELECT</span> 查询列表    </span><br><span class="line">    <span class="keyword">FROM</span> 表<span class="number">1</span> 别名     </span><br><span class="line">    【连接类型】 <span class="keyword">JOIN</span> 表<span class="number">2</span> 别名    <span class="keyword">ON</span> 连接条件    </span><br><span class="line">    【<span class="keyword">WHERE</span>筛选条件】    </span><br><span class="line">    【<span class="keyword">GROUP</span> <span class="keyword">BY</span>分组】    </span><br><span class="line">    【<span class="keyword">HAVING</span>筛选条件】    </span><br><span class="line">    【<span class="keyword">ORDER</span> <span class="keyword">BY</span>排序列表】</span><br><span class="line"><span class="comment">-- 分类:    </span></span><br><span class="line">	内连接(★) : <span class="keyword">INNER</span>    </span><br><span class="line">	外连接        </span><br><span class="line">		左外(★) : <span class="keyword">LEFT</span> 【 <span class="keyword">OUTER</span> 】 </span><br><span class="line">    	右外(★) :<span class="keyword">RIGHT</span> 【 <span class="keyword">OUTER</span> 】        </span><br><span class="line">    	全外: <span class="keyword">FULL</span> 【 <span class="keyword">OUTER</span> 】    </span><br><span class="line">    	交叉连接: <span class="keyword">CROSS</span></span><br></pre></td></tr></table></figure>

<h4 id="2-1-内连接"><a href="#2-1-内连接" class="headerlink" title="2.1.内连接"></a>2.1.内连接</h4><h5 id="2-1-1-等值连接"><a href="#2-1-1-等值连接" class="headerlink" title="2.1.1.等值连接"></a>2.1.1.等值连接</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法:    </span></span><br><span class="line"><span class="keyword">SELECT</span> 查询列表    </span><br><span class="line"><span class="keyword">FROM</span> 表<span class="number">1</span> 别名     </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> 表<span class="number">2</span> 别名  <span class="keyword">ON</span> 连接条件;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1.查询员工名、部门名(调换位置)</span></span><br><span class="line"><span class="keyword">SELECT</span> `last_name`,`department_name`</span><br><span class="line"><span class="keyword">FROM</span> employees eINNER </span><br><span class="line"><span class="keyword">JOIN</span> `departments` d <span class="keyword">ON</span> e.`department_id` <span class="operator">=</span> d.`department_id`;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 2.查询名字中包含e的员工名和工种名(筛选&gt;</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,`job_title`</span><br><span class="line"><span class="keyword">FROM</span> `employees` e </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `jobs` j <span class="keyword">ON</span> e.`job_id` <span class="operator">=</span> j.`job_id`</span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;%e%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 3．查询部门个数&gt;3的城市名和部门个数，(分组+筛选）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>),`city`</span><br><span class="line"><span class="keyword">FROM</span> `departments` d </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `locations` l <span class="keyword">ON</span> d.`location_id`<span class="operator">=</span>l.`location_id`</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> `city`</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)<span class="operator">&gt;</span><span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 4.查询哪个部门的部门员工个数&gt;3的部门名和员工个数，并按个数降序（排序）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>),`department_name`</span><br><span class="line"><span class="keyword">FROM</span> `departments` d</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `employees` e <span class="keyword">ON</span> d.`department_id`<span class="operator">=</span> e.`department_id`</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> d.`department_id`</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)<span class="operator">&gt;</span><span class="number">3</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 5.查询员工名、部门名、工种名，并按部门名降序</span></span><br><span class="line"><span class="keyword">SELECT</span> `last_name`,`department_name`,`job_title`</span><br><span class="line"><span class="keyword">FROM</span> `employees` e</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `departments` d <span class="keyword">ON</span> e.`job_id` <span class="operator">=</span> j.`job_id`</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `jobs` j <span class="keyword">ON</span> e.`department_id` <span class="operator">=</span> d.`department_id`</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> `department_name` <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<h5 id="2-1-2-非等值连接"><a href="#2-1-2-非等值连接" class="headerlink" title="2.1.2.非等值连接"></a>2.1.2.非等值连接</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询员工的名字和工资级别</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,grade_level</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> job_gradesON salary <span class="keyword">BETWEEN</span> lowest_sal <span class="keyword">AND</span> highest_sal;</span><br></pre></td></tr></table></figure>

<h5 id="2-1-3-自连接"><a href="#2-1-3-自连接" class="headerlink" title="2.1.3.自连接"></a>2.1.3.自连接</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询员工姓名中包含字符k的员工的名字、上级的名字</span></span><br><span class="line"><span class="keyword">SELECT</span> e.last_name 员工名字,m.last_name 上级名字</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> employees m <span class="keyword">ON</span> e.manager_id <span class="operator">=</span> m.employee_id</span><br><span class="line"><span class="keyword">WHERE</span> e.`last_name` <span class="keyword">LIKE</span> <span class="string">&#x27;%k%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-外连接"><a href="#2-2-外连接" class="headerlink" title="2.2.外连接"></a>2.2.外连接</h4><p>应用场景:用于查询一个表中有,另一个表没有的记录<br>特点:</p>
<ul>
<li>外连接的查询结果为主表中的所有记录,如果从表中有和它匹配的,则显示匹配的值,如果从表中没有和它匹配的,则显示null</li>
<li>外连接查询结果=内连接结果+主表中有而从表没有匹配结果的记录.换言之，外连接结果必须包含主表所有记录，相配的从表记录可以null</li>
<li>左外连接,left join左边的是主表;右外连接,right join右边的是主表</li>
<li>左外和右外交换两个表的顺序，可以实现同样的效果</li>
<li>全外连接=内连接的结果+表1中有但表2没有的+表2中有但表1没有的(MySQL不支持)</li>
</ul>
<h5 id="2-2-1-外连接"><a href="#2-2-1-外连接" class="headerlink" title="2.2.1.外连接"></a>2.2.1.外连接</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 左外连接</span></span><br><span class="line"><span class="comment">-- 查询男朋友不在男神表的女神名</span></span><br><span class="line"><span class="keyword">SELECT</span> `name` ,`boyName`</span><br><span class="line"><span class="keyword">FROM</span> `beauty` be</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> `boys` bo <span class="keyword">ON</span> be.`boyfriend_id` <span class="operator">=</span> bo.`id`</span><br><span class="line"><span class="keyword">WHERE</span> bo.`id` <span class="keyword">IS</span> <span class="keyword">NULL</span>; <span class="comment">-- 一般主键不为空</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 右外连接</span></span><br><span class="line"><span class="comment">-- 查询男朋友不在男神表的女神名</span></span><br><span class="line"><span class="keyword">SELECT</span> `name` ,`boyName`</span><br><span class="line"><span class="keyword">FROM</span> `boys` bo</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span>  `beauty` be <span class="keyword">ON</span> be.`boyfriend_id` <span class="operator">=</span> bo.`id`</span><br><span class="line"><span class="keyword">WHERE</span> bo.`id` <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>

<h5 id="2-2-2-交叉连接"><a href="#2-2-2-交叉连接" class="headerlink" title="2.2.2.交叉连接"></a>2.2.2.交叉连接</h5><p>笛卡尔乘积（没有主次之分）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 交叉连接</span></span><br><span class="line"><span class="keyword">SELECT</span> bo.<span class="operator">*</span> ,be.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> `boys` bo</span><br><span class="line"><span class="keyword">CROSS</span> <span class="keyword">JOIN</span>  `beauty` be;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>MySQL</tag>
        <tag>查询</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL:分组查询</title>
    <url>/posts/ab73e734/</url>
    <content><![CDATA[<p>学习笔记：介绍MySQL中分组查询的基本使用。</p>
<span id="more"></span>

<h3 id="1-语法"><a href="#1-语法" class="headerlink" title="1.语法"></a>1.语法</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 分组函数 【,列(要求出现在 <span class="keyword">group</span> <span class="keyword">by</span>的后面)】</span><br><span class="line"><span class="keyword">from</span> 表</span><br><span class="line">【 <span class="keyword">where</span> 筛选条件 】</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> 分组列表</span><br><span class="line">【 <span class="keyword">order</span> <span class="keyword">by</span>子句 】</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询每个部门的最高工资（以“部门号”分出的每组，分别进行“工资求最高”操作）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(salary),department_id 部门</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id ;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询每个位置上的部门个数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) , location_id</span><br><span class="line"><span class="keyword">FROM</span> departments</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> location_id;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询邮箱中包含a字符的，每个部门的平均工资</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary),department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> email <span class="keyword">LIKE</span> (<span class="string">&#x27;%a%&#x27;</span>) </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询有奖金的每个领导手下员工的最高工资</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(salary),manager_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> manager_id;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询哪个都门的员工个数&gt;2</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) 员工个数,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)<span class="operator">&gt;</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询每个工种有奖金的员工的最高工资&gt;12000的工种编号和最高工资</span></span><br><span class="line"><span class="keyword">SELECT</span> job_id,<span class="built_in">MAX</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">MAX</span>(salary)<span class="operator">&gt;</span><span class="number">12000</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询领导编号&gt;102的每个领导手下的最低工资&gt;5000的领导编号是哪个，以及其最低工资</span></span><br><span class="line"><span class="keyword">SELECT</span> manager_id,<span class="built_in">MIN</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> manager_id<span class="operator">&gt;</span><span class="number">102</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> manager_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">MIN</span>(salary)<span class="operator">&gt;</span><span class="number">5000</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-分组前后的筛选条件对比"><a href="#2-分组前后的筛选条件对比" class="headerlink" title="2.分组前后的筛选条件对比"></a>2.分组前后的筛选条件对比</h3><table>
<thead>
<tr>
<th align="center"></th>
<th align="center">数据源</th>
<th align="center">位置</th>
<th align="center">关键字</th>
</tr>
</thead>
<tbody><tr>
<td align="center">分组前筛选</td>
<td align="center">原始表</td>
<td align="center">group by子句的前面</td>
<td align="center">where</td>
</tr>
<tr>
<td align="center">分组后筛选</td>
<td align="center">分组后的结果集</td>
<td align="center">group by子句的后面</td>
<td align="center">having</td>
</tr>
</tbody></table>
<p><strong>1.分组函数做条件肯定是放在having子句中</strong></p>
<p><strong>2.尽量分组前筛选</strong></p>
]]></content>
      <tags>
        <tag>MySQL</tag>
        <tag>查询</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL:常见函数</title>
    <url>/posts/cc918917/</url>
    <content><![CDATA[<p>  学习笔记：介绍MySQL中常见函数的基本使用。</p>
<span id="more"></span>

<p>概念:类似于java的方法，将一组逻辑语句封装在方法体中，对外暴露方法名  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">好处:</span><br><span class="line">​        1、隐藏了实现细节</span><br><span class="line">​        2、提高代码的重用性  </span><br><span class="line">​    调用:select 函数名(实参列表) 【from 表】;  </span><br><span class="line">​    特点:     </span><br><span class="line">​        ①叫什么(函数名)   </span><br><span class="line">​        ②千什么(函数功能)  </span><br><span class="line">​    分类:      </span><br><span class="line">​        1、单行函数      </span><br><span class="line">​            字符函数</span><br><span class="line">​            数学函数</span><br><span class="line">​            日期函数</span><br><span class="line">​            其他函数【补充】</span><br><span class="line">​            流程控制函数【补充】      </span><br><span class="line">​        2、分组函数      </span><br><span class="line">​            功能:做统计使用，又称为统计函数、聚合函数、组函数     </span><br></pre></td></tr></table></figure>

<h3 id="1-字符函数"><a href="#1-字符函数" class="headerlink" title="1. 字符函数"></a>1. 字符函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- length获取参数值的字节个数</span></span><br><span class="line"><span class="keyword">SELECT</span> LENGTH( <span class="string">&#x27;john&#x27;</span> ) ; <span class="comment">-- 4</span></span><br><span class="line"><span class="keyword">SELECT</span> LENGTH(<span class="string">&#x27;张三丰&#x27;</span> ) ;<span class="comment">-- 9</span></span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%char%&#x27;</span> ;<span class="comment">-- 查看字符集（utf8汉字占3个字节，GBK汉字占2个字节)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- concat 拼接字符串</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT (last_name,<span class="string">&#x27;_&#x27;</span>,first_name) <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- upper、 lower 大小写</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">UPPER</span>(<span class="string">&#x27;john&#x27;</span>);<span class="comment">-- JOHN</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LOWER</span>(<span class="string">&#x27;John&#x27;</span>);<span class="comment">-- john</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 示例:将姓变大写，名变小写，然后拼接</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    CONCAT(<span class="built_in">UPPER</span>(last_name),<span class="string">&#x27; &#x27;</span>,<span class="built_in">LOWER</span>(first_name)) <span class="keyword">AS</span> 姓名</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    employees;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- substr、 substring 获取子串(注意:索引从1开始 )</span></span><br><span class="line"><span class="comment">-- 截取从指定索引处后面所有字符      </span></span><br><span class="line"><span class="keyword">SELECT</span> SUBSTR(<span class="string">&#x27;李莫愁爱上了陆展元&#x27;</span>,<span class="number">7</span>) out_put;</span><br><span class="line"><span class="comment">-- 截取从指定索引处指定字符长度的字符</span></span><br><span class="line"><span class="keyword">SELECT</span> SUBSTR(<span class="string">&#x27;李莫愁爱上了陆展元&#x27;</span>,<span class="number">1</span>,<span class="number">3</span>) out_put;</span><br><span class="line"><span class="comment">-- 案例:姓名中首字符大写，其他字符小写然后用_拼接，显示出来</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    CONCAT(<span class="built_in">UPPER</span> (SUBSTR(last_name,<span class="number">1</span>,<span class="number">1</span>)),<span class="string">&#x27;_&#x27;</span>,<span class="built_in">LOWER</span>(SUBSTR(last_name,<span class="number">2</span>))) 姓</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    employees;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- instr 获取字符串在所匹配的字符串首次出现的索引位置，如果没有则返回0</span></span><br><span class="line"><span class="keyword">SELECT</span> INSTR(<span class="string">&#x27;李莫愁爱上了陆展元&#x27;</span>,<span class="string">&#x27;陆展元&#x27;</span>) out_put;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- trim 去除前后的字符，默认为空格</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">TRIM</span>(<span class="string">&#x27;    李   莫   愁    &#x27;</span>) out_put; <span class="comment">-- 李   莫   愁</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">TRIM</span>(<span class="string">&#x27;a&#x27;</span> <span class="keyword">FROM</span> <span class="string">&#x27;aaaaa陆aaaa展aaa元aaaaa&#x27;</span>) out_put; <span class="comment">-- 陆aaaa展aaa元</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">TRIM</span>(<span class="string">&#x27;aa&#x27;</span> <span class="keyword">FROM</span> <span class="string">&#x27;aaaaa陆aaaa展aaa元aaaaa&#x27;</span>) out_put; <span class="comment">-- a陆aaaa展aaa元a</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- lpad 用指定的字符实现左填充</span></span><br><span class="line"><span class="keyword">SELECT</span> LPAD(<span class="string">&#x27;李莫愁&#x27;</span>,<span class="number">10</span>,<span class="string">&#x27;*&#x27;</span>) out_put; <span class="comment">-- *******李莫愁</span></span><br><span class="line"><span class="keyword">SELECT</span> LPAD(<span class="string">&#x27;李莫愁&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;*&#x27;</span>) out_put; <span class="comment">-- 李莫</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- rpad 用指定的字符实现左填充</span></span><br><span class="line"><span class="keyword">SELECT</span> RPAD(<span class="string">&#x27;李莫愁&#x27;</span>,<span class="number">10</span>,<span class="string">&#x27;ab&#x27;</span>) out_put; <span class="comment">-- 李莫愁abababa</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- replace 用指定的字符替换所有匹配字符</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    replace(<span class="string">&#x27;张无忌爱上了周芷若周芷若周芷若周芷若&#x27;</span>,<span class="string">&#x27;周芷若&#x27;</span>,<span class="string">&#x27;赵敏&#x27;</span>) out_put; </span><br><span class="line">    <span class="comment">-- 张无忌爱上了赵敏赵敏赵敏赵敏</span></span><br></pre></td></tr></table></figure>

<h3 id="2-数学函数"><a href="#2-数学函数" class="headerlink" title="2. 数学函数"></a>2. 数学函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- round四舍五入</span></span><br><span class="line"><span class="comment">-- round(要运算的数,【保留的小数位数】);</span></span><br><span class="line"><span class="keyword">SELECT</span> ROUND(<span class="number">-1.55</span>); <span class="comment">-- -2</span></span><br><span class="line"><span class="keyword">SELECT</span> ROUND(<span class="number">1.567</span>,<span class="number">2</span>) ;<span class="comment">-- 1.57</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ceil 向上取整,返回&gt;=该参数的最小整数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CEIL</span>(<span class="number">-1.02</span>) ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- floor 向下取整,返回&lt;=该参数的最大整数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">FLOOR</span> (<span class="number">1.02</span>); <span class="comment">-- 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- mod  取余</span></span><br><span class="line"><span class="comment">-- mod (a, b) : a-a/b*b（余数正负只与被余数有关）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MOD</span> (<span class="number">-10</span>,<span class="number">-3</span>) ; <span class="comment">-- -1</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MOD</span>( <span class="number">10</span>,<span class="number">-3</span> ) ;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">10</span><span class="operator">%</span><span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<h3 id="3-日期函数"><a href="#3-日期函数" class="headerlink" title="3. 日期函数"></a>3. 日期函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- now 返回当前系统日期+时间</span></span><br><span class="line"><span class="keyword">SELECT</span> NOW();</span><br><span class="line"></span><br><span class="line"><span class="comment">-- curdate 返回当前系统日期</span></span><br><span class="line"><span class="keyword">SELECT</span> CURDATE();</span><br><span class="line"></span><br><span class="line"><span class="comment">-- curtime 返回当前系统时间</span></span><br><span class="line"><span class="keyword">SELECT</span> CURTIME();</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 获取指定的部分 年，月，日，时，分，秒</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">YEAR</span>(NOW()) 年,</span><br><span class="line">    <span class="keyword">MONTH</span>(NOW()) 月,</span><br><span class="line">    <span class="keyword">DAY</span>(NOW()) 日,</span><br><span class="line">    <span class="keyword">HOUR</span>(NOW()) 时,</span><br><span class="line">    <span class="keyword">MINUTE</span>(NOW()) 分,</span><br><span class="line">    <span class="keyword">SECOND</span>(NOW()) 秒;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    MONTHNAME(NOW()) 月分,</span><br><span class="line">    DAYNAME(NOW()) 星期;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- str_to_date 将字符串转换成日期</span></span><br><span class="line"><span class="comment">-- STR_TO_DATE(日期，解析格式);</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    STR_TO_DATE(<span class="string">&#x27;12-31-2020&#x27;</span>,<span class="string">&#x27;%m-%d-%Y&#x27;</span>);<span class="comment">-- 2020-12-31</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- date_format 将字符串转换成日期</span></span><br><span class="line"><span class="comment">-- date_format(日期，解析格式);</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    DATE_FORMAT(<span class="string">&#x27;2020-12-31&#x27;</span>,<span class="string">&#x27;%y年%m月%d日&#x27;</span>);<span class="comment">-- 20年12月31日</span></span><br><span class="line"><span class="comment">-- 有</span></span><br><span class="line"><span class="operator">%</span>Y</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="center">格式符</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">%Y</td>
<td align="center">四位数的年份</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">%y</td>
<td align="center">两位数的年份</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">%m</td>
<td align="center">月份</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">%d</td>
<td align="center">日期</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">%H</td>
<td align="center">24小时制</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">%h</td>
<td align="center">12小时制</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">%i</td>
<td align="center">分钟</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">%s</td>
<td align="center">秒</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询入职时间为4月/3日/1992年的员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> hiredate <span class="operator">=</span> STR_TO_DATE(<span class="string">&#x27;4月/3日/1992年&#x27;</span>,<span class="string">&#x27;%m月/%d日/%Y年&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="4-其他函数"><a href="#4-其他函数" class="headerlink" title="4.  其他函数"></a>4.  其他函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> VERSION(); <span class="comment">-- 获取版本号</span></span><br><span class="line"><span class="keyword">SELECT</span> DATABASE();<span class="comment">-- 获取数据库</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>();<span class="comment">-- 获取用户</span></span><br></pre></td></tr></table></figure>

<h3 id="5-流程控制函数"><a href="#5-流程控制函数" class="headerlink" title="5. 流程控制函数"></a>5. 流程控制函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- if函数:if else 的效果</span></span><br><span class="line"><span class="keyword">SELECT</span> IF(<span class="number">10</span><span class="operator">&lt;</span><span class="number">5</span>,<span class="string">&#x27;大·，&#x27;</span>小<span class="string">&#x27; ) ;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">SELECT </span></span><br><span class="line"><span class="string">    last_name ,</span></span><br><span class="line"><span class="string">    commission_pct,</span></span><br><span class="line"><span class="string">    IF(commission_pct IS NUL,&#x27;</span>没奖金，呵呵<span class="string">&#x27;,&#x27;</span>有奖金，嘻嘻<span class="string">&#x27;)备注 </span></span><br><span class="line"><span class="string">FROM employees;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- case 函数</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    case 要判新的字段或表达式</span></span><br><span class="line"><span class="comment">    when 常量1 then 要显示的值1或语句1</span></span><br><span class="line"><span class="comment">    when 常量2 then 要显示的值2或语句2</span></span><br><span class="line"><span class="comment">    ...</span></span><br><span class="line"><span class="comment">    else 要显示的值n或语句n</span></span><br><span class="line"><span class="comment">    end</span></span><br><span class="line"><span class="comment">    /******类似switch******/</span></span><br><span class="line"><span class="operator">*</span><span class="operator">/</span></span><br><span class="line"><span class="comment">-- 查询工资，要求</span></span><br><span class="line"><span class="comment">-- 部门号=30，显示的工资为1.1倍</span></span><br><span class="line"><span class="comment">-- 部门号=40，显示的工资为1.2 倍</span></span><br><span class="line"><span class="comment">-- 部门号=50，显示的工资为1.3倍</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    salary,</span><br><span class="line">    department_id,</span><br><span class="line">    <span class="keyword">CASE</span> department_id</span><br><span class="line">    <span class="keyword">WHEN</span> <span class="number">30</span> <span class="keyword">THEN</span> salary<span class="operator">*</span><span class="number">1.1</span></span><br><span class="line">    <span class="keyword">WHEN</span> <span class="number">40</span> <span class="keyword">THEN</span> salary<span class="operator">*</span><span class="number">1.2</span></span><br><span class="line">    <span class="keyword">WHEN</span> <span class="number">50</span> <span class="keyword">THEN</span> salary<span class="operator">*</span><span class="number">1.3</span></span><br><span class="line">    <span class="keyword">ELSE</span> salary </span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">AS</span> 工资</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    employees;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    case </span></span><br><span class="line"><span class="comment">    when 条件1 then 要显示的值1或语句1</span></span><br><span class="line"><span class="comment">    when 条件2 then 要显示的值2或语句2</span></span><br><span class="line"><span class="comment">    ...</span></span><br><span class="line"><span class="comment">    else 要显示的值n或语句n</span></span><br><span class="line"><span class="comment">    end</span></span><br><span class="line"><span class="comment">    /******类似if...elseif...else******/</span></span><br><span class="line"><span class="operator">*</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 案例:查询员工的工资的情况</span></span><br><span class="line"><span class="comment">-- 如果工资&gt;20000,显示A级别,</span></span><br><span class="line"><span class="comment">-- 如果工资&gt;15000,显示B级别,</span></span><br><span class="line"><span class="comment">-- 如果工资&gt;10000，显示c级别,</span></span><br><span class="line"><span class="comment">-- 否则，显示D级别。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    salary,</span><br><span class="line">    <span class="keyword">CASE</span> </span><br><span class="line">    <span class="keyword">WHEN</span> salary<span class="operator">&gt;</span><span class="number">20000</span> <span class="keyword">THEN</span> <span class="string">&#x27;A&#x27;</span></span><br><span class="line">    <span class="keyword">WHEN</span> salary<span class="operator">&gt;</span><span class="number">15000</span> <span class="keyword">THEN</span> <span class="string">&#x27;B&#x27;</span></span><br><span class="line">    <span class="keyword">WHEN</span> salary<span class="operator">&gt;</span><span class="number">10000</span> <span class="keyword">THEN</span> <span class="string">&#x27;C&#x27;</span></span><br><span class="line">    <span class="keyword">ELSE</span> <span class="string">&#x27;D&#x27;</span></span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">AS</span> 级别</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 练习</span></span><br><span class="line"><span class="comment">-- 1.显示系统时间(注:日期+时间)</span></span><br><span class="line"><span class="keyword">SELECT</span> NOW();</span><br><span class="line"><span class="comment">-- 2.查询员工号，姓名，工资，以及工资提高百分之20%后的结果(new salary)</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,salary,salary<span class="operator">*</span>(<span class="number">1</span><span class="operator">+</span><span class="number">0.2</span>) `<span class="keyword">new</span> salary`</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3.将员工的姓名仅按首字母排序，并写出姓名的长度(LENGTH)</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,LENGTH(last_name) 长度</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> SUBSTR(last_name,<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">ASC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4.做一个查询，产生下面的结果</span></span><br><span class="line"><span class="comment">-- &lt;last_name&gt; earns &lt;salary&gt; monthly but wants &lt;salary*3&gt;</span></span><br><span class="line"><span class="comment">-- Dream salary</span></span><br><span class="line"><span class="comment">-- King earns 24000 monthly but wants 72000</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(last_name,<span class="string">&#x27; earns &#x27;</span>,salary,<span class="string">&#x27; monthly but wants &#x27;</span>,salary<span class="operator">*</span><span class="number">3</span>) <span class="keyword">AS</span> `Dream salary`</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 5.使用CASE--WHEN，按照下面的条件:</span></span><br><span class="line"><span class="comment">-- job  grade</span></span><br><span class="line"><span class="comment">-- AD_PRES  A</span></span><br><span class="line"><span class="comment">-- ST_MAN   B</span></span><br><span class="line"><span class="comment">-- IT_PROG  C</span></span><br><span class="line"><span class="keyword">SELECT</span>  job_id ,</span><br><span class="line">    <span class="keyword">CASE</span> job_id</span><br><span class="line">    <span class="keyword">WHEN</span> <span class="string">&#x27;AD_PRES&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;A&#x27;</span></span><br><span class="line">    <span class="keyword">WHEN</span> <span class="string">&#x27;ST_MAN&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;B&#x27;</span></span><br><span class="line">    <span class="keyword">WHEN</span> <span class="string">&#x27;IT_PROG&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;C&#x27;</span></span><br><span class="line">    <span class="comment">-- else &#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">AS</span> grade</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>

<h3 id="6-分组函数"><a href="#6-分组函数" class="headerlink" title="6. 分组函数"></a>6. 分组函数</h3><table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">支持类型</th>
</tr>
</thead>
<tbody><tr>
<td align="center">sum 、avg</td>
<td align="center">数值型</td>
</tr>
<tr>
<td align="center">max、min、count</td>
<td align="center">数值型、字符型</td>
</tr>
</tbody></table>
<p><strong>运算过程中，以上分组函数均忽略null</strong><br><strong>可以和distinct搭配</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 举例</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="built_in">SUM</span>(salary) 总和,</span><br><span class="line">    <span class="built_in">AVG</span>(salary) 平均值,</span><br><span class="line">    <span class="built_in">MIN</span>(salary) 最小值,</span><br><span class="line">    <span class="built_in">MAX</span>(salary) 最大值,</span><br><span class="line">    <span class="built_in">COUNT</span>(salary) 总个数</span><br><span class="line">    <span class="comment">-- count(10000,salary) </span></span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- count函数详细介绍</span></span><br><span class="line"><span class="built_in">COUNT</span>(salary) <span class="keyword">FROM</span> employees;<span class="comment">-- 统计salary非null的行数</span></span><br><span class="line"><span class="built_in">COUNT</span> (<span class="operator">*</span>) <span class="keyword">FROM</span> employees;<span class="comment">-- 统计行数</span></span><br><span class="line"><span class="built_in">COUNT</span> (常量值) <span class="keyword">FROM</span> employees;<span class="comment">--（相当于加了一列常量数据） 统计行数</span></span><br><span class="line"><span class="comment">-- 和分组函数一同查询的字段要求是group by后的字段</span></span><br><span class="line"><span class="comment">-- group by 后面会涉及</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询部门编号为90的员工个数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) 个数</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="operator">=</span><span class="number">90</span> ; </span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>MySQL</tag>
        <tag>常见函数</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL:排序</title>
    <url>/posts/db4c4c/</url>
    <content><![CDATA[<p>学习笔记：介绍MySQL中排序操作。</p>
<span id="more"></span>

<h3 id="1语法格式"><a href="#1语法格式" class="headerlink" title="1语法格式"></a>1语法格式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 查询列表             	③</span><br><span class="line">FROM 表                     	①</span><br><span class="line">【 WHERE 语句 】                ②</span><br><span class="line">ORDER BY 排序列表 【 asc|desc 】 ④</span><br></pre></td></tr></table></figure>

<h3 id="2-特点"><a href="#2-特点" class="headerlink" title="2.特点"></a>2.特点</h3><p>​    1.asc代表的是升序,desc代表的是降序如果不写，默认是升序<br>​    2.order by子句中可以支持单个字段、多个字段、表达式、函数、别名<br>​    3. order by子句一般是放在查询语句的最后面，limit子句除外</p>
<h3 id="3-举例"><a href="#3-举例" class="headerlink" title="3.举例"></a>3.举例</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询员工信息，要求工资从高到低排序 </span><br><span class="line">SELECT</span><br><span class="line">	*</span><br><span class="line">FROM</span><br><span class="line">	employees</span><br><span class="line">ORDER BY salary DESC; </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 按入职时间显示员工信息</span><br><span class="line">SELECT	</span><br><span class="line">	*</span><br><span class="line">FROM </span><br><span class="line">	employees</span><br><span class="line">WHERE </span><br><span class="line">	department_id&gt;=90</span><br><span class="line">ORDER BY hiredate ASC;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 按年薪的高低显示员工信息和年薪</span><br><span class="line">SELECT	*,salary*12*(1+IFNULL(commission_pct,0))AS 年薪</span><br><span class="line">FROM employees</span><br><span class="line">ORDER BY 年薪 DESC;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 按姓名的长度进行排序显示员工名和工资</span><br><span class="line">SELECT  last_name,salary</span><br><span class="line">FROM employees</span><br><span class="line">ORDER BY LENGTH(last_name) DESC;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 按工资升序，再按员工编号降序进行排序显示员工信息</span><br><span class="line">SELECT  *</span><br><span class="line">FROM employees</span><br><span class="line">ORDER BY salary ASC, employee_id DESC;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Mysql</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL:条件查询</title>
    <url>/posts/a8bccd5a/</url>
    <content><![CDATA[<p>学习笔记：介绍MySQL中条件查询的基本使用。</p>
<span id="more"></span>

<h3 id="1-语法"><a href="#1-语法" class="headerlink" title="1 .语法"></a>1 .语法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select</span><br><span class="line">	查询列表</span><br><span class="line">from</span><br><span class="line">	表名</span><br><span class="line">where</span><br><span class="line">	筛选条件;		</span><br></pre></td></tr></table></figure>

<h3 id="2-表达式分类"><a href="#2-表达式分类" class="headerlink" title="2 .表达式分类"></a>2 .表达式分类</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一、按条件表达式筛选</span><br><span class="line">	条件运算符:&gt; &lt;= != &lt;&gt;&gt;=&lt;=</span><br><span class="line"></span><br><span class="line">二、按逻辑表达式筛选（用于连接条件表达式）</span><br><span class="line">	逻辑运算符:  &amp;&amp;  ||  !</span><br><span class="line">			   and or not</span><br><span class="line"></span><br><span class="line">三、模糊查询</span><br><span class="line">	like</span><br><span class="line">	between and </span><br><span class="line">	in</span><br><span class="line">	is null</span><br></pre></td></tr></table></figure>

<h4 id="2-1-按条件表达式筛选"><a href="#2-1-按条件表达式筛选" class="headerlink" title="2.1 按条件表达式筛选"></a>2.1 按条件表达式筛选</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询工资&gt;12000的员工信息</span><br><span class="line">SELECT</span><br><span class="line">	*</span><br><span class="line">FROM</span><br><span class="line">	employees</span><br><span class="line">WHERE</span><br><span class="line">	salary&gt;12000;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询部门编号不为90的员工名和部门信息	</span><br><span class="line">SELECT</span><br><span class="line">	,`last_name`,`department_id`</span><br><span class="line">FROM</span><br><span class="line">	employees</span><br><span class="line">WHERE</span><br><span class="line">	department_id &lt;&gt;90;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-逻辑查询"><a href="#2-2-逻辑查询" class="headerlink" title="2.2 逻辑查询"></a>2.2 逻辑查询</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询工资在10000到20000之间的9员工名、工资和奖金信息</span><br><span class="line">SELECT</span><br><span class="line">	last_name,</span><br><span class="line">	salary,</span><br><span class="line">	commission_pct</span><br><span class="line">FROM</span><br><span class="line">	employees</span><br><span class="line">WHERE</span><br><span class="line">	salary&gt;10000 AND salary&lt;20000;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询部门编号不在90和110之间或者工资大于15000的员工信息	</span><br><span class="line">SELECT </span><br><span class="line">	*</span><br><span class="line">FROM </span><br><span class="line">	employees</span><br><span class="line">WHERE</span><br><span class="line">	NOT(department_id&gt;90 AND department_id&lt;110) OR salary&gt;15000;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-模糊查询"><a href="#2-3-模糊查询" class="headerlink" title="2.3 模糊查询"></a>2.3 模糊查询</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询名字中含&#x27;a&#x27;的员工信息</span><br><span class="line">SELECT</span><br><span class="line">	*</span><br><span class="line">FROM </span><br><span class="line">	employees</span><br><span class="line">WHERE </span><br><span class="line">	last_name LIKE &#x27;%a%&#x27;; -- %是通配符，表示任意个任意字符</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询名字中第三个含n第五个含l的员工名和工资</span><br><span class="line">SELECT</span><br><span class="line">	last_name</span><br><span class="line">	salary</span><br><span class="line">FROM </span><br><span class="line">	employees</span><br><span class="line">WHERE </span><br><span class="line">	last_name LIKE &#x27;__n_l%&#x27;;-- _表示单个任意字符</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--查询名字中含有特殊通配符的员工名</span><br><span class="line">SELECT</span><br><span class="line">	last_name</span><br><span class="line">FROM </span><br><span class="line">	employees</span><br><span class="line">WHERE </span><br><span class="line">	last_name LIKE &#x27;%$_%&#x27; ESCAPE &#x27;$&#x27;; #ESCAPE 是指转义字符</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询员工编号在100和120之间的员工信息（包含临界值）</span><br><span class="line">SELECT</span><br><span class="line">	*</span><br><span class="line">FROM </span><br><span class="line">	employees</span><br><span class="line">WHERE</span><br><span class="line">	employee_id BETWEEN 100 AND 120 ;</span><br><span class="line">	-- 完全等价于 employee_id &gt;= 100 AND employee_id &lt;=120 ;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询工种符合IT_PROT、AD_VP、AD_PRES的一种的员工信息</span><br><span class="line">SELECT </span><br><span class="line">	last_name</span><br><span class="line">FROM </span><br><span class="line">	employees</span><br><span class="line">WHERE</span><br><span class="line">	job_id IN (&#x27;IT_PROT&#x27;,&#x27;AD_VP&#x27;,&#x27;AD_PRES&#x27;);</span><br><span class="line">	/*完全等价于 job_id = &#x27;IT_PROT&#x27; OR job_id = &#x27;AD_VP&#x27; OR job_id = &#x27;AD_PRES&#x27;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询没有奖金的员工名和奖金率</span><br><span class="line">SELECT </span><br><span class="line">	last_name,</span><br><span class="line">	commission_pct</span><br><span class="line">FROM </span><br><span class="line">	employees</span><br><span class="line">WHERE</span><br><span class="line">	commission_pct IS NULL;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询有奖金的员工名和奖金率</span><br><span class="line">SELECT </span><br><span class="line">	last_name,</span><br><span class="line">	commission_pct</span><br><span class="line">FROM </span><br><span class="line">	employees</span><br><span class="line">WHERE</span><br><span class="line">	commission_pct IS NOT NULL;</span><br></pre></td></tr></table></figure>

<p>特殊：安全等于 &lt;=&gt; （相当于 = 和 IS 的功能) </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">IS NULL 和 &lt;=&gt;区别</span><br><span class="line">IS NULL:仅仅可以判断 NULL值,可读性较高，建议使用</span><br><span class="line">&lt;=&gt;:既可以判断 NULL值，又可以判断普通的数值，可读性较低</span><br></pre></td></tr></table></figure>

<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <tags>
        <tag>MySQL</tag>
        <tag>查询</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL:基础查询</title>
    <url>/posts/47455d3a/</url>
    <content><![CDATA[<p>学习笔记：介绍MySQL中基础查询语法。</p>
<span id="more"></span>

<p><strong>语法:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select  查询列表 </span><br><span class="line">from 表名;</span><br></pre></td></tr></table></figure>

<p>类似于: system.out.println (打印东西);<br>特点:<br>1、查询列表可以是:表中的字段、常量值、表达式、函数<br>2、查询的结果是一个虚拟的表格</p>
<h3 id="1-1-查询表中的单个字段"><a href="#1-1-查询表中的单个字段" class="headerlink" title="1.1 查询表中的单个字段"></a>1.1 查询表中的单个字段</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE employees; <span class="comment">-- 进入数据库</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-查询表中的多个字段"><a href="#1-2-查询表中的多个字段" class="headerlink" title="1.2 查询表中的多个字段"></a>1.2 查询表中的多个字段</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT </span><br><span class="line">	last_name , </span><br><span class="line">	salary,</span><br><span class="line">	 email </span><br><span class="line">FROM </span><br><span class="line">	employees;</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">	`last_name`,/***着重号，可以用来区分关键字和字段***/</span><br><span class="line">	`salary`,</span><br><span class="line">	`email`</span><br><span class="line">FROM </span><br><span class="line">	employees;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-查询表中的所有字段"><a href="#1-3-查询表中的所有字段" class="headerlink" title="1.3 查询表中的所有字段"></a>1.3 查询表中的所有字段</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM employees;</span><br></pre></td></tr></table></figure>

<h3 id="1-4-查询常量值"><a href="#1-4-查询常量值" class="headerlink" title="1.4 查询常量值"></a>1.4 查询常量值</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 100;</span><br><span class="line">SELECT &#x27;John&#x27;;</span><br></pre></td></tr></table></figure>

<h3 id="1-5-查询表达式"><a href="#1-5-查询表达式" class="headerlink" title="1.5 查询表达式"></a>1.5 查询表达式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 100%94;</span><br></pre></td></tr></table></figure>

<h3 id="1-6-查询函数"><a href="#1-6-查询函数" class="headerlink" title="1.6 查询函数"></a>1.6 查询函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT VERSION(); #查询版本</span><br></pre></td></tr></table></figure>

<h3 id="1-7-起别名"><a href="#1-7-起别名" class="headerlink" title="1.7 起别名"></a>1.7 起别名</h3><p>①便于理解<br>②如果要查询的字段有重名的情况，使用别名可以区分开来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#方式一:使用as</span><br><span class="line">SELECT 100%98 AS 结果;</span><br><span class="line">SELECT last_name AS 姓, first_name AS 名 FROM employees;</span><br><span class="line"></span><br><span class="line">#方式二:使用空格</span><br><span class="line">SELECT last_name 姓 , first_name 名 FROM employees;</span><br><span class="line"></span><br><span class="line">-- 例子</span><br><span class="line">SELECT salary AS &quot;out put&quot; FROM employees;</span><br><span class="line">-- 如果别名中含有空格，井号，关键字等特殊字符，需要用单引号或者双引号括起来。</span><br></pre></td></tr></table></figure>

<h3 id="1-8-去重"><a href="#1-8-去重" class="headerlink" title="1.8.去重"></a>1.8.去重</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 例子:获取所有部门的编号</span><br><span class="line">SELECT DISTINCT department_id FROM employee;；</span><br></pre></td></tr></table></figure>

<h3 id="1-9-mysql中的-号"><a href="#1-9-mysql中的-号" class="headerlink" title="1.9.mysql中的+号"></a>1.9.mysql中的+号</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 100+90;     -- 两个操作数都为数值型，则做加法运算</span><br><span class="line">SELECT &#x27;123&#x27;+90;   -- 只要其中一方为字符型，试图将字符型数值转换成数值型</span><br><span class="line">                   -- 如果转换成功,则继续做加法运算</span><br><span class="line">SELECT &#x27;john&#x27;+90;  -- 如果转换失败，则将字符型数值转换成0</span><br><span class="line">SELECT NULL+10;    -- 只要其中一方为null，则结果肯定为null</span><br><span class="line">	               </span><br></pre></td></tr></table></figure>

<h3 id="1-10-拼接"><a href="#1-10-拼接" class="headerlink" title="1.10 拼接"></a>1.10 拼接</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT CONCAT(last_name,first_name) FROM employees;</span><br><span class="line">#在拼接过程中，如果出现null，则返回的值就是null,可以事现进行判断</span><br></pre></td></tr></table></figure>

<h3 id="1-11-IFNULL函数"><a href="#1-11-IFNULL函数" class="headerlink" title="1.11 IFNULL函数"></a>1.11 IFNULL函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">IFNULL(字段，替代值); -- 如果是null返回替代值，否则返回原来值</span><br></pre></td></tr></table></figure>

<h3 id="1-12-ISNULL函数"><a href="#1-12-ISNULL函数" class="headerlink" title="1.12 ISNULL函数"></a>1.12 ISNULL函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ISNULL(字段); -- 如果是null返回0，否则返回1.</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>堆的建立和排序</title>
    <url>/posts/26a18e84/</url>
    <content><![CDATA[<p>以<strong>大顶堆</strong>为例子，以int数组为存储结构，记录堆的建立，排序，插入、删除等操作</p>
<span id="more"></span>

<p>堆排序条件：</p>
<pre><code> 1. 父结点值大于等于子结点的值
</code></pre>
<p>过程：</p>
<pre><code>1. 从最后一个父结点开始逆序遍历，保证遍历后的结点为有序的
2. 如果交换了父子结点的值，则要顺着堆结构下沉，直到当前结点满足堆排序的条件
</code></pre>
<h3 id="1-堆的初始化"><a href="#1-堆的初始化" class="headerlink" title="1.堆的初始化"></a>1.堆的初始化</h3><p>从最后一个父结点开始遍历，保证在交换过程中子结点是大顶堆。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildBigHeap</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=(n-<span class="number">1</span>)/<span class="number">2</span>;i&gt;=<span class="number">0</span>;i--)&#123;	<span class="comment">//从最后一个父节点开始迭代</span></span><br><span class="line">        adjustBigHeap(nums,i,n);	<span class="comment">//递归</span></span><br><span class="line">        <span class="comment">//heapToDown(nums,i,n);		//非递归</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-堆排序"><a href="#2-堆排序" class="headerlink" title="2.堆排序"></a>2.堆排序</h3><p><strong>递归</strong>，方式较为简单。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 堆结点的下沉操作，主要用于删除元素和自身排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nums 要排序的堆</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> parent 父结点的下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n 最后一个结点的下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">adjustBigHeap</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> parent,<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="comment">//1.默认孩子结点为左子结点</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">child</span> <span class="operator">=</span><span class="number">2</span>*parent+<span class="number">1</span>; </span><br><span class="line">    <span class="comment">//2.比较左右结点大小，大的成为子结点</span></span><br><span class="line">    <span class="keyword">if</span>(child+<span class="number">1</span>&lt;=n&amp;&amp;nums[child]&lt;nums[child+<span class="number">1</span>])&#123;</span><br><span class="line">        child++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.比较父子结点，子结点大，则交换顺序，并将父结点下沉</span></span><br><span class="line">    <span class="keyword">if</span>(child&lt;=n&amp;&amp;nums[child]&gt;nums[parent])&#123;</span><br><span class="line">        swap(nums,child,parent);</span><br><span class="line">        adjustBigHeap(nums,child,n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<p>其中<strong>swap函数</strong>用于交换结点值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 交换结点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nums 要交换结点的堆</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i 交换结点1的下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> j 交换结点2的下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> i,<span class="type">int</span> j)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i!=j)&#123;</span><br><span class="line">        nums[i] = nums[i]^nums[j];</span><br><span class="line">        nums[j] = nums[i]^nums[j];</span><br><span class="line">        nums[i] = nums[i]^nums[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>非递归</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * description: 堆结点的下沉操作，主要用于删除元素和自身排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nums 要排序的堆</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> parent 父结点的下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n 最后一个结点的下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">heapToDown</span><span class="params">(<span class="type">int</span>[] nums ,<span class="type">int</span> parent,<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">child</span> <span class="operator">=</span> <span class="number">2</span>*parent+<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">source</span> <span class="operator">=</span> nums[parent];<span class="comment">//要下沉的结点</span></span><br><span class="line">    <span class="keyword">while</span>(child&lt;=n)&#123;</span><br><span class="line">        <span class="comment">//1.比较左右结点大小，大的成为子结点</span></span><br><span class="line">        <span class="keyword">if</span>(child+<span class="number">1</span>&lt;=n&amp;&amp;nums[child]&lt;nums[child+<span class="number">1</span>]) &#123;</span><br><span class="line">            child++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.子结点小于父结点，上提结束</span></span><br><span class="line">        <span class="keyword">if</span>(source&gt;nums[child]) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.子结点大于或等于父结点，子结点上提</span></span><br><span class="line">        nums[parent]=nums[child];</span><br><span class="line">        parent = child;</span><br><span class="line">        child = <span class="number">2</span>*parent+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.子结点不在上提后，直接将目标元素沉底</span></span><br><span class="line">    nums[parent] = source;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 堆结点的上浮操作，主要用于增加元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nums 要排序的堆</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> child 子结点的下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">heapToUp</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> child)</span>&#123;</span><br><span class="line">    <span class="type">int</span> parent= (child-<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(parent&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//比较父子结点，符合则上浮，不符合则跳出</span></span><br><span class="line">        <span class="keyword">if</span>(nums[parent]&lt;nums[child]) &#123;</span><br><span class="line">            swap(nums,parent,child);</span><br><span class="line">            child=parent;</span><br><span class="line">            parent= (child-<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-堆的增删操作"><a href="#3-堆的增删操作" class="headerlink" title="3.堆的增删操作"></a>3.堆的增删操作</h3><p><strong>增加元素</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 添加堆结点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nums 要排序的堆</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> num 添加的子结点值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n 添加的位置，堆的最后一个结点之后</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertBigHeapTop</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> num,<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    nums[n]=num;</span><br><span class="line">    heapToUp(nums,n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><strong>删除元素</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 删除堆顶结点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nums 要排序的堆</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n 最后一个结点的位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int 所删除的结点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deleteBigHeapTop</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    swap(nums,<span class="number">0</span>,n);				<span class="comment">//1.交换结点</span></span><br><span class="line">    adjustBigHeap(nums,<span class="number">0</span>,n-<span class="number">1</span>);	 <span class="comment">//2.结点下沉</span></span><br><span class="line">    <span class="comment">//heapToDown(nums,0,n-1);</span></span><br><span class="line">    <span class="keyword">return</span> nums[n];			 	<span class="comment">//3.返回删除结点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> scanner.nextInt(); 	<span class="comment">//堆的长度</span></span><br><span class="line">        <span class="type">int</span>[] ins = <span class="keyword">new</span> <span class="title class_">int</span>[len];		<span class="comment">//堆的元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">lastIndex</span> <span class="operator">=</span> -<span class="number">1</span>;				<span class="comment">//最后一个元素的位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">            ins[i] = s;</span><br><span class="line">            lastIndex++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出建堆之间数组</span></span><br><span class="line">        System.out.println(Arrays.toString(ins));</span><br><span class="line">        <span class="comment">//上述函数均在Solution类中实现</span></span><br><span class="line">        <span class="type">Solution</span> <span class="variable">solution</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Solution</span>();</span><br><span class="line">        <span class="comment">//堆排序</span></span><br><span class="line">        solution.buildBigHeap(ins,ins.length-<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//输出建立大顶堆之后数组</span></span><br><span class="line">        System.out.println(Arrays.toString(ins));</span><br><span class="line">        <span class="comment">//输出前5个结点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;<span class="number">5</span>&amp;&amp;<span class="number">0</span>&lt;=lastIndex;i++)&#123;</span><br><span class="line">            System.out.print(solution.deleteBigHeapTop(ins,lastIndex)+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            lastIndex--;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//添加结点15，12</span></span><br><span class="line">        solution.insertBigHeapTop(ins,<span class="number">15</span>,++lastIndex);</span><br><span class="line">        solution.insertBigHeapTop(ins,<span class="number">12</span>,++lastIndex);</span><br><span class="line">        <span class="keyword">for</span>(;<span class="number">0</span>&lt;=lastIndex;lastIndex--)&#123;</span><br><span class="line">            System.out.print(solution.deleteBigHeapTop(ins,lastIndex)+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="5-结果"><a href="#5-结果" class="headerlink" title="5.结果"></a>5.结果</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">8</span> <span class="number">2</span> <span class="number">9</span> <span class="number">10</span> <span class="number">3</span> <span class="number">7</span> <span class="number">6</span> <span class="number">4</span></span><br><span class="line">初始数组：</span><br><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">4</span>]</span><br><span class="line">建大顶堆后：</span><br><span class="line">[<span class="number">10</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>]</span><br><span class="line">打印前<span class="number">5</span>个最大的数：</span><br><span class="line"><span class="number">10</span> <span class="number">9</span> <span class="number">8</span> <span class="number">7</span> <span class="number">6</span></span><br><span class="line">添加元素<span class="number">15</span>，<span class="number">12</span>后，打印排序</span><br><span class="line"><span class="number">15</span> <span class="number">12</span> <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> </span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>算法</tag>
        <tag>堆</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树的创建与遍历</title>
    <url>/posts/3fc4b270/</url>
    <content><![CDATA[<p>输入Integer数组，将其构建为二叉树，并进行各种遍历算法。</p>
<span id="more"></span>
<h3 id="1-二叉树的创建"><a href="#1-二叉树的创建" class="headerlink" title="1.二叉树的创建"></a>1.二叉树的创建</h3><p>1.创建树结点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> val;</span><br><span class="line">    <span class="keyword">public</span> TreeNode left;</span><br><span class="line">    <span class="keyword">public</span> TreeNode right;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeNode</span><span class="params">()</span>&#123;&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeNode</span><span class="params">(<span class="type">int</span> val)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.根据所输入的类型，建立二叉树结构（这里是Integer类型）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">buildTree</span><span class="params">(Integer[] nums)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums==<span class="literal">null</span>||nums[<span class="number">0</span>]==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//1.存放结点的队列</span></span><br><span class="line">    Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//2.放入根结点</span></span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(nums[<span class="number">0</span>]);</span><br><span class="line">    queue.offer(root);</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;<span class="comment">//跟踪数组下标</span></span><br><span class="line">    <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">        <span class="comment">//3.1弹出根节点</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">        <span class="comment">//3.2放入左子结点</span></span><br><span class="line">        <span class="keyword">if</span>(i+<span class="number">1</span>&lt;nums.length&amp;&amp;nums[++i]!=<span class="literal">null</span>)&#123;</span><br><span class="line">            cur.left = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(nums[i]);</span><br><span class="line">            queue.offer(cur.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.3放入右子结点</span></span><br><span class="line">        <span class="keyword">if</span>(i+<span class="number">1</span>&lt;nums.length&amp;&amp;nums[++i]!=<span class="literal">null</span>)&#123;</span><br><span class="line">            cur.right = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(nums[i]);</span><br><span class="line">            queue.offer(cur.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-二叉树的遍历"><a href="#2-二叉树的遍历" class="headerlink" title="2.二叉树的遍历"></a>2.二叉树的遍历</h3><h4 id="2-1-前、中、后、遍历-递归"><a href="#2-1-前、中、后、遍历-递归" class="headerlink" title="2.1.前、中、后、遍历(递归)"></a>2.1.前、中、后、遍历(递归)</h4><p><strong>前序遍历</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">DLR_dfs</span><span class="params">(TreeNode root,List&lt;Integer&gt; list)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root!=<span class="literal">null</span>)&#123;</span><br><span class="line">        list.add(root.val);</span><br><span class="line">        DLR_dfs(root.left,list);</span><br><span class="line">        DLR_dfs(root.right,list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>中序遍历</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">LDR_dfs</span><span class="params">(TreeNode root,List&lt;Integer&gt; list)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root!=<span class="literal">null</span>)&#123;</span><br><span class="line">        LDR_dfs(root.left,list);</span><br><span class="line">        list.add(root.val);</span><br><span class="line">        LDR_dfs(root.right,list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>后序遍历</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">LRD_dfs</span><span class="params">(TreeNode root,List&lt;Integer&gt; list)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root!=<span class="literal">null</span>)&#123;</span><br><span class="line">        LRD_dfs(root.left,list);</span><br><span class="line">        LRD_dfs(root.right,list);</span><br><span class="line">        list.add(root.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-2-前、中、后、遍历-栈"><a href="#2-2-前、中、后、遍历-栈" class="headerlink" title="2.2.前、中、后、遍历(栈)"></a>2.2.前、中、后、遍历(栈)</h4><p><strong>前序遍历</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] DLR_stack(TreeNode root)&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">    List&lt;TreeNode&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> root;</span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span>(cur!=<span class="literal">null</span>||!stack.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>)&#123;</span><br><span class="line">            stack.push(cur);	<span class="comment">//1.存放最左侧的结点</span></span><br><span class="line">            list.add(cur);		<span class="comment">//2.访问根结点和左子结点</span></span><br><span class="line">            cur = cur.left;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = stack.pop();		<span class="comment">//3.弹出栈顶元素</span></span><br><span class="line">        cur = cur.right;		<span class="comment">//4.遍历右子结点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//5.将列表转化为数组</span></span><br><span class="line">    <span class="keyword">return</span> list.stream().mapToInt(i-&gt;i.val).toArray();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>中序遍历</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] LDR_stack(TreeNode root)&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">    List&lt;TreeNode&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> root;</span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span>(cur!=<span class="literal">null</span>||!stack.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>)&#123;</span><br><span class="line">            stack.push(cur);	<span class="comment">//1.存放最左侧的结点</span></span><br><span class="line">            cur = cur.left;	</span><br><span class="line">        &#125;</span><br><span class="line">        cur = stack.pop();		<span class="comment">//2.弹出栈顶元素</span></span><br><span class="line">        list.add(cur);			<span class="comment">//3.访问左子结点和根结点</span></span><br><span class="line">        cur = cur.right;		<span class="comment">//4.遍历右子结点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//5.将列表转化为数组</span></span><br><span class="line">    <span class="keyword">return</span> list.stream().mapToInt(i-&gt;i.val).toArray();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>后序遍历</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] LRD_stack(TreeNode root)&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">    List&lt;TreeNode&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> root;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">last</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span>(cur!=<span class="literal">null</span>||!stack.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>)&#123;</span><br><span class="line">            stack.push(cur);<span class="comment">//存放最左侧的结点</span></span><br><span class="line">            cur = cur.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//因为最后访问根结点，存储过左结点之后，右结点可能有分支，暂时不能弹出结点</span></span><br><span class="line">        cur = stack.peek();</span><br><span class="line">        <span class="comment">//由于是先访问的子结点，因此在访问根结点的时候要判断右结点是不是已经访问过了</span></span><br><span class="line">        <span class="keyword">if</span>(cur.right!=<span class="literal">null</span>&amp;&amp;cur.right!=last)&#123;</span><br><span class="line">            cur = cur.right;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            list.add(stack.pop());  <span class="comment">//没有右节点，弹出栈顶结点</span></span><br><span class="line">            last = cur;             <span class="comment">//记录上一个结点</span></span><br><span class="line">            cur = <span class="literal">null</span>;             <span class="comment">//此时结点为空</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将列表转化为数组</span></span><br><span class="line">    <span class="keyword">return</span> list.stream().mapToInt(i-&gt;i.val).toArray();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-3-层序遍历-单队列、双队列"><a href="#2-3-层序遍历-单队列、双队列" class="headerlink" title="2.3.层序遍历(单队列、双队列)"></a>2.3.层序遍历(单队列、双队列)</h4><p><strong>单队列遍历</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">floor_queue</span><span class="params">(TreeNode root,List&lt;Integer&gt; list)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();	<span class="comment">//1.存储结点队列</span></span><br><span class="line">    queue.offer(root);							<span class="comment">//2.压入根节点</span></span><br><span class="line">    <span class="keyword">while</span>(!queue.isEmpty())&#123;					<span class="comment">//3.遍历栈元素</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> queue.poll();	<span class="comment">//3.1.弹出根结点</span></span><br><span class="line">        list.add(cur.val);						<span class="comment">//4.存储每层元素值</span></span><br><span class="line">        <span class="keyword">if</span>(cur.left!=<span class="literal">null</span>)&#123;				<span class="comment">//3.2.压入左子结点</span></span><br><span class="line">            queue.offer(cur.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cur.right!=<span class="literal">null</span>)&#123;			<span class="comment">//3.3.压入右子结点</span></span><br><span class="line">            queue.offer(cur.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>双队列遍历</strong><br>  虽然比单队列复杂一些，但可以找到每层的最左侧的结点，对某些利用左子结点的题有用，如果仅仅只是遍历单队列更好一些。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">floor_doubleQueue</span><span class="params">(TreeNode root,List&lt;Integer&gt; list)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    Queue&lt;TreeNode&gt; queue1 = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();	<span class="comment">//1.存储结点队列</span></span><br><span class="line">    Queue&lt;TreeNode&gt; queue2 = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    queue1.offer(root);								<span class="comment">//2.压入根节点</span></span><br><span class="line">    <span class="keyword">while</span>(!queue1.isEmpty())&#123;						<span class="comment">//3.遍历栈元素</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> queue1.poll();	<span class="comment">//3.1.弹出根结点</span></span><br><span class="line">        list.add(cur.val);							<span class="comment">//4.第二队列存储每层元素</span></span><br><span class="line">        <span class="keyword">if</span>(cur.left!=<span class="literal">null</span>)&#123;				<span class="comment">//3.2.压入左子结点</span></span><br><span class="line">            queue2.offer(cur.left);	</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cur.right!=<span class="literal">null</span>)&#123;			<span class="comment">//3.3.压入右子结点</span></span><br><span class="line">            queue2.offer(cur.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(queue1.isEmpty()&amp;&amp;!queue2.isEmpty()) &#123;	<span class="comment">//5.复制第二队列继续遍历</span></span><br><span class="line">            queue1 = queue2;</span><br><span class="line">            queue2 = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">//输入数组长度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        Integer[] ins = <span class="keyword">new</span> <span class="title class_">Integer</span>[in];</span><br><span class="line">        <span class="comment">//输入数组元素</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            String s= scanner.next();</span><br><span class="line">            <span class="keyword">if</span>(s.equals(<span class="string">&quot;null&quot;</span>))&#123;</span><br><span class="line">                ins[i]=<span class="literal">null</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ins[i]=Integer.valueOf(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将前面所提到的树方法已经写到这个类里面，可以直接实例化调用</span></span><br><span class="line">        <span class="type">Solution</span> <span class="variable">solution</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Solution</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出输入的元素</span></span><br><span class="line">        System.out.println(Arrays.toString(ins));</span><br><span class="line">        <span class="comment">//建立树结构</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> solution.buildTree(ins);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//前序遍历（递归）</span></span><br><span class="line">        ArrayList&lt;Integer&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        solution.DLR_dfs(root,list1);</span><br><span class="line">        System.out.println(Arrays.toString(list1.stream().mapToInt(i-&gt;i).toArray()));</span><br><span class="line">        <span class="comment">//中序遍历（递归）</span></span><br><span class="line">        ArrayList&lt;Integer&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        solution.LDR_dfs(root,list2);</span><br><span class="line">        System.out.println(Arrays.toString(list2.stream().mapToInt(i-&gt;i).toArray()));</span><br><span class="line">        <span class="comment">//后序遍历（递归）</span></span><br><span class="line">        ArrayList&lt;Integer&gt; list3 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        solution.LRD_dfs(root,list3);</span><br><span class="line">        System.out.println(Arrays.toString(list3.stream().mapToInt(i-&gt;i).toArray()));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//前序遍历（栈）</span></span><br><span class="line">        System.out.println(Arrays.toString(solution.DLR_stack(root)));</span><br><span class="line">        <span class="comment">//中序遍历（栈）</span></span><br><span class="line">        System.out.println(Arrays.toString(solution.LDR_stack(root)));</span><br><span class="line">        <span class="comment">//后序遍历（栈）</span></span><br><span class="line">        System.out.println(Arrays.toString(solution.LRD_stack(root)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//层序遍历（单队列）</span></span><br><span class="line">        ArrayList&lt;Integer&gt; list4 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        solution.floor_queue(root,list4);</span><br><span class="line">        System.out.println(Arrays.toString(list4.stream().mapToInt(i-&gt;i).toArray()));</span><br><span class="line">        <span class="comment">//层序遍历（双队列）</span></span><br><span class="line">        ArrayList&lt;Integer&gt; list5 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        solution.floor_doubleQueue(root,list5);</span><br><span class="line">        System.out.println(Arrays.toString(list5.stream().mapToInt(i-&gt;i).toArray()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-结果"><a href="#4-结果" class="headerlink" title="4.结果"></a>4.结果</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">12</span><br><span class="line">1 2 6 null 3 null null 4 5 null null 7</span><br><span class="line">输出：</span><br><span class="line">[1, 2, 6, null, 3, null, null, 4, 5, null, null, 7]</span><br><span class="line">[1, 2, 3, 4, 5, 7, 6]</span><br><span class="line">[2, 4, 3, 7, 5, 1, 6]</span><br><span class="line">[4, 7, 5, 3, 2, 6, 1]</span><br><span class="line">[1, 2, 3, 4, 5, 7, 6]</span><br><span class="line">[2, 4, 3, 7, 5, 1, 6]</span><br><span class="line">[4, 7, 5, 3, 2, 6, 1]</span><br><span class="line">[1, 2, 6, 3, 4, 5, 7]</span><br><span class="line">[1, 2, 6, 3, 4, 5, 7]</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>数据结构</tag>
        <tag>算法</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>质因子分解</title>
    <url>/posts/47c16ae7/</url>
    <content><![CDATA[<p>找出一个数的所有质因子，并存储到数组中。</p>
<span id="more"></span>

<h3 id="1-知识点："><a href="#1-知识点：" class="headerlink" title="1.知识点："></a>1.知识点：</h3><p>​    1.一个数n的乘因子一半的数量在该数的平方根√n以下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">证明：将一个数n分解因子，则可以有如下因子:(假设n/i都能被整除）</span><br><span class="line">               1   n</span><br><span class="line">               2   n/2</span><br><span class="line">               3   n/3</span><br><span class="line">               4   n/4</span><br><span class="line">               ……  ……</span><br><span class="line">               k   n/k</span><br><span class="line">       从上向下观察，左侧因子是递增的，右侧是递减的，则最后的因子应该是相等的，即k=n/k,得出k=√n;</span><br><span class="line">       因此只需要从1遍历到√n,找出能满足(n%i==0)条件的i,n/i,则可以找到所有乘因子。</span><br></pre></td></tr></table></figure>

<p>​    2.另一半在平方根以上的乘因子，比√n大的质因子只有一个，其他均为合数。</p>
<pre><code>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">证明2：一个数n在平方根以上的乘因子，比√n大的质因子最多只有一个，其他因子均为合数。</span><br><span class="line">	反证法：假设存在两个及以上比√n大的质因子</span><br><span class="line">		则将数n按质因子的方式进行分解</span><br><span class="line">			n=a1*a2*a3*……*ak*ak+1*ak+2 </span><br><span class="line">		其中：</span><br><span class="line">			ai为大于1的质数，</span><br><span class="line">			ak为小于√n，且最接近√n的一个整数，</span><br><span class="line">			则ak+1，ak+2 ，为大于√n的质因子整数</span><br><span class="line">		计算ak+1*ak+2</span><br><span class="line">			∵ ak+1&gt;√n, ak+2&gt;√n</span><br><span class="line">			∴ ak+1*ak+2&gt;√n*√n=n</span><br><span class="line">			则 a1*a2*a3*……*ak*ak+1*ak+2 &gt;ak+1*ak+2&gt; n</span><br><span class="line">	这与上面提出的等式冲突，说明不能存在两个及以上的比√n大的质因子</span><br></pre></td></tr></table></figure>
</code></pre>
<h3 id="2-程序实现"><a href="#2-程序实现" class="headerlink" title="2. 程序实现"></a>2. 程序实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分解质因子</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">numbers</span><span class="params">(<span class="type">int</span> num)</span>&#123;</span><br><span class="line">    <span class="comment">//1.建立存储空间，动态存储</span></span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> num;</span><br><span class="line">    <span class="comment">//2.遍历到√n</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i*i&lt;=num;i++)&#123;</span><br><span class="line">        <span class="comment">//3.1如果能被整除，则添加进列表</span></span><br><span class="line">        <span class="keyword">if</span>(temp %i==<span class="number">0</span>)&#123;</span><br><span class="line">            list.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.2如果能被持续整除，则缩减被除数，去除相同的质因子（如果能一直被整除,则temp结果为1）</span></span><br><span class="line">        <span class="keyword">while</span>(temp %i==<span class="number">0</span>)&#123;</span><br><span class="line">            temp  /= i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.3最后添加可能出现的比√n大的质因子。</span></span><br><span class="line">    <span class="keyword">if</span>(temp&gt;<span class="number">1</span>) &#123;</span><br><span class="line">        list.add(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.转换数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//若要数组保存，可以使用java8中的stream</span></span><br><span class="line">list.steam().mapToInt(i-&gt;i).toArray();</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>如何通过USR-DR302与485传感器建立连接</title>
    <url>/posts/dda0e464/</url>
    <content><![CDATA[<p>使用实验室的485转网口的转换器，完成485传感器的tcp通讯。</p>
<span id="more"></span>

<h2 id="实验设备："><a href="#实验设备：" class="headerlink" title="实验设备："></a>实验设备：</h2><ul>
<li>通讯转换模块（USR-DR302）</li>
<li>485传感器（WT61-PC485)</li>
</ul>
<h2 id="连接线路"><a href="#连接线路" class="headerlink" title="连接线路"></a>连接线路</h2><p>正确连接转换器上的接口：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PC(网口)&lt;----网口----&gt;转换器（USR-DR302）&lt;----A/T和B/R----&gt;485传感器（WT61-PC485）</span><br></pre></td></tr></table></figure>

<p><strong>正确连接信号线和电源线</strong>，信号灯会进行闪烁。</p>
<h2 id="配置PC端IP"><a href="#配置PC端IP" class="headerlink" title="配置PC端IP"></a>配置PC端IP</h2><p>打开电脑的网络设置，设置以太网Ipv4分配。</p>
<p><img src="connect_2.jpg"></p>
<h2 id="配置通讯转换器（USR-DR302）"><a href="#配置通讯转换器（USR-DR302）" class="headerlink" title="配置通讯转换器（USR-DR302）"></a>配置通讯转换器（USR-DR302）</h2><p>在浏览器上输入ip地址<code>192.168.0.7</code>会弹出一个页面。</p>
<p><img src="connect_3.jpg"></p>
<p>如果没有弹出页面：</p>
<ul>
<li>一种可能是线路连接问题，检查一遍线路。</li>
<li>还有一种可能是将设备模块的<code>默认ip</code>被修改了，可以通过<a href="https://www.usr.cn/Down/USR-DR302_V1.0.3.pdf">串口AT指令</a>查询或者<code>重置</code>。</li>
</ul>
<h2 id="配置本机ip设置"><a href="#配置本机ip设置" class="headerlink" title="配置本机ip设置"></a>配置本机ip设置</h2><p><img src="connect_4.jpg"></p>
<p>除了<code>ip地址</code>不同（不冲突，建议默认），其他的<code>子网掩码</code>，<code>网关地址</code>，<code>DNS服务器</code>和在PC配置的<code>IPv4</code>一样。完成后，<code>重启</code>模块。</p>
<h2 id="配置端口参数"><a href="#配置端口参数" class="headerlink" title="配置端口参数"></a>配置端口参数</h2><p><img src="connect_5.jpg"></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">波特率:</span> <span class="number">9600</span>    <span class="comment">#所使用的传感器在这个频段，WT61-PC485在这个频段</span></span><br><span class="line"><span class="string">本地端口:</span> <span class="number">8000</span>	<span class="comment">#可以随意给一个</span></span><br><span class="line"><span class="string">工作方式:</span> <span class="string">TCP</span> <span class="string">Server</span> </span><br></pre></td></tr></table></figure>

<p>完成后，<code>重启</code>模块</p>
<h2 id="配置扩散功能"><a href="#配置扩散功能" class="headerlink" title="配置扩散功能"></a>配置扩散功能</h2><p>打开<code>Modbus TCP</code>功能</p>
<p><img src="connect_6.jpg"></p>
<p>完成后，<code>重启</code>模块</p>
<h2 id="测试通讯"><a href="#测试通讯" class="headerlink" title="测试通讯"></a>测试通讯</h2><p>打开<a href="https://www.usr.cn/Down/Software/USR-TCP232-Test-V1.3.exe">TCP串口调试助手</a>，或者网络调试助手。</p>
<p><img src="connect_7.jpg"></p>
<p>按图示操作，中间区域出现所要接收的报文，说明通讯成功。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">协议类型:</span> <span class="string">TCP</span> <span class="string">Client</span>    </span><br><span class="line"><span class="string">服务器IP地址:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.7</span>	<span class="comment">#转换器模块的IP地址</span></span><br><span class="line"><span class="string">服务器端口号:</span> <span class="number">8000</span>		<span class="comment">#转换器模块的本地端口</span></span><br><span class="line"></span><br><span class="line"><span class="string">报文:</span> </span><br><span class="line">	<span class="string">modbusTCP表头:</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">06</span> 		<span class="comment">#后两个字节是数据报文的长度</span></span><br><span class="line">	<span class="string">数据报文:</span> <span class="number">50</span> <span class="number">03</span> <span class="number">00</span> <span class="string">3d</span> <span class="number">00</span> <span class="number">03</span>			<span class="comment">#除去CRC校验码的报文</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>实验室科研</category>
      </categories>
      <tags>
        <tag>modbus TCP</tag>
      </tags>
  </entry>
  <entry>
    <title>解决next主题搜索栏被遮挡的原因</title>
    <url>/posts/d62d9cd6/</url>
    <content><![CDATA[<p>使用next主题美化博客，当打开本地搜索功能时，发现搜索栏被遮挡在下面。</p>
<ol>
<li>修改属性将搜索栏置顶</li>
</ol>
<span id="more"></span>

<p>这是next主题CSS的问题，可以使用<code>z-index</code>属性来调节样式。</p>
<p>打开根目录下<code>./_config.next.syml</code>文件(老版本文件在<code>./themes/next/_config.syml</code>)找到<code>custom_file_path:</code>修改为：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>



<p>打开根目录下<code>./source/_data/styles.styl</code>文件。找到<code>.head-inner属性</code>添加<code>z-index: 9999;</code>(没有就自己创建)</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.header-inner</span> &#123;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">9999</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重新构建页面，问题解决。</p>
<p><img src="result.jpg"></p>
]]></content>
      <tags>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>博客优化：页面美化</title>
    <url>/posts/f837761/</url>
    <content><![CDATA[<p>​    博客搭建完成后需要做一些美化，下面是我在网上搜集并亲手试验过的一些美化功能。</p>
<span id="more"></span>

<h3 id="添加动态粒子背景：canvas-nest"><a href="#添加动态粒子背景：canvas-nest" class="headerlink" title="添加动态粒子背景：canvas nest"></a>添加动态粒子背景：canvas nest</h3><p>站点根目录打开Git Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-canvas-nest <span class="built_in">source</span>/lib/canvas-nest</span><br></pre></td></tr></table></figure>

<p>打开主题配置文件即<code>/themes/next</code>下的<code>_config.yml</code>，新版本可能没有canvas-nest，那将下面的代码找一个地方粘贴，我喜欢复制在<code>#canvas-ribbon</code>上面）</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Canvas-nest</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-canvas-nest</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/hustcc/canvas-nest.js</span></span><br><span class="line"><span class="attr">canvas_nest:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">onmobile:</span> <span class="literal">true</span> <span class="comment"># Display on mobile or not</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;180, 240, 60&quot;</span> <span class="comment"># RGB values, use `,` to separate</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">0.6</span> <span class="comment"># The opacity of line: 0~1</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span> <span class="comment"># z-index property of the background</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">99</span> <span class="comment"># The number of lines</span></span><br></pre></td></tr></table></figure>

<img src="/posts/f837761/canvas_1.jpg" class="post-image">

<h3 id="设置背景图片"><a href="#设置背景图片" class="headerlink" title="设置背景图片"></a>设置背景图片</h3><p>打开主题配置文件即<code>/themes/next</code>下的<code>_config.yml</code>，将 <code>style: source/_data/styles.styl</code> 取消注释：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>

<p>打开根目录<code>/source</code>创建文件<code>_data/styles.styl</code>，添加以下内容：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="built_in">url</span>(/images/background.png);<span class="comment">//图片地址</span></span><br><span class="line">      <span class="attribute">background-size</span>: cover;</span><br><span class="line">      <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">      <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">      <span class="attribute">background-position</span>: <span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="添加文章阴影效果"><a href="#添加文章阴影效果" class="headerlink" title="添加文章阴影效果"></a>添加文章阴影效果</h3><p>打开<code>/source/_data/style.styl</code>文件，添加以下代码：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.post</span> &#123;</span><br><span class="line">   <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span><br><span class="line">   <span class="attribute">margin-bottom</span>: <span class="number">60px</span>;</span><br><span class="line">   <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">   -webkit-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">202</span>, <span class="number">203</span>, <span class="number">203</span>, .<span class="number">5</span>);</span><br><span class="line">   -moz-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, .<span class="number">5</span>);</span><br></pre></td></tr></table></figure>

<h3 id="代码块样式自定义"><a href="#代码块样式自定义" class="headerlink" title="代码块样式自定义"></a>代码块样式自定义</h3><p>打开主题配置文件即<code>/themes/next</code>下的<code>_config.yml</code>，将 <code>style: source/_data/styles.styl</code> 取消注释。</p>
<p>打开<code>/source/_data/styles.styl</code>，添加以下代码：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Custom styles.</span></span><br><span class="line"><span class="selector-tag">code</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ff7600</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fbf7f8</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 大代码块的自定义样式</span></span><br><span class="line"><span class="selector-class">.highlight</span>, pre &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.highlight</span>, <span class="selector-tag">code</span>, pre &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d6d6d6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h3><p>打开主题配置文件即<code>/themes/next/_config.yml</code>，查找<code>avatar</code>，url后是图片的链接地址（本地图片放在<code>/themes/next/source/images</code>文件夹下）：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/avatar.gif</span>   <span class="comment">#图片的位置http://xxx.com/avatar.png</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be dispalyed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span>   </span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">false</span>  </span><br></pre></td></tr></table></figure>

<h3 id="页面透明化"><a href="#页面透明化" class="headerlink" title="页面透明化"></a>页面透明化</h3><p>打开主题配置文件即<code>/themes/next</code>下的<code>_config.yml</code>，将 <code>style: source/_data/styles.styl</code> 取消注释。</p>
<p>打开<code>/source/_data/styles.styl</code>，添加以下代码：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.content-wrap</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.8</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.post-block</span> &#123;</span><br><span class="line">	<span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.7</span>) none repeat scroll <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//侧边框的透明度设置</span></span><br><span class="line"><span class="selector-class">.sidebar-inner</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.7</span>) none repeat scroll <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//菜单栏的透明度设置</span></span><br><span class="line"><span class="selector-class">.header-inner</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.8</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//搜索框（local-search）的透明度设置</span></span><br><span class="line"><span class="selector-class">.popup</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.8</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//评论区透明度</span></span><br><span class="line"><span class="selector-class">.comments</span> &#123;</span><br><span class="line">	<span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.7</span>) none repeat scroll <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="圆角设置"><a href="#圆角设置" class="headerlink" title="圆角设置"></a>圆角设置</h3><p>打开<code>/source/_data/variable.styl</code>，添加以下代码：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 圆角设置</span></span><br><span class="line"><span class="variable">$border</span>-radius-inner     = <span class="number">30px</span> <span class="number">30px</span> <span class="number">30px</span> <span class="number">30px</span>;</span><br><span class="line"><span class="variable">$border</span>-radius           = <span class="number">30px</span>;</span><br></pre></td></tr></table></figure>

<h3 id="外部链接优化"><a href="#外部链接优化" class="headerlink" title="外部链接优化"></a>外部链接优化</h3><p>减少外部链接可以提高网站的安全性和SEO。</p>
<p>安装 hexo-filter-nofollow 插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-filter-nofollow --save</span><br></pre></td></tr></table></figure>

<p>打开<code>/_config.yml</code>添加如下代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Nofollow</span></span><br><span class="line">nofollow:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span>   <span class="comment">#启用插件</span></span><br><span class="line">  field: site     <span class="comment">#post 处理文章内容，post 处理全站所有文件</span></span><br><span class="line">  exclude:      <span class="comment">#白名单(比如友链)</span></span><br><span class="line">    - <span class="string">&#x27;exclude1.com&#x27;</span></span><br><span class="line">    - <span class="string">&#x27;exclude2.com&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="添加宠物"><a href="#添加宠物" class="headerlink" title="添加宠物"></a>添加宠物</h3><p>在根目录打开<code>Git Bash</code>，输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-helper-live2d --save</span><br><span class="line">npm install live2d-widget-model-tororo</span><br></pre></td></tr></table></figure>

<p>模型还有很多种：<a href="https://github.com/xiazeyu/live2d-widget-models/blob/master/README.md">live2d-widget-models</a>，我比较喜欢<code>tororo</code></p>
<p>打开<code>/_config.yml</code>添加如下代码：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-tororo</span>	<span class="comment">#你的模型</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="comment"># 设置模型的位置</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">120</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">240</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">react:</span></span><br><span class="line">    <span class="attr">opacityDefault:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">opacityOnHover:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="页面静态压缩"><a href="#页面静态压缩" class="headerlink" title="页面静态压缩"></a>页面静态压缩</h3><p>在根目录打开<code>Git Bash</code>，输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-neat --save</span><br></pre></td></tr></table></figure>

<p>打开<code>/_config.yml</code>添加如下代码：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo-neat</span></span><br><span class="line"><span class="comment"># 博文压缩</span></span><br><span class="line"><span class="attr">neat_enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 压缩html</span></span><br><span class="line"><span class="attr">neat_html:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line"><span class="comment"># 压缩css</span></span><br><span class="line"><span class="attr">neat_css:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/*.min.css&#x27;</span></span><br><span class="line"><span class="comment"># 压缩js</span></span><br><span class="line"><span class="attr">neat_js:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mangle:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">output:</span></span><br><span class="line">  <span class="attr">compress:</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/*.min.js&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/jquery.fancybox.pack.js&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/index.js&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="代码复制按钮"><a href="#代码复制按钮" class="headerlink" title="代码复制按钮"></a>代码复制按钮</h3><p>打开主题配置文件即<code>/themes/next/_config.yml</code>，查找<code>copy_button</code>，修改如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Show text copy result.</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="博客摘要"><a href="#博客摘要" class="headerlink" title="博客摘要"></a>博客摘要</h3><p>在想显示的内容后面添加</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure>

<h3 id="文章版权信息"><a href="#文章版权信息" class="headerlink" title="文章版权信息"></a>文章版权信息</h3><p>打开主题配置文件即<code>/themes/next/_config.yml</code>，查找<code>creative_commons</code>，修改如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">creative_commons:</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">by-nc-sa</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="博客底部布局"><a href="#博客底部布局" class="headerlink" title="博客底部布局"></a>博客底部布局</h3><p>打开主题配置文件即<code>/themes/next/_config.yml</code>，查找<code>footer</code>,自定义修改：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="comment"># Specify the date when the site was setup. If not defined, current year will be used.</span></span><br><span class="line">  <span class="attr">since:</span> <span class="number">2021-11</span>  <span class="comment">#建站时间</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Icon between year and copyright info.</span></span><br><span class="line">  <span class="attr">icon:</span>       <span class="comment">#图标</span></span><br><span class="line">    <span class="comment"># Icon name in Font Awesome. See: https://fontawesome.com/icons</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">fa</span> <span class="string">fa-heart</span> </span><br><span class="line">    <span class="comment"># If you want to animate the icon, set it to true.</span></span><br><span class="line">    <span class="attr">animated:</span> <span class="literal">true</span>  </span><br><span class="line">    <span class="comment"># Change the color of icon, using Hex Code.</span></span><br><span class="line">    <span class="attr">color:</span> <span class="string">&quot;#ff0000&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># If not defined, `author` from Hexo `_config.yml` will be used.</span></span><br><span class="line">  <span class="attr">copyright:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Powered by Hexo &amp; NexT</span></span><br><span class="line">  <span class="attr">powered:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Beian ICP and gongan information for Chinese users. See: https://beian.miit.gov.cn, http://www.beian.gov.cn</span></span><br><span class="line">  <span class="attr">beian:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">icp:</span></span><br><span class="line">    <span class="comment"># The digit in the num of gongan beian.</span></span><br><span class="line">    <span class="attr">gongan_id:</span></span><br><span class="line">    <span class="comment"># The full num of gongan beian.</span></span><br><span class="line">    <span class="attr">gongan_num:</span></span><br><span class="line">    <span class="comment"># The icon for gongan beian. See: http://www.beian.gov.cn/portal/download</span></span><br><span class="line">    <span class="attr">gongan_icon_url:</span></span><br></pre></td></tr></table></figure>

<h3 id="文章结束标志"><a href="#文章结束标志" class="headerlink" title="文章结束标志"></a>文章结束标志</h3><p>在<code>/themes/next/layout/_macro</code>中新建 <code>passage-end-tag.swig</code> 文件,并添加以下内容：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;color: #ccc;font-size:14px;&quot;</span>&gt;</span>-------------本文结束<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-paw&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>感谢您的阅读-------------<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>打开<code>/themes/next/layout/_macro/post.swig</code>文件，在<code>END POST BODY</code>，之后添加代码：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&#123;#####################&#125;</span><br><span class="line">&#123;### END POST BODY ###&#125;</span><br><span class="line">&#123;#####################&#125;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% <span class="keyword">if</span> not is_index %&#125;</span><br><span class="line">    	&#123;% include <span class="string">&#x27;passage-end-tag.swig&#x27;</span> %&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>打开主题配置文件即<code>/themes/next/_config.yml</code>,在末尾添加：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">passage_end_tag:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="统计功能"><a href="#统计功能" class="headerlink" title="统计功能"></a>统计功能</h3><p>打开主题配置文件即<code>/themes/next/_config.yml</code></p>
<p>搜索<code>busuanzi_count</code>,修改如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors_icon:</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">total_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_views_icon:</span> <span class="string">fa</span> <span class="string">fa-eye</span></span><br><span class="line">  <span class="attr">post_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_views_icon:</span> <span class="string">fa</span> <span class="string">fa-eye</span></span><br></pre></td></tr></table></figure>

<p>搜索<code>footer</code>,添加如下：（要在footer:的里面）</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#统计</span></span><br><span class="line">  <span class="attr">counter:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>打开<code>/themes/next/layout/_partials</code>,在底下添加：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>% if theme.footer.counter %<span class="punctuation">&#125;</span></span><br><span class="line">    &lt;script async src=<span class="string">&quot;//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="punctuation">&#123;</span>% endif %<span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="设置菜单"><a href="#设置菜单" class="headerlink" title="设置菜单"></a>设置菜单</h3><p>打开主题配置文件即<code>/themes/next/_config.yml</code>，查找<code>menu</code>，添加页面，可以自定义。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="attr">resources:</span> <span class="string">/resources/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-download</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure>

<p>新添加的菜单需要翻译对应的中文，打开<code>/theme/next/languages/zh-CN.yml</code>，在<code>menu</code>下设置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">首页</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">归档</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">分类</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">标签</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">关于</span></span><br><span class="line">  <span class="attr">resources:</span> <span class="string">资源</span></span><br><span class="line">  <span class="attr">search:</span> <span class="string">搜索</span></span><br><span class="line">  <span class="attr">schedule:</span> <span class="string">日程表</span></span><br><span class="line">  <span class="attr">sitemap:</span> <span class="string">站点地图</span></span><br><span class="line">  <span class="attr">commonweal:</span> <span class="string">公益</span> <span class="number">404</span></span><br></pre></td></tr></table></figure>

<p>在根目录下打开<code>Git Bash</code>，输入如下代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;categories&quot;</span></span><br><span class="line">hexo new page <span class="string">&quot;tags&quot;</span></span><br><span class="line">hexo new page <span class="string">&quot;about&quot;</span></span><br><span class="line">hexo new page <span class="string">&quot;resources&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="顶部加载条"><a href="#顶部加载条" class="headerlink" title="顶部加载条"></a>顶部加载条</h3><p>在<code>/themes/next</code>目录下打开<code>Git Bash</code>，输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-pace <span class="built_in">source</span>/lib/pace</span><br></pre></td></tr></table></figure>

<p>在<code>/themes/next/_config.yml</code>，找到<code>pace</code>，修改代码：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pace:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Themes list:</span></span><br><span class="line">  <span class="comment"># big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple</span></span><br><span class="line">  <span class="comment"># corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">minimal</span></span><br></pre></td></tr></table></figure>

<h3 id="置顶"><a href="#置顶" class="headerlink" title="置顶"></a>置顶</h3><p>在根目录下打开<code>Git Bash</code>，输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure>

<p>设置置顶标志</p>
<p>打开<code>/themes/next/layout/_macro/post.swig</code>，定位到<code>&lt;div class=&quot;post-meta&quot;&gt;</code>标签下，插入如下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if post.top %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-thumb-tack&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">7D26CD</span>&gt;</span>置顶<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-divider&quot;</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>在文章中添加top</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">top:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h3><p>在根目录下打开<code>Git Bash</code>，输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p>打开<code>/_config.yml</code>，添加代码：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>



<p>打开<code>/themes/next/_config.yml</code>，查找<code>local_search</code> ，修改代码：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">manual</span>   <span class="comment">#手动，按回车键或搜索按钮触发搜索</span></span><br></pre></td></tr></table></figure>

<h3 id="彩色Tags"><a href="#彩色Tags" class="headerlink" title="彩色Tags"></a>彩色Tags</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% label [class] @ 标签内容 %&#125;</span><br><span class="line"></span><br><span class="line">class：</span><br><span class="line"> - default: 浅灰色,可留空</span><br><span class="line"> - primary: 浅紫色</span><br><span class="line"> - success: 浅绿色</span><br><span class="line"> - info: 浅蓝色</span><br><span class="line"> - warning: 浅黄色</span><br><span class="line"> - danger: 浅红色</span><br></pre></td></tr></table></figure>

<mark class="label info"> 标签内容</mark>

<h3 id="彩色-Note"><a href="#彩色-Note" class="headerlink" title="彩色 Note"></a>彩色 Note</h3><p>避免将标签和内容写在同一行，可能引起编译错误。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% note [class]%&#125; </span><br><span class="line">内容</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">class: </span><br><span class="line"> - default: 灰色</span><br><span class="line"> - primary: 紫色</span><br><span class="line"> - success: 绿色</span><br><span class="line"> - info: 蓝色</span><br><span class="line"> - warning: 黄色</span><br><span class="line"> - danger: 红色</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<div class="note success"><p>学无止境</p>
</div>

<h3 id="居中引用"><a href="#居中引用" class="headerlink" title="居中引用"></a>居中引用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% cq %&#125; 引用内容 &#123;% endcq %&#125;</span><br></pre></td></tr></table></figure>

<blockquote class="blockquote-center">
<p>​    Later is never</p>

</blockquote>

<h3 id="切换Tabs"><a href="#切换Tabs" class="headerlink" title="切换Tabs"></a>切换Tabs</h3><p>使用 tabs…endtabs 标记 Tab 框架，框架内用 <code>&lt;!-- tab [name]--&gt;</code> 注释语句区分 Tab。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% tabs [Class] %&#125; // Class: 必填项，Tab的全局名称，唯一值，不能带有符号</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 1号Tab--&gt;</span><br><span class="line">这里是1号Tab内容</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 2号Tab--&gt;</span><br><span class="line">这里是2号Tab内容</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 3号Tab--&gt;</span><br><span class="line">这里是3号Tab内容</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>

<div class="tabs" id="info"><ul class="nav-tabs"><li class="tab active"><a href="#info-1">1号Tab</a></li><li class="tab"><a href="#info-2">2号Tab</a></li><li class="tab"><a href="#info-3">3号Tab</a></li></ul><div class="tab-content"><div class="tab-pane active" id="info-1"><p>这里是1号Tab内容</p></div><div class="tab-pane" id="info-2"><p>这里是2号Tab内容</p></div><div class="tab-pane" id="info-3"><p>这里是3号Tab内容</p></div></div></div>

<h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="https://blog.csdn.net/Growing_potato/article/details/113926856?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link">next主题美化——背景图片、页面透明化、阴影、圆角、动画</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/106060640">个人博客第8篇——优化主题（持续更新）</a></p>
<p><a href="https://www.bbsmax.com/A/amd0j6R6Jg/">使用hexo-neat插件压缩页面静态资源 (bbsmax.com)</a></p>
<p><a href="https://blog.csdn.net/nightmare_dimple/article/details/86661502">Hexo博客优化之Next主题美化_huangpiao-CSDN博客_hexo next</a></p>
<p><a href="https://www.imczw.com/post/tech/hexo-next-tags-markdown.html">Hexo-Next 常用 MD 语法合集 | 第 25 小时随想 (imczw.com)</a></p>
]]></content>
      <categories>
        <category>hexo</category>
        <category>美化</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>主题美化</tag>
      </tags>
  </entry>
  <entry>
    <title>博客优化：添加评论</title>
    <url>/posts/7c915937/</url>
    <content><![CDATA[<p>​    一篇心得，与人分享，怎么可以没有讨论呢，因此一篇文章的评论功能是必不可少的。</p>
<ol>
<li>插入来必力评论系统</li>
</ol>
<span id="more"></span>

<h2 id="来必力评论系统"><a href="#来必力评论系统" class="headerlink" title="来必力评论系统"></a>来必力评论系统</h2><h3 id="注册来必力-账号"><a href="#注册来必力-账号" class="headerlink" title="注册来必力 账号"></a>注册<a href="http://livere.com/">来必力 </a>账号</h3><p>验证邮箱就可以完成验证</p>
<p><img src="sign_1.jpg"></p>
<p>登录来必力账号，选择<code>安装</code>，安装免费版</p>
<p><img src="sign_2.jpg"></p>
<p>第一次下侧会出现一个框让你填写网站信息，然后获取代码就行。注意网络链接是你的博客链接。</p>
<h3 id="复制data-uid代码"><a href="#复制data-uid代码" class="headerlink" title="复制data-uid代码"></a>复制<code>data-uid</code>代码</h3><p><img src="sign_3.jpg"></p>
<p>4.配置主题文件</p>
<p>在<code>/themes/next/_config.yml</code>,中找到<code>livere_uid</code>,粘贴代码</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">livere_uid:</span> <span class="string">&quot;uid代码&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="设置提醒"><a href="#设置提醒" class="headerlink" title="设置提醒"></a>设置提醒</h3><p><img src="sign_4.jpg"></p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>在根目录下打开<code>Git Bash</code>,输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean&amp;&amp;hexo g&amp;&amp;hexo d</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>hexo</category>
        <category>评论</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>来必力</tag>
      </tags>
  </entry>
  <entry>
    <title>博客优化：添加音乐</title>
    <url>/posts/ac324628/</url>
    <content><![CDATA[<p>​    自己的博客，搭配上自己的歌单，写起来才更方松。配置过程比较简单，在博客页面中添加Metingjs代码，接着填入歌单信息就行。</p>
<ol>
<li>扩展侧边栏代码，添加QQ音乐</li>
</ol>
<span id="more"></span>

<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>我所使用的next的版本8.8.1。</p>
<ul>
<li><p>新版本的next配置文件在<code>/source/hexo-theme-next/_config.yml</code></p>
</li>
<li><p>旧版本的next配置文件在``/themes/next/_config.yml`</p>
</li>
<li><p>hexo5.0版本可以定义配置文件在<code>/_config.next.yml</code></p>
</li>
</ul>
<h2 id="获取歌单信息"><a href="#获取歌单信息" class="headerlink" title="获取歌单信息"></a>获取歌单信息</h2><p>将自己的想添加的歌单分享出去，然后在浏览器上打开，其中的一串数，或者是<code>id=</code>，就是要获得信息。</p>
<p><img src="config_0.jpg"></p>
<h2 id="添加音乐代码"><a href="#添加音乐代码" class="headerlink" title="添加音乐代码"></a>添加音乐代码</h2><p>从<a href="https://blog.csdn.net/qq_39800978/article/details/109407258?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1.no_search_link&spm=1001.2101.3001.4242.2">Hexo博客设置背景音乐_Z先森9701的博客-CSDN博客</a>受到的启发，但由于是对源码进行修改，如果更新版本，则会产生代码冲突。因此最好是使用拓展的方式完成功能。</p>
<h3 id="修改主题配置文件"><a href="#修改主题配置文件" class="headerlink" title="修改主题配置文件"></a>修改主题配置文件</h3><p>打开<code>/_config.next.yml</code>文件：(旧版本在<code>/themes/next/_config.yml</code>)</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="string">source/_data/sidebar.njk</span></span><br></pre></td></tr></table></figure>

<h3 id="新建sidebar-njk文件"><a href="#新建sidebar-njk文件" class="headerlink" title="新建sidebar.njk文件"></a>新建sidebar.njk文件</h3><p>新建<code>/source/_data/sidebar.njk</code>文件，并添加如下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- require APlayer --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- require MetingJS--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!--playlist外链地址--&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">meting-js</span></span></span><br><span class="line"><span class="tag">           <span class="attr">server</span>=<span class="string">&quot;tencent&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">type</span>=<span class="string">&quot;playlist&quot;</span> </span></span><br><span class="line"><span class="tag">           <span class="attr">id</span>=<span class="string">&quot;8239047461&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">mini</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">fixed</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">list-folded</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">autoplay</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">volume</span>=<span class="string">&quot;0.4&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">theme</span>=<span class="string">&quot;#FADFA3&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">order</span>=<span class="string">&quot;list&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">loop</span>=<span class="string">&quot;all&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">preload</span>=<span class="string">&quot;auto&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">lrc-type</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">mutex</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">meting-js</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>代码的具体含义可以参照官方文档：<a href="https://aplayer.js.org/#/home">APlayer</a>，<a href="https://github.com/metowolf/MetingJS">MetingJS</a>。</p>
<p>其中<code>server</code>,<code> type</code>,<code>id</code>,需要修改，我这里使用的是QQ音乐的歌单</p>
<h2 id="实现全局播放"><a href="#实现全局播放" class="headerlink" title="实现全局播放"></a>实现全局播放</h2><p>但测试next8.8.0之后不用，如果不行，可以接着向下看：</p>
<h3 id="修改主题配置文件-1"><a href="#修改主题配置文件-1" class="headerlink" title="修改主题配置文件"></a>修改主题配置文件</h3><p>打开<code>/_config.next.yml</code>文件：(旧版本在<code>/themes/next/_config.yml</code>)</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="string">source/_data/head.njk</span></span><br></pre></td></tr></table></figure>

<h3 id="新建head-njk文件"><a href="#新建head-njk文件" class="headerlink" title="新建head.njk文件"></a>新建head.njk文件</h3><p>新建<code>/source/_data/head.njk</code>文件，并添加如下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--pjax：防止跳转页面音乐暂停--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/pjax@0.2.8/pjax.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>打开<code>/_config.next.yml</code>文件中找到<code>pjax</code>，将它设置为<code>true</code>：(旧版本在<code>/themes/next/_config.yml</code>)</p>
<p><img src="config_3.jpg"></p>
<p>后面就可以通过<code>hexo</code>命令生成界面了。</p>
<p><img src="config_4.jpg"></p>
]]></content>
      <categories>
        <category>hexo</category>
        <category>Aplayer</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>Aplayer</tag>
        <tag>Metingjs</tag>
      </tags>
  </entry>
  <entry>
    <title>博客优化：文章链接</title>
    <url>/posts/706fbb62/</url>
    <content><![CDATA[<p>​    hexo生成的链接的格式和文章的时间标题有关，当更换标题或者时间时，就会改变链接地址，导致产生死链。因此将其替换掉是一个一劳永逸的方法。</p>
<ol>
<li>使用hexo-abbrlink，永久固定链接</li>
</ol>
<span id="more"></span>

<p>连接在修改容易造成死链由于博客文章永久链接格式是：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">year/:month/:day/:title/</span><br></pre></td></tr></table></figure>

<p>在hexo博客根目录，打开<code>Git Bash</code>,输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>

<p>打开hexo博客根目录的<code>_config.yml</code>，修改如下配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># permalink: :year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink/</span>  <span class="comment">#会改变文章图片链接</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">    <span class="attr">alg:</span> <span class="string">crc32</span>   <span class="comment">#算法： crc16(default) and crc32</span></span><br><span class="line">    <span class="attr">rep:</span> <span class="string">hex</span>     <span class="comment">#进制： dec(default) and hex</span></span><br></pre></td></tr></table></figure>

<p>不同算法和进制生成不同的格式：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">crc16 &amp; hex</span><br><span class="line">https:<span class="comment">//post.zz173.com/posts/66c8.html</span></span><br><span class="line">crc16 &amp; dec</span><br><span class="line">https:<span class="comment">//post.zz173.com/posts/65535.html</span></span><br><span class="line"></span><br><span class="line">crc32 &amp; hex</span><br><span class="line">https:<span class="comment">//post.zz173.com/posts/8ddf18fb.html</span></span><br><span class="line">crc32 &amp; dec</span><br><span class="line">https:<span class="comment">//post.zz173.com/posts/1690090958.html</span></span><br></pre></td></tr></table></figure>

<p>使用<code>hexo clean &amp;&amp; hexo g</code>重新生成博客，在博客源文件可以看到自动生成的abbrlink编号：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">博客优化：文章链接</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">博客</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">文章链接</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">abbrlink:</span> <span class="string">706fbb62</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2021-11-14 13:46:02</span></span><br></pre></td></tr></table></figure>



<h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="https://mp.weixin.qq.com/s/PJbCXkKvmHqEiHftM-2Hkg">优化文章永久链接为数字编号</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/134492757">Hexo 生成永久文章链接</a></p>
]]></content>
      <categories>
        <category>hexo</category>
        <category>文章链接</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>博客优化：文章插图</title>
    <url>/posts/715bf213/</url>
    <content><![CDATA[<p>​    一篇好的博文，不能只有文字，还需要有配图才行。我试过网上的很多方法都没有实现，最后还是找到了一种适合自己的方法。</p>
<p>1.<code>hexo</code>高版本的博文插入本地图片</p>
<p>2.使用插件 <code>hexo-renderer-marked</code> </p>
<span id="more"></span>

<p>本文在网上看到了很多关于hexo博文如何插入本地图片的，常用的插件有<code>hexo-asset-image</code>,<code>hexo-renderer-marked</code>，<code>hexo-image-link</code>等等，随着hexo软件的升级总会出现各种各样的问题。</p>
<p>如<code>hexo-asset-image</code>升级版本或者hexo升级版本，图片的url会发生冲突或者改变，因此导致现在的很多教程失效，图片很难显示出来。</p>
<p>对此有三种处理方法：</p>
<ul>
<li>控制hexo、nodejs、插件的版本。</li>
<li>对现在所用的插件进行修改打补丁。</li>
<li>使用官方提供的标记插件。</li>
</ul>
<p>我使用的是第三种方法。相对第一种方法，随着版本的更新，可以随时体验新的功能。相对第二种方法，对插件修改只适用于本机，但这不利于持续集成。另外为了符合markdown的语法，我使用官方推荐的插件<code>hexo-renderer-marked</code></p>
<h2 id="配置站点文件"><a href="#配置站点文件" class="headerlink" title="配置站点文件"></a>配置站点文件</h2><p>打开hexo配置文件<code>_config.yml</code>，将<code>post_asset_folder</code>改成<code>true</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="下载插件"><a href="#下载插件" class="headerlink" title="下载插件"></a>下载插件</h2><p>在<code>hexo站点根目录</code>打开<code>Git Bash</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-marked --save <span class="comment">#安装插件</span></span><br></pre></td></tr></table></figure>

<h2 id="新建博文"><a href="#新建博文" class="headerlink" title="新建博文"></a>新建博文</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;文件名&quot;</span></span><br></pre></td></tr></table></figure>

<p>此时在<code>/source/_posts</code>文件夹下就会一个<code>同名文件夹</code>和<code>同名的.md文件</code></p>
<h2 id="图片插入格式"><a href="#图片插入格式" class="headerlink" title="图片插入格式"></a>图片插入格式</h2><div class="tabs" id="info"><ul class="nav-tabs"><li class="tab active"><a href="#info-1">使用标记插件</a></li><li class="tab"><a href="#info-2">使用hexo插件</a></li></ul><div class="tab-content"><div class="tab-pane active" id="info-1"><p>1.将要插入的图片放到<code>同名文件夹</code>下</p>
<p>2.在<code>同名的.md文件</code>输入</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&#123;% asset_img 图片名<span class="selector-class">.jpg</span> %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="info-2"><p>1.将要插入的图片放到<code>同名文件夹</code>下</p>
<p>2.下载插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-marked --save</span><br></pre></td></tr></table></figure>

<p>3.在<code>同名的.md文件</code>输入</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![](<span class="link">图片名.jpg</span>)</span><br></pre></td></tr></table></figure></div></div></div>

<p>在md文件里面插入入图片在文档中不显示，生成静态文件才会显示出来</p>
<h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h3><p>在食用前，卸载自带的<code>hexo-asset-image</code>，否则在生成界面时，不会显示图片</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-asset-image --save</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>hexo</category>
        <category>图片插入</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>博客优化：持续集成</title>
    <url>/posts/2942ffab/</url>
    <content><![CDATA[<p>​    通过AppVeyor将博客的编译的过程托管出去，一次配置，一劳永逸。</p>
<ol>
<li>从本地选择性上传博客源文件</li>
<li>使用AppVeyor在线编译github的文件</li>
</ol>
<span id="more"></span>

<p>这一篇是在上一篇如何基于hexo+github搭建个人博客之后进行的。</p>
<p>首先为什么会写这么一篇文章，一方面是为了记录一下自己的搭建心得，另一方面当然是为了方便了。</p>
<p>在本地电脑上配置好所有的hexo环境之后，写好的md.文件只能在本地通过<code>hexo  -g</code> 编译，而且只能在这一台电脑上完成，如果你换一台电脑，或者硬盘崩了，都需要重新配置。</p>
<p>如果我们把编译的过程托管出去，而我们只需要向github提交文件，就会简单很多。</p>
<h2 id="GitHub备份源文件"><a href="#GitHub备份源文件" class="headerlink" title="GitHub备份源文件"></a><a href="https://github.com/">GitHub</a>备份源文件</h2><h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><p><img src="start_a_project.jpg"></p>
<p>权限设为public</p>
<p><img src="start_a_project2.jpg"></p>
<p>初始化本地仓库（使用hexo搭建的本地文件夹,也就是原来使用<code>hexo -g</code>的站点目录）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin 新建仓库的网址</span><br></pre></td></tr></table></figure>

<p><img src="start_a_project3.jpg"></p>
<h3 id="修改-gitignore文件"><a href="#修改-gitignore文件" class="headerlink" title="修改.gitignore文件"></a>修改<code>.gitignore</code>文件</h3><p>由于目录下一些文件是通过hexo -g 生成的，所以不需要去备份。</p>
<p>在<code>.gitignore</code>文件添加不需要上传的文件如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br><span class="line">package-lock.json</span><br></pre></td></tr></table></figure>

<h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><p>在上传之前，如果你使用的是github上下载的主题，<strong>请一定要删除里面的<code>.git</code>隐藏文件</strong>，否则构建完成后，会缺少一部分页面元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .				#添加当前目录下的所有文件到暂存区</span><br><span class="line">git commit -m &quot;hexo source&quot;		#将暂存区内容添加到仓库中。	</span><br><span class="line">git push origin main			#将本地的分支版本上传到远程并合并,一般默认的分支是master,我的是main</span><br></pre></td></tr></table></figure>

<p>此时查看自己的仓库，应该已经有了文件。</p>
<h2 id="注册AppVeyor"><a href="#注册AppVeyor" class="headerlink" title="注册AppVeyor"></a>注册AppVeyor</h2><h3 id="登录AppVeyor"><a href="#登录AppVeyor" class="headerlink" title="登录AppVeyor"></a>登录<a href="https://ci.appveyor.com/login">AppVeyor</a></h3><p>Appveyor对于windows支持比较友好，支持代码提交到github。</p>
<p><img src="CI_1.jpg"></p>
<p>第一次登录时，会让github授权，同意就行。</p>
<h3 id="创建新项目"><a href="#创建新项目" class="headerlink" title="创建新项目"></a>创建新项目</h3><p><img src="CI_2.jpg"></p>
<p>选择在github上新建的仓库</p>
<p><img src="CI_3.jpg"></p>
<h2 id="设置访问权限"><a href="#设置访问权限" class="headerlink" title="设置访问权限"></a>设置访问权限</h2><h3 id="生成访问令牌"><a href="#生成访问令牌" class="headerlink" title="生成访问令牌"></a>生成访问令牌</h3><p>打开github设置<code>Settings</code></p>
<p><img src="CI_4.jpg"></p>
<p>选择<code>Developer Settings</code></p>
<p><img src="CI_5.jpg"></p>
<p>选择<code>Personal access tokens</code></p>
<p><img src="CI_6.jpg"></p>
<p>配置<code>Personal access tokens</code></p>
<p><img src="CI_7.jpg"></p>
<p>配置完成后，下滑到最后，点击<code>Generate token1</code> 生成tokens</p>
<p>复制<code>Access Token</code></p>
<p><img src="CI_8.jpg"></p>
<h3 id="加密Access-Token"><a href="#加密Access-Token" class="headerlink" title="加密Access Token"></a>加密<code>Access Token</code></h3><p>因为生成的Token需要写进公开的脚本中，所以要进行加密。</p>
<p>打开AppVeyor加密页面，进行如下操作：</p>
<p><img src="CI_9.jpg"></p>
<p>复制加密的Token</p>
<h3 id="配置appveyor-yml"><a href="#配置appveyor-yml" class="headerlink" title="配置appveyor.yml"></a>配置<code>appveyor.yml</code></h3><p>在本地配置根目录下新建一个文件<code>appveyor.yml</code></p>
<p><img src="CI_10.jpg"></p>
<p>粘贴以下代码：其中<strong>将加密的Token粘贴进去</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">clone_depth:</span> <span class="number">5</span>  </span><br><span class="line"></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="attr">access_token:</span></span><br><span class="line">    <span class="attr">secure:</span> <span class="comment">#### 从#开始删除，将加密的Token粘贴在此处 ####    </span></span><br><span class="line">    </span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">ps:</span> <span class="string">Install-Product</span> <span class="string">node</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">node</span> <span class="string">--version</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">--version</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">-g</span> </span><br><span class="line">    <span class="comment">####### 根据自己需求，下载的hexo 插件 ##############</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-theme-next</span>   <span class="comment"># 下载最新版本的next主题</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-abbrlink</span> <span class="string">--save</span> <span class="comment"># 编写永久链接</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-generator-searchdb</span> <span class="string">--save</span>  <span class="comment">#本地搜索</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-neat</span> <span class="string">--save</span>  <span class="comment"># 静态压缩</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-filter-nofollow</span> <span class="string">--save</span>    <span class="comment"># 防跟随</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">uninstall</span> <span class="string">hexo-asset-image</span> <span class="string">--save</span>     <span class="comment">#在高版本的hexo加载图片出现问题</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-renderer-marked</span> <span class="string">--save</span>  <span class="comment"># 加载图片</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-word-counter</span>   <span class="comment">#统计文章字数</span></span><br><span class="line">    <span class="comment">################################################</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">ls</span> <span class="string">--depth</span> <span class="number">0</span>  <span class="comment">#检查安装的插件</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">build_script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">artifacts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">public</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">on_success:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">credential.helper</span> <span class="string">store</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">ps:</span> <span class="string">Add-Content</span> <span class="string">&quot;$env:USERPROFILE\.git-credentials&quot;</span> <span class="string">&quot;https://$($env:access_token):x-oauth-basic@github.com`n&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">&quot;%GIT_USER_EMAIL%&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">&quot;%GIT_USER_NAME%&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">clone</span> <span class="string">--depth</span> <span class="number">5</span> <span class="string">-q</span> <span class="string">--branch=%TARGET_BRANCH%</span> <span class="string">%STATIC_SITE_REPO%</span> <span class="string">%TEMP%\static-site</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cd</span> <span class="string">%TEMP%\static-site</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">del</span> <span class="string">*</span> <span class="string">/f</span> <span class="string">/q</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">for</span> <span class="string">/d</span> <span class="string">%%p</span> <span class="string">IN</span> <span class="string">(*)</span> <span class="string">do</span> <span class="string">rmdir</span> <span class="string">&quot;%%p&quot;</span> <span class="string">/s</span> <span class="string">/q</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">SETLOCAL</span> <span class="string">EnableDelayedExpansion</span> <span class="string">&amp;</span> <span class="string">robocopy</span> <span class="string">&quot;%APPVEYOR_BUILD_FOLDER%\public&quot;</span> <span class="string">&quot;%TEMP%\static-site&quot;</span> <span class="string">/e</span> <span class="string">&amp;</span> <span class="string">IF</span> <span class="type">!ERRORLEVEL</span><span class="string">!</span> <span class="string">EQU</span> <span class="number">1</span> <span class="string">(exit</span> <span class="number">0</span><span class="string">)</span> <span class="string">ELSE</span> <span class="string">(IF</span> <span class="type">!ERRORLEVEL</span><span class="string">!</span> <span class="string">EQU</span> <span class="number">3</span> <span class="string">(exit</span> <span class="number">0</span><span class="string">)</span> <span class="string">ELSE</span> <span class="string">(exit</span> <span class="number">1</span><span class="string">))</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">add</span> <span class="string">-A</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">commit</span> <span class="string">-m</span> <span class="string">&quot;Update Static Site&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">push</span> <span class="string">origin</span> <span class="string">%TARGET_BRANCH%</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">appveyor</span> <span class="string">AddMessage</span> <span class="string">&quot;Static Site Updated&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="配置AppVeyor"><a href="#配置AppVeyor" class="headerlink" title="配置AppVeyor"></a>配置AppVeyor</h3><p>打开AppVeyor新建的项目界面，配置<code>environment</code></p>
<p><img src="CI_12.jpg"></p>
<h3 id="上传源文件"><a href="#上传源文件" class="headerlink" title="上传源文件"></a>上传源文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add -A   <span class="comment"># 暂存提交，和git add . 的区别是可以删除文件</span></span><br><span class="line">git commit -m <span class="string">&quot;first&quot;</span></span><br><span class="line">git push origin main   <span class="comment">#默认是master</span></span><br></pre></td></tr></table></figure>

<p>此时已经基本完成所有操作，可以在Appveyor网站的<code>current build</code>观察到当前的构件情况</p>
<p><img src="CI_13.jpg"></p>
<p>可以看到最后成功了</p>
<p><img src="CI_14.jpg"></p>
<p>后面就可以通过向新建的备份文件仓库<code>push</code>文件就行了。</p>
<p>如果换了新电脑，只需要将仓库的文件<code>clone </code>下来就行了</p>
<h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h3><p>我在编译过程中发现没有Error，但是页面仍没有加载出来，而且什么都没有了。最后查看解析过程发现有一个 <code>No layout</code>的<code>Warn</code>。</p>
<p><img src="CI_15.jpg"></p>
<p>原来是因为上传主题，而主题里面有一个.git的隐藏文件，上传时会把这个主题当成一个独立的模块，导致页面生成失败。</p>
<p>解决方案是：</p>
<ol>
<li><p>删除文件夹里面的.git文件夹</p>
</li>
<li><p>执行下面的代码</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">rm</span> -r --cached [文件夹名]</span><br><span class="line">git add [文件夹名]</span><br><span class="line">git commit -m <span class="string">&quot;No git File&quot;</span></span><br><span class="line">git push origin [branch_name] </span><br></pre></td></tr></table></figure>



<h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="https://blog.csdn.net/Mculover666/article/details/94837390">使用Appveyor持续集成博客</a></p>
<p><a href="https://blog.csdn.net/weixin_34088583/article/details/88772236">使用AppVeyor持续集成博客</a></p>
]]></content>
      <categories>
        <category>hexo</category>
        <category>持续集成</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>持续集成</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建博客-基于hexo-github</title>
    <url>/posts/29cff741/</url>
    <content><![CDATA[<p>自己搭建一个博客，可以锻炼自己的能力， 也可以去记录一下自己的心得。本文是将资源托管于github仓库，基于hexo搭建的，下面是我自己记录的搭建过程。</p>
<ol>
<li>git的安装和使用</li>
<li>nodejs的安装和使用</li>
<li>hexo的安装和使用</li>
</ol>
<span id="more"></span>

<p>我使用的软件及版本如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">git:</span> <span class="number">2.33</span><span class="number">.1</span><span class="string">.windows.1</span></span><br><span class="line"><span class="attr">node:</span> <span class="number">16.13</span><span class="number">.0</span></span><br><span class="line"><span class="attr">hexo:</span> <span class="number">5.4</span><span class="number">.0</span></span><br></pre></td></tr></table></figure>

<h2 id="git的安装和使用"><a href="#git的安装和使用" class="headerlink" title="git的安装和使用"></a>git的安装和使用</h2><h3 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h3><p>如果进不去<a href="https://www.github.com/">github</a>的官网，则在本地hosts的文件(C:\Windows\System32\drivers\etc)添加:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这个ip可能会变化</span></span><br><span class="line"><span class="number">140.82</span><span class="number">.114</span><span class="number">.4</span> github.<span class="property">com</span></span><br><span class="line"><span class="number">185.199</span><span class="number">.108</span><span class="number">.153</span> assets-cdn.<span class="property">github</span>.<span class="property">com</span></span><br><span class="line"><span class="number">199.232</span><span class="number">.69</span><span class="number">.194</span> github.<span class="property">global</span>.<span class="property">ssl</span>.<span class="property">fastly</span>.<span class="property">net</span></span><br></pre></td></tr></table></figure>

<ul>
<li>host的文件修改需要权限</li>
<li><a href="https://www.ipaddress.com/">IPAddress.com</a>网站,查询上面三个地址ip</li>
</ul>
<h3 id="安装git。"><a href="#安装git。" class="headerlink" title="安装git。"></a>安装git。</h3><p>下载网址：<a href="https://git-scm.com/">https://git-scm.com/</a></p>
<p>路径自定义，其他的默认安装即可。</p>
<p>这个注意：后面会用到。</p>
<p>![](git_setup_branches.jpg）</p>
<p>安装完成后<br>点击鼠标右键，出现下图图标，说明安装完成。</p>
<p><img src="check_git.png"><br>打开Git Bash,输入git –version,出现版本号，则表示安装完成。</p>
<p><img src="git_version.jpg"></p>
<h3 id="绑定SSH"><a href="#绑定SSH" class="headerlink" title="绑定SSH"></a>绑定SSH</h3><p>通过ssh协议生成公钥，将github和本地连接起来，完成后可以在本地通过gi命令上传文件</p>
<p>在git bash 里面输入 ssh-keygen -t rsa,<strong>并敲四次回车</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>

<p>生成两个文件，分别为秘钥 id_rsa 和公钥 id_rsa.pub</p>
<p>一般在根目录的文件下，windows稍微特别，在用户文件里（C:/Users/用户名/.ssh）</p>
<p><img src="ssh-setup.jpg"></p>
<p>用记事本打开 id_rsa.pub，并将其中内容全部复制</p>
<p><img src="ssh-setup2.jpg"><br>打开自己的github设置<br><img src="ssh-setup3.jpg"></p>
<p>选择SSH and GPG keys</p>
<p><img src="ssh-setup4.jpg"></p>
<p>将公钥粘贴进去</p>
<p><img src="ssh-setup5.jpg"><br>验证是否成功，我们可以通过在 Git Bash 中输入 ssh -T <a href="mailto:&#103;&#x69;&#116;&#x40;&#103;&#105;&#x74;&#x68;&#117;&#98;&#46;&#x63;&#x6f;&#109;">&#103;&#x69;&#116;&#x40;&#103;&#105;&#x74;&#x68;&#117;&#98;&#46;&#x63;&#x6f;&#109;</a> 进行检验：</p>
<p>第一次会询问你是否继续连接，输入yes就行，然后再输一次，就正常了。</p>
<p><img src="ssh-setup6.jpg"><br>新建项目</p>
<p><img src="ssh-setup7.jpg"><br>项目配置如下:</p>
<p><img src="ssh-setup8.jpg"><br>回到主页，点击刚建好的项目</p>
<p><img src="ssh-setup9.jpg"></p>
<p>复制刚建好的项目网址<br><img src="ssh-setup10.jpg"></p>
<p>在本地计算机新建一个文件夹，比如我的文件夹在(D:/MyBlog)</p>
<p>然后在该文件下右键打开Cit bash输入：git clone 项目网址</p>
<p><img src="ssh-setup11.jpg"></p>
<p>此时已经将本地文件夹和远程仓库绑定了。</p>
<h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装<a href="https://nodejs.org/en/">node.js</a></h2><h3 id="测试安装"><a href="#测试安装" class="headerlink" title="测试安装"></a>测试安装</h3><p>从<a href="https://nodejs.org/en/">node.js</a>官方下载安装，在<code>cmd</code>中检查是否安装成功</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">node -v </span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<h3 id="配置路径"><a href="#配置路径" class="headerlink" title="配置路径"></a>配置路径</h3><p>因为在执行例如npm install webpack -g等命令全局安装的时候，默认会将模块安装在C:\Users\用户名\AppData\Roaming路径下的npm和npm_cache中，不方便管理且占用C盘空间，所以这里配置自定义的全局模块安装目录，在node.js安装目录下新建两个文件夹 node_global和node_cache，然后在cmd命令下执行如下两个命令：<br><img src="ssh-setup12.jpg"></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> prefix &quot;F:\Program Files\nodejs\node_global&quot;</span><br><span class="line">npm config <span class="built_in">set</span> cache &quot;F:\Program Files\nodejs\node_cache&quot;</span><br></pre></td></tr></table></figure>

<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>在系统变量中新建一个变量名为 “NODE_PATH”<br><img src="ssh-setup12.jpg"></p>
<p>编辑用户变量里的Path，将相应npm的路径改为如图所示：</p>
<p><img src="ssh-setup13.jpg"></p>
<h3 id="测试npm模块"><a href="#测试npm模块" class="headerlink" title="测试npm模块"></a>测试npm模块</h3><p>在cmd中执行</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install webpack -g</span><br></pre></td></tr></table></figure>

<p>执行 npm webpack -v，查看webpack是否安装成功，</p>
<h2 id="Hexo安装和使用"><a href="#Hexo安装和使用" class="headerlink" title="Hexo安装和使用"></a>Hexo安装和使用</h2><h3 id="下载hexo"><a href="#下载hexo" class="headerlink" title="下载hexo"></a>下载hexo</h3><p>点开MyBlog 文件夹，鼠标右键打开 Git Bush Here，输入：</p>
<figure class="highlight plaintext"><figcaption><span>bash</span></figcaption><table><tr><td class="code"><pre><span class="line">npm install webpack -g</span><br></pre></td></tr></table></figure>

<h3 id="初始化hexo"><a href="#初始化hexo" class="headerlink" title="初始化hexo"></a>初始化hexo</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<h3 id="本地静态部署"><a href="#本地静态部署" class="headerlink" title="本地静态部署"></a>本地静态部署</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g 	<span class="comment">#生成网站静态文件</span></span><br></pre></td></tr></table></figure>

<p>在本地查看：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>此时框架已经基本在本地布置完成:可以在 <a href="http://localhost:4000/">http://localhost:4000</a> 查看新部署的网页，ctrl+c停止运行</p>
<p>将Hexo部署到GitHub</p>
<p>用记事本打开当前文件夹下的 _config.yml 文件</p>
<p>并在底部写上如下代码，需要把原来的deploy删除，另外冒号后面要有空格<br><img src="ssh-setup13.jpg"></p>
<h3 id="安装Git部署插件"><a href="#安装Git部署插件" class="headerlink" title="安装Git部署插件"></a>安装Git部署插件</h3><p>单平台部署可以不安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h3 id="提交到github"><a href="#提交到github" class="headerlink" title="提交到github"></a>提交到github</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean   #清除缓存文件和已生成的静态文件</span><br><span class="line">hexo g       #生成网站静态文件</span><br><span class="line">hexo d       #部署到github上的仓库</span><br></pre></td></tr></table></figure>

<p>此时你输入你项目的网址’http://用户名.github.io, 就可以访问自己的博客了。</p>
<p>hexo d 是上传到github上，如果你频繁的修改文件，或者只想暂时查看一下布局，可以选择：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean&amp;&amp;hexo g&amp;&amp;hexo s       </span><br></pre></td></tr></table></figure>

<p>通过<a href="http://localhost:4000/">http://localhost:4000</a> 在本地查看</p>
<p>当你自己一步步搭建完成后，你会发现博客具有以下特点：</p>
<ul>
<li>这是一个静态网页。</li>
<li>hexo将你的项目，变成静态网页，</li>
<li>github仓库托管网页，可以实现联网和资源的放置。<br>另外github托管的网页，不会被爬虫检索，即在百度上搜索不到</li>
</ul>
<h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="https://blog.csdn.net/antma/article/details/86104068">配置nodejs教程</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/102592286">从零开始搭建个人博客（超详细）</a></p>
]]></content>
      <categories>
        <category>hexo</category>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
        <tag>git</tag>
        <tag>nodejs</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
